
TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003568  08003568  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003570  08003570  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000012c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008498  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001659  00000000  00000000  00028517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006e8  00000000  00000000  00029b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000547  00000000  00000000  0002a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fcdd  00000000  00000000  0002a79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000089d8  00000000  00000000  0004a47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c204f  00000000  00000000  00052e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001b48  00000000  00000000  00114ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  001169ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003530 	.word	0x08003530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003530 	.word	0x08003530

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 串口接收完成（收�?2个字节）中断回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <HAL_UART_RxCpltCallback+0x30>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d109      	bne.n	80004ea <HAL_UART_RxCpltCallback+0x26>
// 这个是保证多UART时执行的是想要的
  {
    // 将收到的数据返回（中断发送）
    HAL_UART_Transmit_DMA(&huart1, rx_data, 2);
 80004d6:	2202      	movs	r2, #2
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <HAL_UART_RxCpltCallback+0x34>)
 80004da:	4808      	ldr	r0, [pc, #32]	; (80004fc <HAL_UART_RxCpltCallback+0x38>)
 80004dc:	f001 fe72 	bl	80021c4 <HAL_UART_Transmit_DMA>
    // 重新�?启中断接�?
    HAL_UART_Receive_DMA(&huart1, rx_data, 2);
 80004e0:	2202      	movs	r2, #2
 80004e2:	4905      	ldr	r1, [pc, #20]	; (80004f8 <HAL_UART_RxCpltCallback+0x34>)
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <HAL_UART_RxCpltCallback+0x38>)
 80004e6:	f001 fedd 	bl	80022a4 <HAL_UART_Receive_DMA>
  }
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40011000 	.word	0x40011000
 80004f8:	20000130 	.word	0x20000130
 80004fc:	20000028 	.word	0x20000028

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa7a 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f810 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8be 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f894 	bl	800063c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000514:	f000 f868 	bl	80005e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, rx_data, 2);
 8000518:	2202      	movs	r2, #2
 800051a:	4902      	ldr	r1, [pc, #8]	; (8000524 <main+0x24>)
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <main+0x28>)
 800051e:	f001 fec1 	bl	80022a4 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x22>
 8000524:	20000130 	.word	0x20000130
 8000528:	20000028 	.word	0x20000028

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 ffcc 	bl	80034d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xb4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xb4>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xb4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <SystemClock_Config+0xb8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <SystemClock_Config+0xb8>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <SystemClock_Config+0xb8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f001 f969 	bl	8001874 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a8:	f000 f8b2 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fbcc 	bl	8001d64 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005d2:	f000 f89d 	bl	8000710 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_USART1_UART_Init+0x50>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_USART1_UART_Init+0x4c>)
 8000620:	f001 fd80 	bl	8002124 <HAL_UART_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800062a:	f000 f871 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000028 	.word	0x20000028
 8000638:	40011000 	.word	0x40011000

0800063c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_DMA_Init+0x4c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <MX_DMA_Init+0x4c>)
 800064c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_DMA_Init+0x4c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	203a      	movs	r0, #58	; 0x3a
 8000664:	f000 fb17 	bl	8000c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000668:	203a      	movs	r0, #58	; 0x3a
 800066a:	f000 fb30 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2046      	movs	r0, #70	; 0x46
 8000674:	f000 fb0f 	bl	8000c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000678:	2046      	movs	r0, #70	; 0x46
 800067a:	f000 fb28 	bl	8000cce <HAL_NVIC_EnableIRQ>

}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_GPIO_Init+0x7c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <MX_GPIO_Init+0x7c>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_GPIO_Init+0x7c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_GPIO_Init+0x7c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <MX_GPIO_Init+0x7c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_GPIO_Init+0x7c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2104      	movs	r1, #4
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0x80>)
 80006e0:	f001 f8ae 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e4:	2304      	movs	r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_GPIO_Init+0x80>)
 80006fc:	f000 ff04 	bl	8001508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40020400 	.word	0x40020400

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <HAL_MspInit+0x58>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <HAL_MspInit+0x58>)
 800072c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_MspInit+0x58>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x58>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <HAL_MspInit+0x58>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x58>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2051      	movs	r0, #81	; 0x51
 8000760:	f000 fa99 	bl	8000c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000764:	2051      	movs	r0, #81	; 0x51
 8000766:	f000 fab2 	bl	8000cce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a4c      	ldr	r2, [pc, #304]	; (80008c8 <HAL_UART_MspInit+0x150>)
 8000796:	4293      	cmp	r3, r2
 8000798:	f040 8091 	bne.w	80008be <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <HAL_UART_MspInit+0x154>)
 80007a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a4:	4a49      	ldr	r2, [pc, #292]	; (80008cc <HAL_UART_MspInit+0x154>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6453      	str	r3, [r2, #68]	; 0x44
 80007ac:	4b47      	ldr	r3, [pc, #284]	; (80008cc <HAL_UART_MspInit+0x154>)
 80007ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b43      	ldr	r3, [pc, #268]	; (80008cc <HAL_UART_MspInit+0x154>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a42      	ldr	r2, [pc, #264]	; (80008cc <HAL_UART_MspInit+0x154>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b40      	ldr	r3, [pc, #256]	; (80008cc <HAL_UART_MspInit+0x154>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007e6:	2307      	movs	r3, #7
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4837      	ldr	r0, [pc, #220]	; (80008d0 <HAL_UART_MspInit+0x158>)
 80007f2:	f000 fe89 	bl	8001508 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80007f6:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 80007f8:	4a37      	ldr	r2, [pc, #220]	; (80008d8 <HAL_UART_MspInit+0x160>)
 80007fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80007fc:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 80007fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000802:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000804:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 8000806:	2240      	movs	r2, #64	; 0x40
 8000808:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000810:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 8000812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000816:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000818:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000836:	4827      	ldr	r0, [pc, #156]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 8000838:	f000 fa64 	bl	8000d04 <HAL_DMA_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000842:	f7ff ff65 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 800084a:	639a      	str	r2, [r3, #56]	; 0x38
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <HAL_UART_MspInit+0x15c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <HAL_UART_MspInit+0x164>)
 8000854:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <HAL_UART_MspInit+0x168>)
 8000856:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <HAL_UART_MspInit+0x164>)
 800085a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800085e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <HAL_UART_MspInit+0x164>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <HAL_UART_MspInit+0x164>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <HAL_UART_MspInit+0x164>)
 800086e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000872:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_UART_MspInit+0x164>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_UART_MspInit+0x164>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <HAL_UART_MspInit+0x164>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_UART_MspInit+0x164>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <HAL_UART_MspInit+0x164>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000892:	4812      	ldr	r0, [pc, #72]	; (80008dc <HAL_UART_MspInit+0x164>)
 8000894:	f000 fa36 	bl	8000d04 <HAL_DMA_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800089e:	f7ff ff37 	bl	8000710 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <HAL_UART_MspInit+0x164>)
 80008a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <HAL_UART_MspInit+0x164>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2025      	movs	r0, #37	; 0x25
 80008b4:	f000 f9ef 	bl	8000c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f000 fa08 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40011000 	.word	0x40011000
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	20000070 	.word	0x20000070
 80008d8:	400264b8 	.word	0x400264b8
 80008dc:	200000d0 	.word	0x200000d0
 80008e0:	40026440 	.word	0x40026440

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f8b6 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <USART1_IRQHandler+0x10>)
 800093e:	f001 fcd7 	bl	80022f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000028 	.word	0x20000028

0800094c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <DMA2_Stream2_IRQHandler+0x10>)
 8000952:	f000 fb6f 	bl	8001034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000d0 	.word	0x200000d0

08000960 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <DMA2_Stream7_IRQHandler+0x10>)
 8000966:	f000 fb65 	bl	8001034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000070 	.word	0x20000070

08000974 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009ac:	f7ff ffea 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f002 fd87 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009da:	f7ff fd91 	bl	8000500 <main>
  bx  lr    
 80009de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ec:	08003578 	.word	0x08003578
  ldr r2, =_sbss
 80009f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009f4:	20000138 	.word	0x20000138

080009f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <HAL_Init+0x40>)
 8000a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_Init+0x40>)
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x40>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f92b 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff fe74 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023c00 	.word	0x40023c00

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f943 	bl	8000cea <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f000 f90b 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000134 	.word	0x20000134

08000ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000134 	.word	0x20000134

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <__NVIC_EnableIRQ+0x38>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff29 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff3e 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff31 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffa2 	bl	8000c3c <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff feda 	bl	8000ac8 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e099      	b.n	8000e54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2202      	movs	r2, #2
 8000d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d40:	e00f      	b.n	8000d62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d42:	f7ff fec1 	bl	8000ac8 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b05      	cmp	r3, #5
 8000d4e:	d908      	bls.n	8000d62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2220      	movs	r2, #32
 8000d54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e078      	b.n	8000e54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e8      	bne.n	8000d42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_DMA_Init+0x158>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d107      	bne.n	8000dcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f023 0307 	bic.w	r3, r3, #7
 8000de2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d117      	bne.n	8000e26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00e      	beq.n	8000e26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fb01 	bl	8001410 <DMA_CheckFifoParam>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e22:	2301      	movs	r3, #1
 8000e24:	e016      	b.n	8000e54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fab8 	bl	80013a4 <DMA_CalcBaseAndBitshift>
 8000e34:	4603      	mov	r3, r0
 8000e36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e3c:	223f      	movs	r2, #63	; 0x3f
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	f010803f 	.word	0xf010803f

08000e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_DMA_Start_IT+0x26>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e040      	b.n	8000f08 <HAL_DMA_Start_IT+0xa8>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d12f      	bne.n	8000efa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f000 fa4a 	bl	8001348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb8:	223f      	movs	r2, #63	; 0x3f
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0216 	orr.w	r2, r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0208 	orr.w	r2, r2, #8
 8000ee6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e005      	b.n	8000f06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f02:	2302      	movs	r3, #2
 8000f04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f1e:	f7ff fdd3 	bl	8000ac8 <HAL_GetTick>
 8000f22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d008      	beq.n	8000f42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e052      	b.n	8000fe8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0216 	bic.w	r2, r2, #22
 8000f50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	695a      	ldr	r2, [r3, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d103      	bne.n	8000f72 <HAL_DMA_Abort+0x62>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0208 	bic.w	r2, r2, #8
 8000f80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0201 	bic.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f92:	e013      	b.n	8000fbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f94:	f7ff fd98 	bl	8000ac8 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d90c      	bls.n	8000fbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2203      	movs	r2, #3
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e015      	b.n	8000fe8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e4      	bne.n	8000f94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fce:	223f      	movs	r2, #63	; 0x3f
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d004      	beq.n	800100e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00c      	b.n	8001028 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2205      	movs	r2, #5
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001040:	4b8e      	ldr	r3, [pc, #568]	; (800127c <HAL_DMA_IRQHandler+0x248>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a8e      	ldr	r2, [pc, #568]	; (8001280 <HAL_DMA_IRQHandler+0x24c>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	0a9b      	lsrs	r3, r3, #10
 800104c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105e:	2208      	movs	r2, #8
 8001060:	409a      	lsls	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01a      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0204 	bic.w	r2, r2, #4
 8001086:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108c:	2208      	movs	r2, #8
 800108e:	409a      	lsls	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a4:	2201      	movs	r2, #1
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d012      	beq.n	80010d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c2:	2201      	movs	r2, #1
 80010c4:	409a      	lsls	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010da:	2204      	movs	r2, #4
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d012      	beq.n	800110c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	2204      	movs	r2, #4
 80010fa:	409a      	lsls	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001104:	f043 0204 	orr.w	r2, r3, #4
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001110:	2210      	movs	r2, #16
 8001112:	409a      	lsls	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d043      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d03c      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112e:	2210      	movs	r2, #16
 8001130:	409a      	lsls	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d018      	beq.n	8001176 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d108      	bne.n	8001164 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
 8001162:	e01f      	b.n	80011a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001168:	2b00      	cmp	r3, #0
 800116a:	d01b      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	4798      	blx	r3
 8001174:	e016      	b.n	80011a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d107      	bne.n	8001194 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0208 	bic.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a8:	2220      	movs	r2, #32
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 808f 	beq.w	80012d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 8087 	beq.w	80012d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ca:	2220      	movs	r2, #32
 80011cc:	409a      	lsls	r2, r3
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d136      	bne.n	800124c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0216 	bic.w	r2, r2, #22
 80011ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <HAL_DMA_IRQHandler+0x1da>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0208 	bic.w	r2, r2, #8
 800121c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001222:	223f      	movs	r2, #63	; 0x3f
 8001224:	409a      	lsls	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123e:	2b00      	cmp	r3, #0
 8001240:	d07e      	beq.n	8001340 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4798      	blx	r3
        }
        return;
 800124a:	e079      	b.n	8001340 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d01d      	beq.n	8001296 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10d      	bne.n	8001284 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	2b00      	cmp	r3, #0
 800126e:	d031      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	4798      	blx	r3
 8001278:	e02c      	b.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000
 8001280:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001288:	2b00      	cmp	r3, #0
 800128a:	d023      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	4798      	blx	r3
 8001294:	e01e      	b.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10f      	bne.n	80012c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0210 	bic.w	r2, r2, #16
 80012b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d032      	beq.n	8001342 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d022      	beq.n	800132e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2205      	movs	r2, #5
 80012ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3301      	adds	r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	d307      	bcc.n	800131c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f2      	bne.n	8001300 <HAL_DMA_IRQHandler+0x2cc>
 800131a:	e000      	b.n	800131e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800131c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4798      	blx	r3
 800133e:	e000      	b.n	8001342 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001340:	bf00      	nop
    }
  }
}
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b40      	cmp	r3, #64	; 0x40
 8001374:	d108      	bne.n	8001388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001386:	e007      	b.n	8001398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	60da      	str	r2, [r3, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3b10      	subs	r3, #16
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <DMA_CalcBaseAndBitshift+0x64>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013be:	4a13      	ldr	r2, [pc, #76]	; (800140c <DMA_CalcBaseAndBitshift+0x68>)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d909      	bls.n	80013e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013da:	f023 0303 	bic.w	r3, r3, #3
 80013de:	1d1a      	adds	r2, r3, #4
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	659a      	str	r2, [r3, #88]	; 0x58
 80013e4:	e007      	b.n	80013f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ee:	f023 0303 	bic.w	r3, r3, #3
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	aaaaaaab 	.word	0xaaaaaaab
 800140c:	08003560 	.word	0x08003560

08001410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d11f      	bne.n	800146a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d856      	bhi.n	80014de <DMA_CheckFifoParam+0xce>
 8001430:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <DMA_CheckFifoParam+0x28>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	08001449 	.word	0x08001449
 800143c:	0800145b 	.word	0x0800145b
 8001440:	08001449 	.word	0x08001449
 8001444:	080014df 	.word	0x080014df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d046      	beq.n	80014e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001458:	e043      	b.n	80014e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001462:	d140      	bne.n	80014e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001468:	e03d      	b.n	80014e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001472:	d121      	bne.n	80014b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d837      	bhi.n	80014ea <DMA_CheckFifoParam+0xda>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <DMA_CheckFifoParam+0x70>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	08001491 	.word	0x08001491
 8001484:	08001497 	.word	0x08001497
 8001488:	08001491 	.word	0x08001491
 800148c:	080014a9 	.word	0x080014a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
      break;
 8001494:	e030      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d025      	beq.n	80014ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014a6:	e022      	b.n	80014ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014b0:	d11f      	bne.n	80014f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014b6:	e01c      	b.n	80014f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d903      	bls.n	80014c6 <DMA_CheckFifoParam+0xb6>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d003      	beq.n	80014cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014c4:	e018      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
      break;
 80014ca:	e015      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00e      	beq.n	80014f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
      break;
 80014dc:	e00b      	b.n	80014f6 <DMA_CheckFifoParam+0xe6>
      break;
 80014de:	bf00      	nop
 80014e0:	e00a      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014e2:	bf00      	nop
 80014e4:	e008      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014e6:	bf00      	nop
 80014e8:	e006      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014ea:	bf00      	nop
 80014ec:	e004      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014ee:	bf00      	nop
 80014f0:	e002      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80014f2:	bf00      	nop
 80014f4:	e000      	b.n	80014f8 <DMA_CheckFifoParam+0xe8>
      break;
 80014f6:	bf00      	nop
    }
  } 
  
  return status; 
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	e16b      	b.n	80017fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	429a      	cmp	r2, r3
 800153e:	f040 815a 	bne.w	80017f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d005      	beq.n	800155a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001556:	2b02      	cmp	r3, #2
 8001558:	d130      	bne.n	80015bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 0201 	and.w	r2, r3, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d017      	beq.n	80015f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d123      	bne.n	800164c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	08da      	lsrs	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3208      	adds	r2, #8
 8001646:	69b9      	ldr	r1, [r7, #24]
 8001648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0203 	and.w	r2, r3, #3
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80b4 	beq.w	80017f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b60      	ldr	r3, [pc, #384]	; (8001814 <HAL_GPIO_Init+0x30c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a5f      	ldr	r2, [pc, #380]	; (8001814 <HAL_GPIO_Init+0x30c>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_GPIO_Init+0x30c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016aa:	4a5b      	ldr	r2, [pc, #364]	; (8001818 <HAL_GPIO_Init+0x310>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <HAL_GPIO_Init+0x314>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d02b      	beq.n	800172e <HAL_GPIO_Init+0x226>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a51      	ldr	r2, [pc, #324]	; (8001820 <HAL_GPIO_Init+0x318>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d025      	beq.n	800172a <HAL_GPIO_Init+0x222>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a50      	ldr	r2, [pc, #320]	; (8001824 <HAL_GPIO_Init+0x31c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d01f      	beq.n	8001726 <HAL_GPIO_Init+0x21e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4f      	ldr	r2, [pc, #316]	; (8001828 <HAL_GPIO_Init+0x320>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d019      	beq.n	8001722 <HAL_GPIO_Init+0x21a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4e      	ldr	r2, [pc, #312]	; (800182c <HAL_GPIO_Init+0x324>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0x216>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4d      	ldr	r2, [pc, #308]	; (8001830 <HAL_GPIO_Init+0x328>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d00d      	beq.n	800171a <HAL_GPIO_Init+0x212>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4c      	ldr	r2, [pc, #304]	; (8001834 <HAL_GPIO_Init+0x32c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d007      	beq.n	8001716 <HAL_GPIO_Init+0x20e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4b      	ldr	r2, [pc, #300]	; (8001838 <HAL_GPIO_Init+0x330>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d101      	bne.n	8001712 <HAL_GPIO_Init+0x20a>
 800170e:	2307      	movs	r3, #7
 8001710:	e00e      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001712:	2308      	movs	r3, #8
 8001714:	e00c      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001716:	2306      	movs	r3, #6
 8001718:	e00a      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800171a:	2305      	movs	r3, #5
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800171e:	2304      	movs	r3, #4
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	; (8001818 <HAL_GPIO_Init+0x310>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_GPIO_Init+0x334>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a32      	ldr	r2, [pc, #200]	; (800183c <HAL_GPIO_Init+0x334>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_GPIO_Init+0x334>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a27      	ldr	r2, [pc, #156]	; (800183c <HAL_GPIO_Init+0x334>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <HAL_GPIO_Init+0x334>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <HAL_GPIO_Init+0x334>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_GPIO_Init+0x334>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <HAL_GPIO_Init+0x334>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f ae90 	bls.w	8001524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40021400 	.word	0x40021400
 8001834:	40021800 	.word	0x40021800
 8001838:	40021c00 	.word	0x40021c00
 800183c:	40013c00 	.word	0x40013c00

08001840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
 800184c:	4613      	mov	r3, r2
 800184e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001850:	787b      	ldrb	r3, [r7, #1]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800185c:	e003      	b.n	8001866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	041a      	lsls	r2, r3, #16
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	619a      	str	r2, [r3, #24]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e267      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d075      	beq.n	800197e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001892:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b04      	cmp	r3, #4
 800189c:	d00c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189e:	4b85      	ldr	r3, [pc, #532]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d112      	bne.n	80018d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018aa:	4b82      	ldr	r3, [pc, #520]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018b6:	d10b      	bne.n	80018d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	4b7e      	ldr	r3, [pc, #504]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d05b      	beq.n	800197c <HAL_RCC_OscConfig+0x108>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d157      	bne.n	800197c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e242      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d106      	bne.n	80018e8 <HAL_RCC_OscConfig+0x74>
 80018da:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a75      	ldr	r2, [pc, #468]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e01d      	b.n	8001924 <HAL_RCC_OscConfig+0xb0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x98>
 80018f2:	4b70      	ldr	r3, [pc, #448]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6f      	ldr	r2, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6c      	ldr	r2, [pc, #432]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e00b      	b.n	8001924 <HAL_RCC_OscConfig+0xb0>
 800190c:	4b69      	ldr	r3, [pc, #420]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a68      	ldr	r2, [pc, #416]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a65      	ldr	r2, [pc, #404]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d013      	beq.n	8001954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff f8cc 	bl	8000ac8 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff f8c8 	bl	8000ac8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e207      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0xc0>
 8001952:	e014      	b.n	800197e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff f8b8 	bl	8000ac8 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff f8b4 	bl	8000ac8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1f3      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	4b51      	ldr	r3, [pc, #324]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0xe8>
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d063      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800198a:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001996:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d11c      	bne.n	80019dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a2:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d116      	bne.n	80019dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_RCC_OscConfig+0x152>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e1c7      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c6:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4937      	ldr	r1, [pc, #220]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	e03a      	b.n	8001a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e4:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <HAL_RCC_OscConfig+0x244>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ea:	f7ff f86d 	bl	8000ac8 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff f869 	bl	8000ac8 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e1a8      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4925      	ldr	r1, [pc, #148]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_RCC_OscConfig+0x244>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f84c 	bl	8000ac8 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a34:	f7ff f848 	bl	8000ac8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e187      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d036      	beq.n	8001acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d016      	beq.n	8001a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_RCC_OscConfig+0x248>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f82c 	bl	8000ac8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff f828 	bl	8000ac8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e167      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x240>)
 8001a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x200>
 8001a92:	e01b      	b.n	8001acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_OscConfig+0x248>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f815 	bl	8000ac8 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	e00e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f811 	bl	8000ac8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d907      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e150      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	42470000 	.word	0x42470000
 8001abc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	4b88      	ldr	r3, [pc, #544]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ea      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 8097 	beq.w	8001c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10f      	bne.n	8001b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b7d      	ldr	r3, [pc, #500]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a7c      	ldr	r2, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b7a      	ldr	r3, [pc, #488]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0a:	4b77      	ldr	r3, [pc, #476]	; (8001ce8 <HAL_RCC_OscConfig+0x474>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d118      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b16:	4b74      	ldr	r3, [pc, #464]	; (8001ce8 <HAL_RCC_OscConfig+0x474>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a73      	ldr	r2, [pc, #460]	; (8001ce8 <HAL_RCC_OscConfig+0x474>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b22:	f7fe ffd1 	bl	8000ac8 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2a:	f7fe ffcd 	bl	8000ac8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e10c      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_OscConfig+0x474>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x2ea>
 8001b50:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a63      	ldr	r2, [pc, #396]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x324>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x30c>
 8001b66:	4b5f      	ldr	r3, [pc, #380]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a5e      	ldr	r2, [pc, #376]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	4b5c      	ldr	r3, [pc, #368]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a5b      	ldr	r2, [pc, #364]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0x324>
 8001b80:	4b58      	ldr	r3, [pc, #352]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a57      	ldr	r2, [pc, #348]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	4a54      	ldr	r2, [pc, #336]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001b92:	f023 0304 	bic.w	r3, r3, #4
 8001b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d015      	beq.n	8001bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba0:	f7fe ff92 	bl	8000ac8 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7fe ff8e 	bl	8000ac8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0cb      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbe:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0ee      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x334>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bcc:	f7fe ff7c 	bl	8000ac8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7fe ff78 	bl	8000ac8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0b5      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bea:	4b3e      	ldr	r3, [pc, #248]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ee      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	4a38      	ldr	r2, [pc, #224]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a1 	beq.w	8001d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c12:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d05c      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d141      	bne.n	8001caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCC_OscConfig+0x478>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7fe ff4c 	bl	8000ac8 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7fe ff48 	bl	8000ac8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e087      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69da      	ldr	r2, [r3, #28]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	061b      	lsls	r3, r3, #24
 8001c76:	491b      	ldr	r1, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_RCC_OscConfig+0x478>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7fe ff21 	bl	8000ac8 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7fe ff1d 	bl	8000ac8 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e05c      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x416>
 8001ca8:	e054      	b.n	8001d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_OscConfig+0x478>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe ff0a 	bl	8000ac8 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe ff06 	bl	8000ac8 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e045      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x444>
 8001cd6:	e03d      	b.n	8001d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e038      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x4ec>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d028      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d121      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d11a      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d20:	4013      	ands	r3, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d111      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800

08001d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0cc      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_RCC_ClockConfig+0x1b8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d90c      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b65      	ldr	r3, [pc, #404]	; (8001f1c <HAL_RCC_ClockConfig+0x1b8>)
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0b8      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	494d      	ldr	r1, [pc, #308]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d044      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d119      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e07f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e06f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e067      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e42:	4b37      	ldr	r3, [pc, #220]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f023 0203 	bic.w	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4934      	ldr	r1, [pc, #208]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e54:	f7fe fe38 	bl	8000ac8 <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7fe fe34 	bl	8000ac8 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e04f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 020c 	and.w	r2, r3, #12
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1eb      	bne.n	8001e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_RCC_ClockConfig+0x1b8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d20c      	bcs.n	8001eac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_RCC_ClockConfig+0x1b8>)
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e032      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eea:	f000 f821 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	490a      	ldr	r1, [pc, #40]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	5ccb      	ldrb	r3, [r1, r3]
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1c8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fd98 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00
 8001f20:	40023800 	.word	0x40023800
 8001f24:	08003548 	.word	0x08003548
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f34:	b090      	sub	sp, #64	; 0x40
 8001f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f48:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d00d      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x40>
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	f200 80a1 	bhi.w	800209c <HAL_RCC_GetSysClockFreq+0x16c>
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x34>
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d003      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f62:	e09b      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f68:	e09b      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f6e:	e098      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f70:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f7a:	4b4d      	ldr	r3, [pc, #308]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d028      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	099b      	lsrs	r3, r3, #6
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	627a      	str	r2, [r7, #36]	; 0x24
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f9c:	fb03 f201 	mul.w	r2, r3, r1
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	fb00 f303 	mul.w	r3, r0, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a43      	ldr	r2, [pc, #268]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001faa:	fba0 1202 	umull	r1, r2, r0, r2
 8001fae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb6:	4413      	add	r3, r2
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	61fa      	str	r2, [r7, #28]
 8001fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fca:	f7fe f8fd 	bl	80001c8 <__aeabi_uldivmod>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd6:	e053      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd8:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	099b      	lsrs	r3, r3, #6
 8001fde:	2200      	movs	r2, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	617a      	str	r2, [r7, #20]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fea:	f04f 0b00 	mov.w	fp, #0
 8001fee:	4652      	mov	r2, sl
 8001ff0:	465b      	mov	r3, fp
 8001ff2:	f04f 0000 	mov.w	r0, #0
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	0159      	lsls	r1, r3, #5
 8001ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002000:	0150      	lsls	r0, r2, #5
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	ebb2 080a 	subs.w	r8, r2, sl
 800200a:	eb63 090b 	sbc.w	r9, r3, fp
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800201a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800201e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002022:	ebb2 0408 	subs.w	r4, r2, r8
 8002026:	eb63 0509 	sbc.w	r5, r3, r9
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	00eb      	lsls	r3, r5, #3
 8002034:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002038:	00e2      	lsls	r2, r4, #3
 800203a:	4614      	mov	r4, r2
 800203c:	461d      	mov	r5, r3
 800203e:	eb14 030a 	adds.w	r3, r4, sl
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	eb45 030b 	adc.w	r3, r5, fp
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002056:	4629      	mov	r1, r5
 8002058:	028b      	lsls	r3, r1, #10
 800205a:	4621      	mov	r1, r4
 800205c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002060:	4621      	mov	r1, r4
 8002062:	028a      	lsls	r2, r1, #10
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	2200      	movs	r2, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	60fa      	str	r2, [r7, #12]
 8002070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002074:	f7fe f8a8 	bl	80001c8 <__aeabi_uldivmod>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4613      	mov	r3, r2
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	3301      	adds	r3, #1
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002090:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800209a:	e002      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3740      	adds	r7, #64	; 0x40
 80020a8:	46bd      	mov	sp, r7
 80020aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	00f42400 	.word	0x00f42400
 80020b8:	017d7840 	.word	0x017d7840

080020bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000000 	.word	0x20000000

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d8:	f7ff fff0 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	0a9b      	lsrs	r3, r3, #10
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	4903      	ldr	r1, [pc, #12]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	08003558 	.word	0x08003558

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002100:	f7ff ffdc 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0b5b      	lsrs	r3, r3, #13
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4903      	ldr	r1, [pc, #12]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	08003558 	.word	0x08003558

08002124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e042      	b.n	80021bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fb14 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2224      	movs	r2, #36	; 0x24
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 ff41 	bl	8002ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800217c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800218c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800219c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d156      	bne.n	800228c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_UART_Transmit_DMA+0x26>
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e04f      	b.n	800228e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2221      	movs	r2, #33	; 0x21
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	4a21      	ldr	r2, [pc, #132]	; (8002298 <HAL_UART_Transmit_DMA+0xd4>)
 8002214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221a:	4a20      	ldr	r2, [pc, #128]	; (800229c <HAL_UART_Transmit_DMA+0xd8>)
 800221c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_UART_Transmit_DMA+0xdc>)
 8002224:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	2200      	movs	r2, #0
 800222c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3304      	adds	r3, #4
 8002242:	461a      	mov	r2, r3
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	f7fe fe0b 	bl	8000e60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002252:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3314      	adds	r3, #20
 800225a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	e853 3f00 	ldrex	r3, [r3]
 8002262:	617b      	str	r3, [r7, #20]
   return(result);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3314      	adds	r3, #20
 8002272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002274:	627a      	str	r2, [r7, #36]	; 0x24
 8002276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002278:	6a39      	ldr	r1, [r7, #32]
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	e841 2300 	strex	r3, r2, [r1]
 8002280:	61fb      	str	r3, [r7, #28]
   return(result);
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e5      	bne.n	8002254 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3730      	adds	r7, #48	; 0x30
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	0800287d 	.word	0x0800287d
 800229c:	08002917 	.word	0x08002917
 80022a0:	08002a9b 	.word	0x08002a9b

080022a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d112      	bne.n	80022e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_UART_Receive_DMA+0x26>
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00b      	b.n	80022e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fc28 	bl	8002b30 <UART_Start_Receive_DMA>
 80022e0:	4603      	mov	r3, r0
 80022e2:	e000      	b.n	80022e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
  }
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0ba      	sub	sp, #232	; 0xe8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800232e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_UART_IRQHandler+0x66>
 8002342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fd8f 	bl	8002e72 <UART_Receive_IT>
      return;
 8002354:	e25b      	b.n	800280e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80de 	beq.w	800251c <HAL_UART_IRQHandler+0x22c>
 8002360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d106      	bne.n	800237a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800236c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002370:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80d1 	beq.w	800251c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800237a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_UART_IRQHandler+0xae>
 8002386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800239e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_UART_IRQHandler+0xd2>
 80023aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_UART_IRQHandler+0xf6>
 80023ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f043 0204 	orr.w	r2, r3, #4
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d011      	beq.n	8002416 <HAL_UART_IRQHandler+0x126>
 80023f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f043 0208 	orr.w	r2, r3, #8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 81f2 	beq.w	8002804 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_UART_IRQHandler+0x14e>
 800242c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fd1a 	bl	8002e72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_UART_IRQHandler+0x17a>
 8002462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d04f      	beq.n	800250a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fc22 	bl	8002cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b40      	cmp	r3, #64	; 0x40
 800247c:	d141      	bne.n	8002502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3314      	adds	r3, #20
 8002484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800249c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024ba:	e841 2300 	strex	r3, r2, [r1]
 80024be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1d9      	bne.n	800247e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d013      	beq.n	80024fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	4a7e      	ldr	r2, [pc, #504]	; (80026d0 <HAL_UART_IRQHandler+0x3e0>)
 80024d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fd86 	bl	8000ff0 <HAL_DMA_Abort_IT>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024f4:	4610      	mov	r0, r2
 80024f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f8:	e00e      	b.n	8002518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f9a8 	bl	8002850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002500:	e00a      	b.n	8002518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f9a4 	bl	8002850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002508:	e006      	b.n	8002518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f9a0 	bl	8002850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002516:	e175      	b.n	8002804 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002518:	bf00      	nop
    return;
 800251a:	e173      	b.n	8002804 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	2b01      	cmp	r3, #1
 8002522:	f040 814f 	bne.w	80027c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8148 	beq.w	80027c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8141 	beq.w	80027c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b40      	cmp	r3, #64	; 0x40
 8002564:	f040 80b6 	bne.w	80026d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8145 	beq.w	8002808 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002586:	429a      	cmp	r2, r3
 8002588:	f080 813e 	bcs.w	8002808 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002592:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259e:	f000 8088 	beq.w	80026b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	330c      	adds	r3, #12
 80025a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025b0:	e853 3f00 	ldrex	r3, [r3]
 80025b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	330c      	adds	r3, #12
 80025ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025de:	e841 2300 	strex	r3, r2, [r1]
 80025e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1d9      	bne.n	80025a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3314      	adds	r3, #20
 80025f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f8:	e853 3f00 	ldrex	r3, [r3]
 80025fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3314      	adds	r3, #20
 800260e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002612:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002616:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800261a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e1      	bne.n	80025ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800263a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800263c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3314      	adds	r3, #20
 800264a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800264e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002650:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002656:	e841 2300 	strex	r3, r2, [r1]
 800265a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800265c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1e3      	bne.n	800262a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267a:	e853 3f00 	ldrex	r3, [r3]
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002682:	f023 0310 	bic.w	r3, r3, #16
 8002686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002694:	65ba      	str	r2, [r7, #88]	; 0x58
 8002696:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800269a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800269c:	e841 2300 	strex	r3, r2, [r1]
 80026a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e3      	bne.n	8002670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fc2f 	bl	8000f10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f8cb 	bl	8002864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026ce:	e09b      	b.n	8002808 <HAL_UART_IRQHandler+0x518>
 80026d0:	08002d7b 	.word	0x08002d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026dc:	b29b      	uxth	r3, r3
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 808e 	beq.w	800280c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80026f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8089 	beq.w	800280c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002704:	e853 3f00 	ldrex	r3, [r3]
 8002708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800271e:	647a      	str	r2, [r7, #68]	; 0x44
 8002720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800272c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e3      	bne.n	80026fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3314      	adds	r3, #20
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	623b      	str	r3, [r7, #32]
   return(result);
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3314      	adds	r3, #20
 8002752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002756:	633a      	str	r2, [r7, #48]	; 0x30
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800275c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1e3      	bne.n	8002732 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	60fb      	str	r3, [r7, #12]
   return(result);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0310 	bic.w	r3, r3, #16
 800278e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800279c:	61fa      	str	r2, [r7, #28]
 800279e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	69b9      	ldr	r1, [r7, #24]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	617b      	str	r3, [r7, #20]
   return(result);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e3      	bne.n	8002778 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f851 	bl	8002864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027c2:	e023      	b.n	800280c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <HAL_UART_IRQHandler+0x4f4>
 80027d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fae0 	bl	8002da2 <UART_Transmit_IT>
    return;
 80027e2:	e014      	b.n	800280e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_UART_IRQHandler+0x51e>
 80027f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb20 	bl	8002e42 <UART_EndTransmit_IT>
    return;
 8002802:	e004      	b.n	800280e <HAL_UART_IRQHandler+0x51e>
    return;
 8002804:	bf00      	nop
 8002806:	e002      	b.n	800280e <HAL_UART_IRQHandler+0x51e>
      return;
 8002808:	bf00      	nop
 800280a:	e000      	b.n	800280e <HAL_UART_IRQHandler+0x51e>
      return;
 800280c:	bf00      	nop
  }
}
 800280e:	37e8      	adds	r7, #232	; 0xe8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b090      	sub	sp, #64	; 0x40
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d137      	bne.n	8002908 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289a:	2200      	movs	r2, #0
 800289c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800289e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3314      	adds	r3, #20
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	623b      	str	r3, [r7, #32]
   return(result);
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3314      	adds	r3, #20
 80028bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028be:	633a      	str	r2, [r7, #48]	; 0x30
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e5      	bne.n	800289e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f2:	61fa      	str	r2, [r7, #28]
 80028f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	617b      	str	r3, [r7, #20]
   return(result);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e5      	bne.n	80028d2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002906:	e002      	b.n	800290e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002908:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800290a:	f7ff ff83 	bl	8002814 <HAL_UART_TxCpltCallback>
}
 800290e:	bf00      	nop
 8002910:	3740      	adds	r7, #64	; 0x40
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff ff7f 	bl	8002828 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b09c      	sub	sp, #112	; 0x70
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d172      	bne.n	8002a34 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800294e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002950:	2200      	movs	r2, #0
 8002952:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	330c      	adds	r3, #12
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295e:	e853 3f00 	ldrex	r3, [r3]
 8002962:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800296a:	66bb      	str	r3, [r7, #104]	; 0x68
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002974:	65ba      	str	r2, [r7, #88]	; 0x58
 8002976:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800297a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e5      	bne.n	8002954 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3314      	adds	r3, #20
 800298e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	667b      	str	r3, [r7, #100]	; 0x64
 80029a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3314      	adds	r3, #20
 80029a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80029a8:	647a      	str	r2, [r7, #68]	; 0x44
 80029aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b0:	e841 2300 	strex	r3, r2, [r1]
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e5      	bne.n	8002988 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3314      	adds	r3, #20
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	623b      	str	r3, [r7, #32]
   return(result);
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d2:	663b      	str	r3, [r7, #96]	; 0x60
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3314      	adds	r3, #20
 80029da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029dc:	633a      	str	r2, [r7, #48]	; 0x30
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e5      	bne.n	80029bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d119      	bne.n	8002a34 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	e853 3f00 	ldrex	r3, [r3]
 8002a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0310 	bic.w	r3, r3, #16
 8002a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a20:	61fa      	str	r2, [r7, #28]
 8002a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	69b9      	ldr	r1, [r7, #24]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e5      	bne.n	8002a00 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	2200      	movs	r2, #0
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d106      	bne.n	8002a50 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a46:	4619      	mov	r1, r3
 8002a48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a4a:	f7ff ff0b 	bl	8002864 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a4e:	e002      	b.n	8002a56 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002a50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a52:	f7fd fd37 	bl	80004c4 <HAL_UART_RxCpltCallback>
}
 8002a56:	bf00      	nop
 8002a58:	3770      	adds	r7, #112	; 0x70
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d108      	bne.n	8002a8c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f7ff feed 	bl	8002864 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a8a:	e002      	b.n	8002a92 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff fed5 	bl	800283c <HAL_UART_RxHalfCpltCallback>
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b21      	cmp	r3, #33	; 0x21
 8002acc:	d108      	bne.n	8002ae0 <UART_DMAError+0x46>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ada:	68b8      	ldr	r0, [r7, #8]
 8002adc:	f000 f8c2 	bl	8002c64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b22      	cmp	r3, #34	; 0x22
 8002b00:	d108      	bne.n	8002b14 <UART_DMAError+0x7a>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002b0e:	68b8      	ldr	r0, [r7, #8]
 8002b10:	f000 f8d0 	bl	8002cb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	f043 0210 	orr.w	r2, r3, #16
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b20:	68b8      	ldr	r0, [r7, #8]
 8002b22:	f7ff fe95 	bl	8002850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b098      	sub	sp, #96	; 0x60
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	88fa      	ldrh	r2, [r7, #6]
 8002b48:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2222      	movs	r2, #34	; 0x22
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	4a3e      	ldr	r2, [pc, #248]	; (8002c58 <UART_Start_Receive_DMA+0x128>)
 8002b5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	4a3d      	ldr	r2, [pc, #244]	; (8002c5c <UART_Start_Receive_DMA+0x12c>)
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	4a3c      	ldr	r2, [pc, #240]	; (8002c60 <UART_Start_Receive_DMA+0x130>)
 8002b6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	2200      	movs	r2, #0
 8002b76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3304      	adds	r3, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	f7fe f966 	bl	8000e60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d019      	beq.n	8002be6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e5      	bne.n	8002bb2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3314      	adds	r3, #20
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3314      	adds	r3, #20
 8002c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c06:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e5      	bne.n	8002be6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3314      	adds	r3, #20
 8002c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	617b      	str	r3, [r7, #20]
   return(result);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c30:	653b      	str	r3, [r7, #80]	; 0x50
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3314      	adds	r3, #20
 8002c38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c3a:	627a      	str	r2, [r7, #36]	; 0x24
 8002c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	6a39      	ldr	r1, [r7, #32]
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1e5      	bne.n	8002c1a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3760      	adds	r7, #96	; 0x60
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	08002933 	.word	0x08002933
 8002c5c:	08002a5f 	.word	0x08002a5f
 8002c60:	08002a9b 	.word	0x08002a9b

08002c64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	61ba      	str	r2, [r7, #24]
 8002c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6979      	ldr	r1, [r7, #20]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	613b      	str	r3, [r7, #16]
   return(result);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002ca8:	bf00      	nop
 8002caa:	3724      	adds	r7, #36	; 0x24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b095      	sub	sp, #84	; 0x54
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc6:	e853 3f00 	ldrex	r3, [r3]
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cdc:	643a      	str	r2, [r7, #64]	; 0x40
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ce4:	e841 2300 	strex	r3, r2, [r1]
 8002ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e5      	bne.n	8002cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3314      	adds	r3, #20
 8002cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	e853 3f00 	ldrex	r3, [r3]
 8002cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3314      	adds	r3, #20
 8002d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e5      	bne.n	8002cf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d119      	bne.n	8002d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	330c      	adds	r3, #12
 8002d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f023 0310 	bic.w	r3, r3, #16
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d4c:	61ba      	str	r2, [r7, #24]
 8002d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	6979      	ldr	r1, [r7, #20]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	613b      	str	r3, [r7, #16]
   return(result);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e5      	bne.n	8002d2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d6e:	bf00      	nop
 8002d70:	3754      	adds	r7, #84	; 0x54
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fd5b 	bl	8002850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b21      	cmp	r3, #33	; 0x21
 8002db4:	d13e      	bne.n	8002e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbe:	d114      	bne.n	8002dea <UART_Transmit_IT+0x48>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d110      	bne.n	8002dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	1c9a      	adds	r2, r3, #2
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	621a      	str	r2, [r3, #32]
 8002de8:	e008      	b.n	8002dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	1c59      	adds	r1, r3, #1
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6211      	str	r1, [r2, #32]
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fcd6 	bl	8002814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b08c      	sub	sp, #48	; 0x30
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b22      	cmp	r3, #34	; 0x22
 8002e84:	f040 80ae 	bne.w	8002fe4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d117      	bne.n	8002ec2 <UART_Receive_IT+0x50>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d113      	bne.n	8002ec2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	1c9a      	adds	r2, r3, #2
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec0:	e026      	b.n	8002f10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d007      	beq.n	8002ee6 <UART_Receive_IT+0x74>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <UART_Receive_IT+0x82>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e008      	b.n	8002f06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d15d      	bne.n	8002fe0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0220 	bic.w	r2, r2, #32
 8002f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d135      	bne.n	8002fd6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	330c      	adds	r3, #12
 8002f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f023 0310 	bic.w	r3, r3, #16
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f90:	623a      	str	r2, [r7, #32]
 8002f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	69f9      	ldr	r1, [r7, #28]
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e5      	bne.n	8002f70 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d10a      	bne.n	8002fc8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff fc48 	bl	8002864 <HAL_UARTEx_RxEventCallback>
 8002fd4:	e002      	b.n	8002fdc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd fa74 	bl	80004c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e002      	b.n	8002fe6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3730      	adds	r7, #48	; 0x30
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b0c0      	sub	sp, #256	; 0x100
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	68d9      	ldr	r1, [r3, #12]
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	ea40 0301 	orr.w	r3, r0, r1
 8003018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	431a      	orrs	r2, r3
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	431a      	orrs	r2, r3
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003048:	f021 010c 	bic.w	r1, r1, #12
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003056:	430b      	orrs	r3, r1
 8003058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	6999      	ldr	r1, [r3, #24]
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	ea40 0301 	orr.w	r3, r0, r1
 8003076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b8f      	ldr	r3, [pc, #572]	; (80032bc <UART_SetConfig+0x2cc>)
 8003080:	429a      	cmp	r2, r3
 8003082:	d005      	beq.n	8003090 <UART_SetConfig+0xa0>
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b8d      	ldr	r3, [pc, #564]	; (80032c0 <UART_SetConfig+0x2d0>)
 800308c:	429a      	cmp	r2, r3
 800308e:	d104      	bne.n	800309a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff f834 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8003094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003098:	e003      	b.n	80030a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800309a:	f7ff f81b 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 800309e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ac:	f040 810c 	bne.w	80032c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030c2:	4622      	mov	r2, r4
 80030c4:	462b      	mov	r3, r5
 80030c6:	1891      	adds	r1, r2, r2
 80030c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80030ca:	415b      	adcs	r3, r3
 80030cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030d2:	4621      	mov	r1, r4
 80030d4:	eb12 0801 	adds.w	r8, r2, r1
 80030d8:	4629      	mov	r1, r5
 80030da:	eb43 0901 	adc.w	r9, r3, r1
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f2:	4690      	mov	r8, r2
 80030f4:	4699      	mov	r9, r3
 80030f6:	4623      	mov	r3, r4
 80030f8:	eb18 0303 	adds.w	r3, r8, r3
 80030fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003100:	462b      	mov	r3, r5
 8003102:	eb49 0303 	adc.w	r3, r9, r3
 8003106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800311a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800311e:	460b      	mov	r3, r1
 8003120:	18db      	adds	r3, r3, r3
 8003122:	653b      	str	r3, [r7, #80]	; 0x50
 8003124:	4613      	mov	r3, r2
 8003126:	eb42 0303 	adc.w	r3, r2, r3
 800312a:	657b      	str	r3, [r7, #84]	; 0x54
 800312c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003134:	f7fd f848 	bl	80001c8 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <UART_SetConfig+0x2d4>)
 800313e:	fba3 2302 	umull	r2, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	011c      	lsls	r4, r3, #4
 8003146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	1891      	adds	r1, r2, r2
 800315e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003160:	415b      	adcs	r3, r3
 8003162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003168:	4641      	mov	r1, r8
 800316a:	eb12 0a01 	adds.w	sl, r2, r1
 800316e:	4649      	mov	r1, r9
 8003170:	eb43 0b01 	adc.w	fp, r3, r1
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003188:	4692      	mov	sl, r2
 800318a:	469b      	mov	fp, r3
 800318c:	4643      	mov	r3, r8
 800318e:	eb1a 0303 	adds.w	r3, sl, r3
 8003192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003196:	464b      	mov	r3, r9
 8003198:	eb4b 0303 	adc.w	r3, fp, r3
 800319c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031b4:	460b      	mov	r3, r1
 80031b6:	18db      	adds	r3, r3, r3
 80031b8:	643b      	str	r3, [r7, #64]	; 0x40
 80031ba:	4613      	mov	r3, r2
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	647b      	str	r3, [r7, #68]	; 0x44
 80031c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031ca:	f7fc fffd 	bl	80001c8 <__aeabi_uldivmod>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <UART_SetConfig+0x2d4>)
 80031d6:	fba3 2301 	umull	r2, r3, r3, r1
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2264      	movs	r2, #100	; 0x64
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	1acb      	subs	r3, r1, r3
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <UART_SetConfig+0x2d4>)
 80031ec:	fba3 2302 	umull	r2, r3, r3, r2
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031f8:	441c      	add	r4, r3
 80031fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	1891      	adds	r1, r2, r2
 8003212:	63b9      	str	r1, [r7, #56]	; 0x38
 8003214:	415b      	adcs	r3, r3
 8003216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800321c:	4641      	mov	r1, r8
 800321e:	1851      	adds	r1, r2, r1
 8003220:	6339      	str	r1, [r7, #48]	; 0x30
 8003222:	4649      	mov	r1, r9
 8003224:	414b      	adcs	r3, r1
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003234:	4659      	mov	r1, fp
 8003236:	00cb      	lsls	r3, r1, #3
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323e:	4651      	mov	r1, sl
 8003240:	00ca      	lsls	r2, r1, #3
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	4603      	mov	r3, r0
 8003248:	4642      	mov	r2, r8
 800324a:	189b      	adds	r3, r3, r2
 800324c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003250:	464b      	mov	r3, r9
 8003252:	460a      	mov	r2, r1
 8003254:	eb42 0303 	adc.w	r3, r2, r3
 8003258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800326c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003270:	460b      	mov	r3, r1
 8003272:	18db      	adds	r3, r3, r3
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
 8003276:	4613      	mov	r3, r2
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003286:	f7fc ff9f 	bl	80001c8 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <UART_SetConfig+0x2d4>)
 8003290:	fba3 1302 	umull	r1, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	2164      	movs	r1, #100	; 0x64
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	3332      	adds	r3, #50	; 0x32
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <UART_SetConfig+0x2d4>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	f003 0207 	and.w	r2, r3, #7
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4422      	add	r2, r4
 80032b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032b8:	e106      	b.n	80034c8 <UART_SetConfig+0x4d8>
 80032ba:	bf00      	nop
 80032bc:	40011000 	.word	0x40011000
 80032c0:	40011400 	.word	0x40011400
 80032c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032da:	4642      	mov	r2, r8
 80032dc:	464b      	mov	r3, r9
 80032de:	1891      	adds	r1, r2, r2
 80032e0:	6239      	str	r1, [r7, #32]
 80032e2:	415b      	adcs	r3, r3
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ea:	4641      	mov	r1, r8
 80032ec:	1854      	adds	r4, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb43 0501 	adc.w	r5, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003310:	464b      	mov	r3, r9
 8003312:	eb45 0303 	adc.w	r3, r5, r3
 8003316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003336:	4629      	mov	r1, r5
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	4621      	mov	r1, r4
 800333c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003340:	4621      	mov	r1, r4
 8003342:	008a      	lsls	r2, r1, #2
 8003344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003348:	f7fc ff3e 	bl	80001c8 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4b60      	ldr	r3, [pc, #384]	; (80034d4 <UART_SetConfig+0x4e4>)
 8003352:	fba3 2302 	umull	r2, r3, r3, r2
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	011c      	lsls	r4, r3, #4
 800335a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800335e:	2200      	movs	r2, #0
 8003360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800336c:	4642      	mov	r2, r8
 800336e:	464b      	mov	r3, r9
 8003370:	1891      	adds	r1, r2, r2
 8003372:	61b9      	str	r1, [r7, #24]
 8003374:	415b      	adcs	r3, r3
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337c:	4641      	mov	r1, r8
 800337e:	1851      	adds	r1, r2, r1
 8003380:	6139      	str	r1, [r7, #16]
 8003382:	4649      	mov	r1, r9
 8003384:	414b      	adcs	r3, r1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003394:	4659      	mov	r1, fp
 8003396:	00cb      	lsls	r3, r1, #3
 8003398:	4651      	mov	r1, sl
 800339a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339e:	4651      	mov	r1, sl
 80033a0:	00ca      	lsls	r2, r1, #3
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	4642      	mov	r2, r8
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033b0:	464b      	mov	r3, r9
 80033b2:	460a      	mov	r2, r1
 80033b4:	eb42 0303 	adc.w	r3, r2, r3
 80033b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80033c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033d4:	4649      	mov	r1, r9
 80033d6:	008b      	lsls	r3, r1, #2
 80033d8:	4641      	mov	r1, r8
 80033da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033de:	4641      	mov	r1, r8
 80033e0:	008a      	lsls	r2, r1, #2
 80033e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033e6:	f7fc feef 	bl	80001c8 <__aeabi_uldivmod>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <UART_SetConfig+0x4e4>)
 80033f2:	fba3 2301 	umull	r2, r3, r3, r1
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2264      	movs	r2, #100	; 0x64
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	1acb      	subs	r3, r1, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	3332      	adds	r3, #50	; 0x32
 8003404:	4a33      	ldr	r2, [pc, #204]	; (80034d4 <UART_SetConfig+0x4e4>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003410:	441c      	add	r4, r3
 8003412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003416:	2200      	movs	r2, #0
 8003418:	673b      	str	r3, [r7, #112]	; 0x70
 800341a:	677a      	str	r2, [r7, #116]	; 0x74
 800341c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003420:	4642      	mov	r2, r8
 8003422:	464b      	mov	r3, r9
 8003424:	1891      	adds	r1, r2, r2
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	415b      	adcs	r3, r3
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003430:	4641      	mov	r1, r8
 8003432:	1851      	adds	r1, r2, r1
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	4649      	mov	r1, r9
 8003438:	414b      	adcs	r3, r1
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003448:	4659      	mov	r1, fp
 800344a:	00cb      	lsls	r3, r1, #3
 800344c:	4651      	mov	r1, sl
 800344e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003452:	4651      	mov	r1, sl
 8003454:	00ca      	lsls	r2, r1, #3
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	4603      	mov	r3, r0
 800345c:	4642      	mov	r2, r8
 800345e:	189b      	adds	r3, r3, r2
 8003460:	66bb      	str	r3, [r7, #104]	; 0x68
 8003462:	464b      	mov	r3, r9
 8003464:	460a      	mov	r2, r1
 8003466:	eb42 0303 	adc.w	r3, r2, r3
 800346a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	663b      	str	r3, [r7, #96]	; 0x60
 8003476:	667a      	str	r2, [r7, #100]	; 0x64
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003484:	4649      	mov	r1, r9
 8003486:	008b      	lsls	r3, r1, #2
 8003488:	4641      	mov	r1, r8
 800348a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348e:	4641      	mov	r1, r8
 8003490:	008a      	lsls	r2, r1, #2
 8003492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003496:	f7fc fe97 	bl	80001c8 <__aeabi_uldivmod>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <UART_SetConfig+0x4e4>)
 80034a0:	fba3 1302 	umull	r1, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2164      	movs	r1, #100	; 0x64
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	3332      	adds	r3, #50	; 0x32
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <UART_SetConfig+0x4e4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4422      	add	r2, r4
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034ce:	46bd      	mov	sp, r7
 80034d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d4:	51eb851f 	.word	0x51eb851f

080034d8 <memset>:
 80034d8:	4402      	add	r2, r0
 80034da:	4603      	mov	r3, r0
 80034dc:	4293      	cmp	r3, r2
 80034de:	d100      	bne.n	80034e2 <memset+0xa>
 80034e0:	4770      	bx	lr
 80034e2:	f803 1b01 	strb.w	r1, [r3], #1
 80034e6:	e7f9      	b.n	80034dc <memset+0x4>

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4d0d      	ldr	r5, [pc, #52]	; (8003520 <__libc_init_array+0x38>)
 80034ec:	4c0d      	ldr	r4, [pc, #52]	; (8003524 <__libc_init_array+0x3c>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	2600      	movs	r6, #0
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	4d0b      	ldr	r5, [pc, #44]	; (8003528 <__libc_init_array+0x40>)
 80034fa:	4c0c      	ldr	r4, [pc, #48]	; (800352c <__libc_init_array+0x44>)
 80034fc:	f000 f818 	bl	8003530 <_init>
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	2600      	movs	r6, #0
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f855 3b04 	ldr.w	r3, [r5], #4
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	08003570 	.word	0x08003570
 8003524:	08003570 	.word	0x08003570
 8003528:	08003570 	.word	0x08003570
 800352c:	08003574 	.word	0x08003574

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
