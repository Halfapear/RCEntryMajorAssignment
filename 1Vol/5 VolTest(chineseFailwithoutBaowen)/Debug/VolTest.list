
VolTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005774  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005904  08005904  00006904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005988  08005988  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005990  08005990  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005990  08005990  00006990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005994  08005994  00006994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005998  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000314  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000037c  2000037c  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfa4  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f14  00000000  00000000  0001503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00016f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a38  00000000  00000000  00017c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c06  00000000  00000000  000186a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee4a  00000000  00000000  0003a2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd1b5  00000000  00000000  000490f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001162a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e88  00000000  00000000  001162e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0011a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058ec 	.word	0x080058ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080058ec 	.word	0x080058ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <HAL_TIM_IC_CaptureCallback+0x4c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	429a      	cmp	r2, r3
 8000572:	d116      	bne.n	80005a2 <HAL_TIM_IC_CaptureCallback+0x42>
	{
		switch(htim->Channel)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7f1b      	ldrb	r3, [r3, #28]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d002      	beq.n	8000582 <HAL_TIM_IC_CaptureCallback+0x22>
 800057c:	2b02      	cmp	r3, #2
 800057e:	d008      	beq.n	8000592 <HAL_TIM_IC_CaptureCallback+0x32>
				uiDutyCycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);      /* 占空�?? */
				break;
			case HAL_TIM_ACTIVE_CHANNEL_2:
				uiCycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);          /* 周期 */
				break;
			default:break;
 8000580:	e00f      	b.n	80005a2 <HAL_TIM_IC_CaptureCallback+0x42>
				uiDutyCycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);      /* 占空�?? */
 8000582:	2100      	movs	r1, #0
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f002 fd8f 	bl	80030a8 <HAL_TIM_ReadCapturedValue>
 800058a:	4603      	mov	r3, r0
 800058c:	4a08      	ldr	r2, [pc, #32]	@ (80005b0 <HAL_TIM_IC_CaptureCallback+0x50>)
 800058e:	6013      	str	r3, [r2, #0]
				break;
 8000590:	e007      	b.n	80005a2 <HAL_TIM_IC_CaptureCallback+0x42>
				uiCycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);          /* 周期 */
 8000592:	2104      	movs	r1, #4
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f002 fd87 	bl	80030a8 <HAL_TIM_ReadCapturedValue>
 800059a:	4603      	mov	r3, r0
 800059c:	4a05      	ldr	r2, [pc, #20]	@ (80005b4 <HAL_TIM_IC_CaptureCallback+0x54>)
 800059e:	6013      	str	r3, [r2, #0]
				break;
 80005a0:	bf00      	nop
		}
	}
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000084 	.word	0x20000084
 80005b0:	2000021c 	.word	0x2000021c
 80005b4:	20000220 	.word	0x20000220

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
int main(void)
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fcd6 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f834 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f9fe 	bl	80009cc <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f9d4 	bl	800097c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005d4:	f000 f9a8 	bl	8000928 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80005d8:	f000 f894 	bl	8000704 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005dc:	f000 f92e 	bl	800083c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */


  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);   /* 使能定时�??4通道1输出PWM�?? */

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);  /* 使能定时�??2通道1的PWM输入捕获 */
 80005e0:	2100      	movs	r1, #0
 80005e2:	480e      	ldr	r0, [pc, #56]	@ (800061c <main+0x64>)
 80005e4:	f002 f8e0 	bl	80027a8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);  /* 使能定时�??2通道2的PWM输入捕获 */
 80005e8:	2104      	movs	r1, #4
 80005ea:	480c      	ldr	r0, [pc, #48]	@ (800061c <main+0x64>)
 80005ec:	f002 f8dc 	bl	80027a8 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		HAL_Delay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f4:	f000 fd30 	bl	8001058 <HAL_Delay>
		uiFrequency = 1000000 / uiCycle;
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <main+0x68>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <main+0x6c>)
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <main+0x70>)
 8000604:	6013      	str	r3, [r2, #0]
		printf("占空:%dus    周期:%dus    频率:%dHz    \r\n", uiDutyCycle, uiCycle, uiFrequency);
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <main+0x74>)
 8000608:	6819      	ldr	r1, [r3, #0]
 800060a:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <main+0x68>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <main+0x70>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4807      	ldr	r0, [pc, #28]	@ (8000630 <main+0x78>)
 8000614:	f004 fafc 	bl	8004c10 <iprintf>
		HAL_Delay(500);
 8000618:	bf00      	nop
 800061a:	e7e9      	b.n	80005f0 <main+0x38>
 800061c:	20000084 	.word	0x20000084
 8000620:	20000220 	.word	0x20000220
 8000624:	000f4240 	.word	0x000f4240
 8000628:	20000224 	.word	0x20000224
 800062c:	2000021c 	.word	0x2000021c
 8000630:	08005904 	.word	0x08005904

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fb39 	bl	8004cba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a26      	ldr	r2, [pc, #152]	@ (80006fc <SystemClock_Config+0xc8>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a20      	ldr	r2, [pc, #128]	@ (8000700 <SystemClock_Config+0xcc>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006a8:	2348      	movs	r3, #72	@ 0x48
 80006aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fb1b 	bl	8001cf4 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 f99c 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fd7d 	bl	80021e4 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f0:	f000 f986 	bl	8000a00 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	@ 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b090      	sub	sp, #64	@ 0x40
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073e:	4b3e      	ldr	r3, [pc, #248]	@ (8000838 <MX_TIM2_Init+0x134>)
 8000740:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000744:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000746:	4b3c      	ldr	r3, [pc, #240]	@ (8000838 <MX_TIM2_Init+0x134>)
 8000748:	2247      	movs	r2, #71	@ 0x47
 800074a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b3a      	ldr	r3, [pc, #232]	@ (8000838 <MX_TIM2_Init+0x134>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000752:	4b39      	ldr	r3, [pc, #228]	@ (8000838 <MX_TIM2_Init+0x134>)
 8000754:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b37      	ldr	r3, [pc, #220]	@ (8000838 <MX_TIM2_Init+0x134>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <MX_TIM2_Init+0x134>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000766:	4834      	ldr	r0, [pc, #208]	@ (8000838 <MX_TIM2_Init+0x134>)
 8000768:	f001 ff1c 	bl	80025a4 <HAL_TIM_Base_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000772:	f000 f945 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000776:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000780:	4619      	mov	r1, r3
 8000782:	482d      	ldr	r0, [pc, #180]	@ (8000838 <MX_TIM2_Init+0x134>)
 8000784:	f002 fb86 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800078e:	f000 f937 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000792:	4829      	ldr	r0, [pc, #164]	@ (8000838 <MX_TIM2_Init+0x134>)
 8000794:	f001 ffae 	bl	80026f4 <HAL_TIM_IC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800079e:	f000 f92f 	bl	8000a00 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80007a2:	2304      	movs	r3, #4
 80007a4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80007a6:	2360      	movs	r3, #96	@ 0x60
 80007a8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	481e      	ldr	r0, [pc, #120]	@ (8000838 <MX_TIM2_Init+0x134>)
 80007be:	f002 fc30 	bl	8003022 <HAL_TIM_SlaveConfigSynchro>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80007c8:	f000 f91a 	bl	8000a00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80007cc:	2302      	movs	r3, #2
 80007ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	4814      	ldr	r0, [pc, #80]	@ (8000838 <MX_TIM2_Init+0x134>)
 80007e6:	f002 f9f7 	bl	8002bd8 <HAL_TIM_IC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80007f0:	f000 f906 	bl	8000a00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2204      	movs	r2, #4
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <MX_TIM2_Init+0x134>)
 8000806:	f002 f9e7 	bl	8002bd8 <HAL_TIM_IC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000810:	f000 f8f6 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_TIM2_Init+0x134>)
 8000822:	f003 f985 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 800082c:	f000 f8e8 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3740      	adds	r7, #64	@ 0x40
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000084 	.word	0x20000084

0800083c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	@ 0x38
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800086c:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <MX_TIM5_Init+0xe4>)
 800086e:	4a2d      	ldr	r2, [pc, #180]	@ (8000924 <MX_TIM5_Init+0xe8>)
 8000870:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8000872:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <MX_TIM5_Init+0xe4>)
 8000874:	2247      	movs	r2, #71	@ 0x47
 8000876:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <MX_TIM5_Init+0xe4>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 800087e:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <MX_TIM5_Init+0xe4>)
 8000880:	2263      	movs	r2, #99	@ 0x63
 8000882:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <MX_TIM5_Init+0xe4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <MX_TIM5_Init+0xe4>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000890:	4823      	ldr	r0, [pc, #140]	@ (8000920 <MX_TIM5_Init+0xe4>)
 8000892:	f001 fe87 	bl	80025a4 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800089c:	f000 f8b0 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80008a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008aa:	4619      	mov	r1, r3
 80008ac:	481c      	ldr	r0, [pc, #112]	@ (8000920 <MX_TIM5_Init+0xe4>)
 80008ae:	f002 faf1 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80008b8:	f000 f8a2 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80008bc:	4818      	ldr	r0, [pc, #96]	@ (8000920 <MX_TIM5_Init+0xe4>)
 80008be:	f001 fec0 	bl	8002642 <HAL_TIM_PWM_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80008c8:	f000 f89a 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4619      	mov	r1, r3
 80008da:	4811      	ldr	r0, [pc, #68]	@ (8000920 <MX_TIM5_Init+0xe4>)
 80008dc:	f003 f928 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80008e6:	f000 f88b 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ea:	2360      	movs	r3, #96	@ 0x60
 80008ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80008ee:	2332      	movs	r3, #50	@ 0x32
 80008f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	4619      	mov	r1, r3
 8000900:	4807      	ldr	r0, [pc, #28]	@ (8000920 <MX_TIM5_Init+0xe4>)
 8000902:	f002 fa05 	bl	8002d10 <HAL_TIM_PWM_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800090c:	f000 f878 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000910:	4803      	ldr	r0, [pc, #12]	@ (8000920 <MX_TIM5_Init+0xe4>)
 8000912:	f000 f907 	bl	8000b24 <HAL_TIM_MspPostInit>

}
 8000916:	bf00      	nop
 8000918:	3738      	adds	r7, #56	@ 0x38
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000cc 	.word	0x200000cc
 8000924:	40000c00 	.word	0x40000c00

08000928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <MX_USART1_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000960:	f003 f976 	bl	8003c50 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 f849 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000114 	.word	0x20000114
 8000978:	40011000 	.word	0x40011000

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_DMA_Init+0x4c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <MX_DMA_Init+0x4c>)
 800098c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <MX_DMA_Init+0x4c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	203a      	movs	r0, #58	@ 0x3a
 80009a4:	f000 fc57 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009a8:	203a      	movs	r0, #58	@ 0x3a
 80009aa:	f000 fc70 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2046      	movs	r0, #70	@ 0x46
 80009b4:	f000 fc4f 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80009b8:	2046      	movs	r0, #70	@ 0x46
 80009ba:	f000 fc68 	bl	800128e <HAL_NVIC_EnableIRQ>

}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_GPIO_Init+0x30>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <MX_GPIO_Init+0x30>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_GPIO_Init+0x30>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a7c:	d134      	bne.n	8000ae8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <HAL_TIM_Base_MspInit+0xbc>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a24      	ldr	r2, [pc, #144]	@ (8000b18 <HAL_TIM_Base_MspInit+0xbc>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <HAL_TIM_Base_MspInit+0xbc>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <HAL_TIM_Base_MspInit+0xbc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b18 <HAL_TIM_Base_MspInit+0xbc>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <HAL_TIM_Base_MspInit+0xbc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4812      	ldr	r0, [pc, #72]	@ (8000b1c <HAL_TIM_Base_MspInit+0xc0>)
 8000ad2:	f000 ff73 	bl	80019bc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201c      	movs	r0, #28
 8000adc:	f000 fbbb 	bl	8001256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae0:	201c      	movs	r0, #28
 8000ae2:	f000 fbd4 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000ae6:	e012      	b.n	8000b0e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM5)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0c      	ldr	r2, [pc, #48]	@ (8000b20 <HAL_TIM_Base_MspInit+0xc4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10d      	bne.n	8000b0e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <HAL_TIM_Base_MspInit+0xbc>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a07      	ldr	r2, [pc, #28]	@ (8000b18 <HAL_TIM_Base_MspInit+0xbc>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_TIM_Base_MspInit+0xbc>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	@ 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40000c00 	.word	0x40000c00

08000b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <HAL_TIM_MspPostInit+0x68>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d11d      	bne.n	8000b82 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <HAL_TIM_MspPostInit+0x6c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <HAL_TIM_MspPostInit+0x6c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <HAL_TIM_MspPostInit+0x6c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b62:	2301      	movs	r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <HAL_TIM_MspPostInit+0x70>)
 8000b7e:	f000 ff1d 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40000c00 	.word	0x40000c00
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8000ce8 <HAL_UART_MspInit+0x150>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	f040 8091 	bne.w	8000cde <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	4b4a      	ldr	r3, [pc, #296]	@ (8000cec <HAL_UART_MspInit+0x154>)
 8000bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc4:	4a49      	ldr	r2, [pc, #292]	@ (8000cec <HAL_UART_MspInit+0x154>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bcc:	4b47      	ldr	r3, [pc, #284]	@ (8000cec <HAL_UART_MspInit+0x154>)
 8000bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b43      	ldr	r3, [pc, #268]	@ (8000cec <HAL_UART_MspInit+0x154>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be0:	4a42      	ldr	r2, [pc, #264]	@ (8000cec <HAL_UART_MspInit+0x154>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be8:	4b40      	ldr	r3, [pc, #256]	@ (8000cec <HAL_UART_MspInit+0x154>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bf4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c06:	2307      	movs	r3, #7
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4837      	ldr	r0, [pc, #220]	@ (8000cf0 <HAL_UART_MspInit+0x158>)
 8000c12:	f000 fed3 	bl	80019bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000c16:	4b37      	ldr	r3, [pc, #220]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c18:	4a37      	ldr	r2, [pc, #220]	@ (8000cf8 <HAL_UART_MspInit+0x160>)
 8000c1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c1c:	4b35      	ldr	r3, [pc, #212]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c22:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c24:	4b33      	ldr	r3, [pc, #204]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2a:	4b32      	ldr	r3, [pc, #200]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c30:	4b30      	ldr	r3, [pc, #192]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c36:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c38:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c44:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c50:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c56:	4827      	ldr	r0, [pc, #156]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c58:	f000 fb34 	bl	80012c4 <HAL_DMA_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c62:	f7ff fecd 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a22      	ldr	r2, [pc, #136]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c6c:	4a21      	ldr	r2, [pc, #132]	@ (8000cf4 <HAL_UART_MspInit+0x15c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000c72:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000c74:	4a22      	ldr	r2, [pc, #136]	@ (8000d00 <HAL_UART_MspInit+0x168>)
 8000c76:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c78:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000c7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000c82:	2240      	movs	r2, #64	@ 0x40
 8000c84:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000c8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c94:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cb2:	4812      	ldr	r0, [pc, #72]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000cb4:	f000 fb06 	bl	80012c4 <HAL_DMA_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000cbe:	f7ff fe9f 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000cc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cfc <HAL_UART_MspInit+0x164>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2025      	movs	r0, #37	@ 0x25
 8000cd4:	f000 fabf 	bl	8001256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd8:	2025      	movs	r0, #37	@ 0x25
 8000cda:	f000 fad8 	bl	800128e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	@ 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	2000015c 	.word	0x2000015c
 8000cf8:	40026440 	.word	0x40026440
 8000cfc:	200001bc 	.word	0x200001bc
 8000d00:	400264b8 	.word	0x400264b8

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <NMI_Handler+0x4>

08000d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5a:	f000 f95d 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <TIM2_IRQHandler+0x10>)
 8000d6a:	f001 fe45 	bl	80029f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000084 	.word	0x20000084

08000d78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <USART1_IRQHandler+0x10>)
 8000d7e:	f002 ffb7 	bl	8003cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000114 	.word	0x20000114

08000d8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <DMA2_Stream2_IRQHandler+0x10>)
 8000d92:	f000 fbd7 	bl	8001544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000015c 	.word	0x2000015c

08000da0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <DMA2_Stream7_IRQHandler+0x10>)
 8000da6:	f000 fbcd 	bl	8001544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001bc 	.word	0x200001bc

08000db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
  }

  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
  }
  return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_isatty>:

int _isatty(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f003 ff4a 	bl	8004d58 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20020000 	.word	0x20020000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	20000228 	.word	0x20000228
 8000ef8:	20000380 	.word	0x20000380

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f003 ff09 	bl	8004d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fb31 	bl	80005b8 <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f64:	08005998 	.word	0x08005998
  ldr r2, =_sbss
 8000f68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f6c:	2000037c 	.word	0x2000037c

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f94f 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f808 	bl	8000fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fd30 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_InitTick+0x54>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x58>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f967 	bl	80012aa <HAL_SYSTICK_Config>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00e      	b.n	8001004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d80a      	bhi.n	8001002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f92f 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <HAL_InitTick+0x5c>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000000 	.word	0x20000000
 8001010:	20000008 	.word	0x20000008
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008
 800103c:	2000022c 	.word	0x2000022c

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000022c 	.word	0x2000022c

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_Delay+0x44>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffde 	bl	8001040 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	db0b      	blt.n	800112e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 021f 	and.w	r2, r3, #31
 800111c:	4907      	ldr	r1, [pc, #28]	@ (800113c <__NVIC_EnableIRQ+0x38>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	2001      	movs	r0, #1
 8001126:	fa00 f202 	lsl.w	r2, r0, r2
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	@ (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	@ (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	@ 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff29 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff3e 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff8e 	bl	8001194 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5d 	bl	8001140 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff31 	bl	8001104 <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffa2 	bl	80011fc <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff feb6 	bl	8001040 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e099      	b.n	8001414 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001300:	e00f      	b.n	8001322 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001302:	f7ff fe9d 	bl	8001040 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b05      	cmp	r3, #5
 800130e:	d908      	bls.n	8001322 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2220      	movs	r2, #32
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2203      	movs	r2, #3
 800131a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e078      	b.n	8001414 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1e8      	bne.n	8001302 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	4b38      	ldr	r3, [pc, #224]	@ (800141c <HAL_DMA_Init+0x158>)
 800133c:	4013      	ands	r3, r2
 800133e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4313      	orrs	r3, r2
 8001372:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001378:	2b04      	cmp	r3, #4
 800137a:	d107      	bne.n	800138c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	4313      	orrs	r3, r2
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4313      	orrs	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f023 0307 	bic.w	r3, r3, #7
 80013a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d117      	bne.n	80013e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4313      	orrs	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00e      	beq.n	80013e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fa7b 	bl	80018c4 <DMA_CheckFifoParam>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d008      	beq.n	80013e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2240      	movs	r2, #64	@ 0x40
 80013d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80013e2:	2301      	movs	r3, #1
 80013e4:	e016      	b.n	8001414 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fa32 	bl	8001858 <DMA_CalcBaseAndBitshift>
 80013f4:	4603      	mov	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013fc:	223f      	movs	r2, #63	@ 0x3f
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	f010803f 	.word	0xf010803f

08001420 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800142e:	f7ff fe07 	bl	8001040 <HAL_GetTick>
 8001432:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d008      	beq.n	8001452 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e052      	b.n	80014f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0216 	bic.w	r2, r2, #22
 8001460:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001470:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	2b00      	cmp	r3, #0
 8001478:	d103      	bne.n	8001482 <HAL_DMA_Abort+0x62>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0208 	bic.w	r2, r2, #8
 8001490:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a2:	e013      	b.n	80014cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014a4:	f7ff fdcc 	bl	8001040 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b05      	cmp	r3, #5
 80014b0:	d90c      	bls.n	80014cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2220      	movs	r2, #32
 80014b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e015      	b.n	80014f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1e4      	bne.n	80014a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014de:	223f      	movs	r2, #63	@ 0x3f
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d004      	beq.n	800151e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2280      	movs	r2, #128	@ 0x80
 8001518:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00c      	b.n	8001538 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2205      	movs	r2, #5
 8001522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001550:	4b8e      	ldr	r3, [pc, #568]	@ (800178c <HAL_DMA_IRQHandler+0x248>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a8e      	ldr	r2, [pc, #568]	@ (8001790 <HAL_DMA_IRQHandler+0x24c>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	0a9b      	lsrs	r3, r3, #10
 800155c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156e:	2208      	movs	r2, #8
 8001570:	409a      	lsls	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01a      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0204 	bic.w	r2, r2, #4
 8001596:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800159c:	2208      	movs	r2, #8
 800159e:	409a      	lsls	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b4:	2201      	movs	r2, #1
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d012      	beq.n	80015e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d2:	2201      	movs	r2, #1
 80015d4:	409a      	lsls	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015de:	f043 0202 	orr.w	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ea:	2204      	movs	r2, #4
 80015ec:	409a      	lsls	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d012      	beq.n	800161c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001608:	2204      	movs	r2, #4
 800160a:	409a      	lsls	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001614:	f043 0204 	orr.w	r2, r3, #4
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001620:	2210      	movs	r2, #16
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d043      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d03c      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163e:	2210      	movs	r2, #16
 8001640:	409a      	lsls	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d018      	beq.n	8001686 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d024      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
 8001672:	e01f      	b.n	80016b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01b      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
 8001684:	e016      	b.n	80016b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d107      	bne.n	80016a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0208 	bic.w	r2, r2, #8
 80016a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b8:	2220      	movs	r2, #32
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 808f 	beq.w	80017e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8087 	beq.w	80017e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016da:	2220      	movs	r2, #32
 80016dc:	409a      	lsls	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d136      	bne.n	800175c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0216 	bic.w	r2, r2, #22
 80016fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800170c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <HAL_DMA_IRQHandler+0x1da>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0208 	bic.w	r2, r2, #8
 800172c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001732:	223f      	movs	r2, #63	@ 0x3f
 8001734:	409a      	lsls	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800174e:	2b00      	cmp	r3, #0
 8001750:	d07e      	beq.n	8001850 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	4798      	blx	r3
        }
        return;
 800175a:	e079      	b.n	8001850 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01d      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10d      	bne.n	8001794 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177c:	2b00      	cmp	r3, #0
 800177e:	d031      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	4798      	blx	r3
 8001788:	e02c      	b.n	80017e4 <HAL_DMA_IRQHandler+0x2a0>
 800178a:	bf00      	nop
 800178c:	20000000 	.word	0x20000000
 8001790:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d023      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
 80017a4:	e01e      	b.n	80017e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10f      	bne.n	80017d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0210 	bic.w	r2, r2, #16
 80017c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d032      	beq.n	8001852 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d022      	beq.n	800183e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2205      	movs	r2, #5
 80017fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3301      	adds	r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	429a      	cmp	r2, r3
 800181a:	d307      	bcc.n	800182c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f2      	bne.n	8001810 <HAL_DMA_IRQHandler+0x2cc>
 800182a:	e000      	b.n	800182e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800182c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
 800184e:	e000      	b.n	8001852 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001850:	bf00      	nop
    }
  }
}
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	3b10      	subs	r3, #16
 8001868:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <DMA_CalcBaseAndBitshift+0x64>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001872:	4a13      	ldr	r2, [pc, #76]	@ (80018c0 <DMA_CalcBaseAndBitshift+0x68>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b03      	cmp	r3, #3
 8001884:	d909      	bls.n	800189a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800188e:	f023 0303 	bic.w	r3, r3, #3
 8001892:	1d1a      	adds	r2, r3, #4
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	659a      	str	r2, [r3, #88]	@ 0x58
 8001898:	e007      	b.n	80018aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018a2:	f023 0303 	bic.w	r3, r3, #3
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	aaaaaaab 	.word	0xaaaaaaab
 80018c0:	0800594c 	.word	0x0800594c

080018c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d11f      	bne.n	800191e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d856      	bhi.n	8001992 <DMA_CheckFifoParam+0xce>
 80018e4:	a201      	add	r2, pc, #4	@ (adr r2, 80018ec <DMA_CheckFifoParam+0x28>)
 80018e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ea:	bf00      	nop
 80018ec:	080018fd 	.word	0x080018fd
 80018f0:	0800190f 	.word	0x0800190f
 80018f4:	080018fd 	.word	0x080018fd
 80018f8:	08001993 	.word	0x08001993
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d046      	beq.n	8001996 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800190c:	e043      	b.n	8001996 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001916:	d140      	bne.n	800199a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800191c:	e03d      	b.n	800199a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001926:	d121      	bne.n	800196c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d837      	bhi.n	800199e <DMA_CheckFifoParam+0xda>
 800192e:	a201      	add	r2, pc, #4	@ (adr r2, 8001934 <DMA_CheckFifoParam+0x70>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	08001945 	.word	0x08001945
 8001938:	0800194b 	.word	0x0800194b
 800193c:	08001945 	.word	0x08001945
 8001940:	0800195d 	.word	0x0800195d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
      break;
 8001948:	e030      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d025      	beq.n	80019a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800195a:	e022      	b.n	80019a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001960:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001964:	d11f      	bne.n	80019a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800196a:	e01c      	b.n	80019a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d903      	bls.n	800197a <DMA_CheckFifoParam+0xb6>
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d003      	beq.n	8001980 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001978:	e018      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      break;
 800197e:	e015      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00e      	beq.n	80019aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
      break;
 8001990:	e00b      	b.n	80019aa <DMA_CheckFifoParam+0xe6>
      break;
 8001992:	bf00      	nop
 8001994:	e00a      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 8001996:	bf00      	nop
 8001998:	e008      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 800199a:	bf00      	nop
 800199c:	e006      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 800199e:	bf00      	nop
 80019a0:	e004      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 80019a2:	bf00      	nop
 80019a4:	e002      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;   
 80019a6:	bf00      	nop
 80019a8:	e000      	b.n	80019ac <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
    }
  } 
  
  return status; 
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	@ 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e16b      	b.n	8001cb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f040 815a 	bne.w	8001caa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d005      	beq.n	8001a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d017      	beq.n	8001aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d123      	bne.n	8001b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	69b9      	ldr	r1, [r7, #24]
 8001afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80b4 	beq.w	8001caa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b60      	ldr	r3, [pc, #384]	@ (8001cc8 <HAL_GPIO_Init+0x30c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	4a5f      	ldr	r2, [pc, #380]	@ (8001cc8 <HAL_GPIO_Init+0x30c>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b52:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc8 <HAL_GPIO_Init+0x30c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ccc <HAL_GPIO_Init+0x310>)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a52      	ldr	r2, [pc, #328]	@ (8001cd0 <HAL_GPIO_Init+0x314>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02b      	beq.n	8001be2 <HAL_GPIO_Init+0x226>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a51      	ldr	r2, [pc, #324]	@ (8001cd4 <HAL_GPIO_Init+0x318>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d025      	beq.n	8001bde <HAL_GPIO_Init+0x222>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a50      	ldr	r2, [pc, #320]	@ (8001cd8 <HAL_GPIO_Init+0x31c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01f      	beq.n	8001bda <HAL_GPIO_Init+0x21e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001cdc <HAL_GPIO_Init+0x320>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0x21a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce0 <HAL_GPIO_Init+0x324>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0x216>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce4 <HAL_GPIO_Init+0x328>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00d      	beq.n	8001bce <HAL_GPIO_Init+0x212>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce8 <HAL_GPIO_Init+0x32c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x20e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4b      	ldr	r2, [pc, #300]	@ (8001cec <HAL_GPIO_Init+0x330>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_GPIO_Init+0x20a>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e00e      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	e00c      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bca:	2306      	movs	r3, #6
 8001bcc:	e00a      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	@ (8001ccc <HAL_GPIO_Init+0x310>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a32      	ldr	r2, [pc, #200]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b30      	ldr	r3, [pc, #192]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a27      	ldr	r2, [pc, #156]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c56:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca4:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f ae90 	bls.w	80019d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40021400 	.word	0x40021400
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	40021c00 	.word	0x40021c00
 8001cf0:	40013c00 	.word	0x40013c00

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e267      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d075      	beq.n	8001dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d12:	4b88      	ldr	r3, [pc, #544]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d00c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1e:	4b85      	ldr	r3, [pc, #532]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d112      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4b82      	ldr	r3, [pc, #520]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d36:	d10b      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	4b7e      	ldr	r3, [pc, #504]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d05b      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d157      	bne.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e242      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d58:	d106      	bne.n	8001d68 <HAL_RCC_OscConfig+0x74>
 8001d5a:	4b76      	ldr	r3, [pc, #472]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a75      	ldr	r2, [pc, #468]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e01d      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4b70      	ldr	r3, [pc, #448]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a6f      	ldr	r2, [pc, #444]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6c      	ldr	r2, [pc, #432]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0xb0>
 8001d8c:	4b69      	ldr	r3, [pc, #420]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a68      	ldr	r2, [pc, #416]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b66      	ldr	r3, [pc, #408]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a65      	ldr	r2, [pc, #404]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff f948 	bl	8001040 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff f944 	bl	8001040 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	@ 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e207      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f934 	bl	8001040 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff f930 	bl	8001040 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	@ 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1f3      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	4b51      	ldr	r3, [pc, #324]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d063      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e16:	4b47      	ldr	r3, [pc, #284]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d11c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b44      	ldr	r3, [pc, #272]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	4b41      	ldr	r3, [pc, #260]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e1c7      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b3b      	ldr	r3, [pc, #236]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4937      	ldr	r1, [pc, #220]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	e03a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b34      	ldr	r3, [pc, #208]	@ (8001f38 <HAL_RCC_OscConfig+0x244>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f8e9 	bl	8001040 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff f8e5 	bl	8001040 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e1a8      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	4b2b      	ldr	r3, [pc, #172]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b28      	ldr	r3, [pc, #160]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4925      	ldr	r1, [pc, #148]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <HAL_RCC_OscConfig+0x244>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff f8c8 	bl	8001040 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7ff f8c4 	bl	8001040 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e187      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d036      	beq.n	8001f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d016      	beq.n	8001f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_RCC_OscConfig+0x248>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff f8a8 	bl	8001040 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7ff f8a4 	bl	8001040 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e167      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <HAL_RCC_OscConfig+0x240>)
 8001f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x200>
 8001f12:	e01b      	b.n	8001f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_OscConfig+0x248>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff f891 	bl	8001040 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	e00e      	b.n	8001f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f22:	f7ff f88d 	bl	8001040 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d907      	bls.n	8001f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e150      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
 8001f34:	40023800 	.word	0x40023800
 8001f38:	42470000 	.word	0x42470000
 8001f3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b88      	ldr	r3, [pc, #544]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ea      	bne.n	8001f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8097 	beq.w	8002088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b81      	ldr	r3, [pc, #516]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	4a7c      	ldr	r2, [pc, #496]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b77      	ldr	r3, [pc, #476]	@ (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4b74      	ldr	r3, [pc, #464]	@ (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a73      	ldr	r2, [pc, #460]	@ (8002168 <HAL_RCC_OscConfig+0x474>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff f84d 	bl	8001040 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7ff f849 	bl	8001040 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e10c      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002168 <HAL_RCC_OscConfig+0x474>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x2ea>
 8001fd0:	4b64      	ldr	r3, [pc, #400]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd4:	4a63      	ldr	r2, [pc, #396]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x324>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x30c>
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fea:	4a5e      	ldr	r2, [pc, #376]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x324>
 8002000:	4b58      	ldr	r3, [pc, #352]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002004:	4a57      	ldr	r2, [pc, #348]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	@ 0x70
 800200c:	4b55      	ldr	r3, [pc, #340]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002010:	4a54      	ldr	r2, [pc, #336]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff f80e 	bl	8001040 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7ff f80a 	bl	8001040 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0cb      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203e:	4b49      	ldr	r3, [pc, #292]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <HAL_RCC_OscConfig+0x334>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7fe fff8 	bl	8001040 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7fe fff4 	bl	8001040 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e0b5      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206a:	4b3e      	ldr	r3, [pc, #248]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ee      	bne.n	8002054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207c:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	4a38      	ldr	r2, [pc, #224]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8002082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002086:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a1 	beq.w	80021d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002092:	4b34      	ldr	r3, [pc, #208]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b08      	cmp	r3, #8
 800209c:	d05c      	beq.n	8002158 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d141      	bne.n	800212a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	4b31      	ldr	r3, [pc, #196]	@ (800216c <HAL_RCC_OscConfig+0x478>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe ffc8 	bl	8001040 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe ffc4 	bl	8001040 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e087      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	4b27      	ldr	r3, [pc, #156]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	085b      	lsrs	r3, r3, #1
 80020ea:	3b01      	subs	r3, #1
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	491b      	ldr	r1, [pc, #108]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_RCC_OscConfig+0x478>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe ff9d 	bl	8001040 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe ff99 	bl	8001040 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e05c      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x416>
 8002128:	e054      	b.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_RCC_OscConfig+0x478>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe ff86 	bl	8001040 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe ff82 	bl	8001040 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e045      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_RCC_OscConfig+0x470>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x444>
 8002156:	e03d      	b.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e038      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
 8002164:	40023800 	.word	0x40023800
 8002168:	40007000 	.word	0x40007000
 800216c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002170:	4b1b      	ldr	r3, [pc, #108]	@ (80021e0 <HAL_RCC_OscConfig+0x4ec>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d028      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d121      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d11a      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d111      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0cc      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b68      	ldr	r3, [pc, #416]	@ (800239c <HAL_RCC_ClockConfig+0x1b8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d90c      	bls.n	8002220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b65      	ldr	r3, [pc, #404]	@ (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b63      	ldr	r3, [pc, #396]	@ (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0b8      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002238:	4b59      	ldr	r3, [pc, #356]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a58      	ldr	r2, [pc, #352]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002242:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002250:	4b53      	ldr	r3, [pc, #332]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a52      	ldr	r2, [pc, #328]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800225a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b50      	ldr	r3, [pc, #320]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	494d      	ldr	r1, [pc, #308]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d044      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b47      	ldr	r3, [pc, #284]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d119      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b3f      	ldr	r3, [pc, #252]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e067      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b37      	ldr	r3, [pc, #220]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4934      	ldr	r1, [pc, #208]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe feb4 	bl	8001040 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe feb0 	bl	8001040 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e04f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b25      	ldr	r3, [pc, #148]	@ (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d20c      	bcs.n	800232c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b22      	ldr	r3, [pc, #136]	@ (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e032      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4916      	ldr	r1, [pc, #88]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	490e      	ldr	r1, [pc, #56]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800236a:	f000 f821 	bl	80023b0 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	490a      	ldr	r1, [pc, #40]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	5ccb      	ldrb	r3, [r1, r3]
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002386:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fe14 	bl	8000fb8 <HAL_InitTick>

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08005934 	.word	0x08005934
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b4:	b090      	sub	sp, #64	@ 0x40
 80023b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c8:	4b59      	ldr	r3, [pc, #356]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d00d      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x40>
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	f200 80a1 	bhi.w	800251c <HAL_RCC_GetSysClockFreq+0x16c>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x34>
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x3a>
 80023e2:	e09b      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b53      	ldr	r3, [pc, #332]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x184>)
 80023e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023e8:	e09b      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ea:	4b53      	ldr	r3, [pc, #332]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023ee:	e098      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d028      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002406:	4b4a      	ldr	r3, [pc, #296]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	2200      	movs	r2, #0
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	627a      	str	r2, [r7, #36]	@ 0x24
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002418:	2100      	movs	r1, #0
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x188>)
 800241c:	fb03 f201 	mul.w	r2, r3, r1
 8002420:	2300      	movs	r3, #0
 8002422:	fb00 f303 	mul.w	r3, r0, r3
 8002426:	4413      	add	r3, r2
 8002428:	4a43      	ldr	r2, [pc, #268]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x188>)
 800242a:	fba0 1202 	umull	r1, r2, r0, r2
 800242e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002430:	460a      	mov	r2, r1
 8002432:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002436:	4413      	add	r3, r2
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243c:	2200      	movs	r2, #0
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	61fa      	str	r2, [r7, #28]
 8002442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002446:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800244a:	f7fd ff11 	bl	8000270 <__aeabi_uldivmod>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4613      	mov	r3, r2
 8002454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002456:	e053      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002458:	4b35      	ldr	r3, [pc, #212]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	2200      	movs	r2, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	617a      	str	r2, [r7, #20]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800246a:	f04f 0b00 	mov.w	fp, #0
 800246e:	4652      	mov	r2, sl
 8002470:	465b      	mov	r3, fp
 8002472:	f04f 0000 	mov.w	r0, #0
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	0159      	lsls	r1, r3, #5
 800247c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002480:	0150      	lsls	r0, r2, #5
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	ebb2 080a 	subs.w	r8, r2, sl
 800248a:	eb63 090b 	sbc.w	r9, r3, fp
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800249a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800249e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024a2:	ebb2 0408 	subs.w	r4, r2, r8
 80024a6:	eb63 0509 	sbc.w	r5, r3, r9
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	00eb      	lsls	r3, r5, #3
 80024b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024b8:	00e2      	lsls	r2, r4, #3
 80024ba:	4614      	mov	r4, r2
 80024bc:	461d      	mov	r5, r3
 80024be:	eb14 030a 	adds.w	r3, r4, sl
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	eb45 030b 	adc.w	r3, r5, fp
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024d6:	4629      	mov	r1, r5
 80024d8:	028b      	lsls	r3, r1, #10
 80024da:	4621      	mov	r1, r4
 80024dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024e0:	4621      	mov	r1, r4
 80024e2:	028a      	lsls	r2, r1, #10
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ea:	2200      	movs	r2, #0
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	60fa      	str	r2, [r7, #12]
 80024f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024f4:	f7fd febc 	bl	8000270 <__aeabi_uldivmod>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4613      	mov	r3, r2
 80024fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002500:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x180>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	3301      	adds	r3, #1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002514:	fbb2 f3f3 	udiv	r3, r2, r3
 8002518:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800251a:	e002      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800251c:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x184>)
 800251e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002524:	4618      	mov	r0, r3
 8002526:	3740      	adds	r7, #64	@ 0x40
 8002528:	46bd      	mov	sp, r7
 800252a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	00f42400 	.word	0x00f42400
 8002538:	017d7840 	.word	0x017d7840

0800253c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b03      	ldr	r3, [pc, #12]	@ (8002550 <HAL_RCC_GetHCLKFreq+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000000 	.word	0x20000000

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002558:	f7ff fff0 	bl	800253c <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	0a9b      	lsrs	r3, r3, #10
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4903      	ldr	r1, [pc, #12]	@ (8002578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	08005944 	.word	0x08005944

0800257c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002580:	f7ff ffdc 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0b5b      	lsrs	r3, r3, #13
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	@ (80025a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	08005944 	.word	0x08005944

080025a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e041      	b.n	800263a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fa46 	bl	8000a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fdcc 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e041      	b.n	80026d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f839 	bl	80026e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f000 fd7d 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e041      	b.n	800278a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f839 	bl	8002792 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f000 fd24 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_IC_Start_IT+0x1e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	e013      	b.n	80027ee <HAL_TIM_IC_Start_IT+0x46>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_IC_Start_IT+0x2e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e00b      	b.n	80027ee <HAL_TIM_IC_Start_IT+0x46>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_IC_Start_IT+0x3e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e003      	b.n	80027ee <HAL_TIM_IC_Start_IT+0x46>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <HAL_TIM_IC_Start_IT+0x58>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e013      	b.n	8002828 <HAL_TIM_IC_Start_IT+0x80>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b04      	cmp	r3, #4
 8002804:	d104      	bne.n	8002810 <HAL_TIM_IC_Start_IT+0x68>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e00b      	b.n	8002828 <HAL_TIM_IC_Start_IT+0x80>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b08      	cmp	r3, #8
 8002814:	d104      	bne.n	8002820 <HAL_TIM_IC_Start_IT+0x78>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e003      	b.n	8002828 <HAL_TIM_IC_Start_IT+0x80>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002826:	b2db      	uxtb	r3, r3
 8002828:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800282a:	7bbb      	ldrb	r3, [r7, #14]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d102      	bne.n	8002836 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002830:	7b7b      	ldrb	r3, [r7, #13]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d001      	beq.n	800283a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0cc      	b.n	80029d4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d104      	bne.n	800284a <HAL_TIM_IC_Start_IT+0xa2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002848:	e013      	b.n	8002872 <HAL_TIM_IC_Start_IT+0xca>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d104      	bne.n	800285a <HAL_TIM_IC_Start_IT+0xb2>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002858:	e00b      	b.n	8002872 <HAL_TIM_IC_Start_IT+0xca>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d104      	bne.n	800286a <HAL_TIM_IC_Start_IT+0xc2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002868:	e003      	b.n	8002872 <HAL_TIM_IC_Start_IT+0xca>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2202      	movs	r2, #2
 800286e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d104      	bne.n	8002882 <HAL_TIM_IC_Start_IT+0xda>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002880:	e013      	b.n	80028aa <HAL_TIM_IC_Start_IT+0x102>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d104      	bne.n	8002892 <HAL_TIM_IC_Start_IT+0xea>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002890:	e00b      	b.n	80028aa <HAL_TIM_IC_Start_IT+0x102>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_IC_Start_IT+0xfa>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028a0:	e003      	b.n	80028aa <HAL_TIM_IC_Start_IT+0x102>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d841      	bhi.n	8002934 <HAL_TIM_IC_Start_IT+0x18c>
 80028b0:	a201      	add	r2, pc, #4	@ (adr r2, 80028b8 <HAL_TIM_IC_Start_IT+0x110>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	080028ed 	.word	0x080028ed
 80028bc:	08002935 	.word	0x08002935
 80028c0:	08002935 	.word	0x08002935
 80028c4:	08002935 	.word	0x08002935
 80028c8:	080028ff 	.word	0x080028ff
 80028cc:	08002935 	.word	0x08002935
 80028d0:	08002935 	.word	0x08002935
 80028d4:	08002935 	.word	0x08002935
 80028d8:	08002911 	.word	0x08002911
 80028dc:	08002935 	.word	0x08002935
 80028e0:	08002935 	.word	0x08002935
 80028e4:	08002935 	.word	0x08002935
 80028e8:	08002923 	.word	0x08002923
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0202 	orr.w	r2, r2, #2
 80028fa:	60da      	str	r2, [r3, #12]
      break;
 80028fc:	e01d      	b.n	800293a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0204 	orr.w	r2, r2, #4
 800290c:	60da      	str	r2, [r3, #12]
      break;
 800290e:	e014      	b.n	800293a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0208 	orr.w	r2, r2, #8
 800291e:	60da      	str	r2, [r3, #12]
      break;
 8002920:	e00b      	b.n	800293a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0210 	orr.w	r2, r2, #16
 8002930:	60da      	str	r2, [r3, #12]
      break;
 8002932:	e002      	b.n	800293a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
      break;
 8002938:	bf00      	nop
  }

  if (status == HAL_OK)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d148      	bne.n	80029d2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2201      	movs	r2, #1
 8002946:	6839      	ldr	r1, [r7, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f001 f8cb 	bl	8003ae4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a22      	ldr	r2, [pc, #136]	@ (80029dc <HAL_TIM_IC_Start_IT+0x234>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <HAL_TIM_IC_Start_IT+0x1f6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002960:	d01d      	beq.n	800299e <HAL_TIM_IC_Start_IT+0x1f6>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1e      	ldr	r2, [pc, #120]	@ (80029e0 <HAL_TIM_IC_Start_IT+0x238>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d018      	beq.n	800299e <HAL_TIM_IC_Start_IT+0x1f6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1c      	ldr	r2, [pc, #112]	@ (80029e4 <HAL_TIM_IC_Start_IT+0x23c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_TIM_IC_Start_IT+0x1f6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1b      	ldr	r2, [pc, #108]	@ (80029e8 <HAL_TIM_IC_Start_IT+0x240>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_TIM_IC_Start_IT+0x1f6>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a19      	ldr	r2, [pc, #100]	@ (80029ec <HAL_TIM_IC_Start_IT+0x244>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_TIM_IC_Start_IT+0x1f6>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a18      	ldr	r2, [pc, #96]	@ (80029f0 <HAL_TIM_IC_Start_IT+0x248>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIM_IC_Start_IT+0x1f6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a16      	ldr	r2, [pc, #88]	@ (80029f4 <HAL_TIM_IC_Start_IT+0x24c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d111      	bne.n	80029c2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d010      	beq.n	80029d2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c0:	e007      	b.n	80029d2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40010400 	.word	0x40010400
 80029f0:	40014000 	.word	0x40014000
 80029f4:	40001800 	.word	0x40001800

080029f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d020      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0202 	mvn.w	r2, #2
 8002a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd fd8c 	bl	8000560 <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fb7a 	bl	8003144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fb81 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d020      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01b      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0204 	mvn.w	r2, #4
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fd fd66 	bl	8000560 <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fb54 	bl	8003144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fb5b 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d020      	beq.n	8002af4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01b      	beq.n	8002af4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0208 	mvn.w	r2, #8
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fd fd40 	bl	8000560 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fb2e 	bl	8003144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fb35 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d020      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01b      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0210 	mvn.w	r2, #16
 8002b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2208      	movs	r2, #8
 8002b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fd fd1a 	bl	8000560 <HAL_TIM_IC_CaptureCallback>
 8002b2c:	e005      	b.n	8002b3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fb08 	bl	8003144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fb0f 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00c      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0201 	mvn.w	r2, #1
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fae6 	bl	8003130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f001 f85a 	bl	8003c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fae0 	bl	800316c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0220 	mvn.w	r2, #32
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f001 f82c 	bl	8003c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e088      	b.n	8002d08 <HAL_TIM_IC_ConfigChannel+0x130>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002c14:	f000 fda2 	bl	800375c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 020c 	bic.w	r2, r2, #12
 8002c26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6999      	ldr	r1, [r3, #24]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	619a      	str	r2, [r3, #24]
 8002c3a:	e060      	b.n	8002cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d11c      	bne.n	8002c7c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002c52:	f000 fe26 	bl	80038a2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002c64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6999      	ldr	r1, [r3, #24]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	021a      	lsls	r2, r3, #8
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	619a      	str	r2, [r3, #24]
 8002c7a:	e040      	b.n	8002cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d11b      	bne.n	8002cba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002c92:	f000 fe73 	bl	800397c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 020c 	bic.w	r2, r2, #12
 8002ca4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	61da      	str	r2, [r3, #28]
 8002cb8:	e021      	b.n	8002cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d11c      	bne.n	8002cfa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002cd0:	f000 fe90 	bl	80039f4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002ce2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69d9      	ldr	r1, [r3, #28]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	021a      	lsls	r2, r3, #8
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	61da      	str	r2, [r3, #28]
 8002cf8:	e001      	b.n	8002cfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e0ae      	b.n	8002e8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	f200 809f 	bhi.w	8002e7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002e7d 	.word	0x08002e7d
 8002d4c:	08002e7d 	.word	0x08002e7d
 8002d50:	08002e7d 	.word	0x08002e7d
 8002d54:	08002db9 	.word	0x08002db9
 8002d58:	08002e7d 	.word	0x08002e7d
 8002d5c:	08002e7d 	.word	0x08002e7d
 8002d60:	08002e7d 	.word	0x08002e7d
 8002d64:	08002dfb 	.word	0x08002dfb
 8002d68:	08002e7d 	.word	0x08002e7d
 8002d6c:	08002e7d 	.word	0x08002e7d
 8002d70:	08002e7d 	.word	0x08002e7d
 8002d74:	08002e3b 	.word	0x08002e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 faaa 	bl	80032d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0208 	orr.w	r2, r2, #8
 8002d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0204 	bic.w	r2, r2, #4
 8002da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6999      	ldr	r1, [r3, #24]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	619a      	str	r2, [r3, #24]
      break;
 8002db6:	e064      	b.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fafa 	bl	80033b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6999      	ldr	r1, [r3, #24]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	021a      	lsls	r2, r3, #8
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	619a      	str	r2, [r3, #24]
      break;
 8002df8:	e043      	b.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fb4f 	bl	80034a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0208 	orr.w	r2, r2, #8
 8002e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0204 	bic.w	r2, r2, #4
 8002e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69d9      	ldr	r1, [r3, #28]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	61da      	str	r2, [r3, #28]
      break;
 8002e38:	e023      	b.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fba3 	bl	800358c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69d9      	ldr	r1, [r3, #28]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	021a      	lsls	r2, r3, #8
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	61da      	str	r2, [r3, #28]
      break;
 8002e7a:	e002      	b.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e0b4      	b.n	800301a <HAL_TIM_ConfigClockSource+0x186>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ee8:	d03e      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0xd4>
 8002eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eee:	f200 8087 	bhi.w	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef6:	f000 8086 	beq.w	8003006 <HAL_TIM_ConfigClockSource+0x172>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002efe:	d87f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b70      	cmp	r3, #112	@ 0x70
 8002f02:	d01a      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0xa6>
 8002f04:	2b70      	cmp	r3, #112	@ 0x70
 8002f06:	d87b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b60      	cmp	r3, #96	@ 0x60
 8002f0a:	d050      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x11a>
 8002f0c:	2b60      	cmp	r3, #96	@ 0x60
 8002f0e:	d877      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b50      	cmp	r3, #80	@ 0x50
 8002f12:	d03c      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0xfa>
 8002f14:	2b50      	cmp	r3, #80	@ 0x50
 8002f16:	d873      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	d058      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x13a>
 8002f1c:	2b40      	cmp	r3, #64	@ 0x40
 8002f1e:	d86f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b30      	cmp	r3, #48	@ 0x30
 8002f22:	d064      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	2b30      	cmp	r3, #48	@ 0x30
 8002f26:	d86b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d060      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d867      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d05c      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d05a      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	e062      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f4a:	f000 fdab 	bl	8003aa4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	609a      	str	r2, [r3, #8]
      break;
 8002f66:	e04f      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f78:	f000 fd94 	bl	8003aa4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f8a:	609a      	str	r2, [r3, #8]
      break;
 8002f8c:	e03c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 fc52 	bl	8003844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2150      	movs	r1, #80	@ 0x50
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fd61 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 8002fac:	e02c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 fcae 	bl	800391c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2160      	movs	r1, #96	@ 0x60
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fd51 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e01c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 fc32 	bl	8003844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2140      	movs	r1, #64	@ 0x40
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fd41 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 8002fec:	e00c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f000 fd38 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 8002ffe:	e003      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e000      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_TIM_SlaveConfigSynchro+0x18>
 8003036:	2302      	movs	r3, #2
 8003038:	e031      	b.n	800309e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 faf3 	bl	8003638 <TIM_SlaveTimer_SetConfig>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e018      	b.n	800309e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800307a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800308a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d831      	bhi.n	8003120 <HAL_TIM_ReadCapturedValue+0x78>
 80030bc:	a201      	add	r2, pc, #4	@ (adr r2, 80030c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	08003121 	.word	0x08003121
 80030cc:	08003121 	.word	0x08003121
 80030d0:	08003121 	.word	0x08003121
 80030d4:	08003103 	.word	0x08003103
 80030d8:	08003121 	.word	0x08003121
 80030dc:	08003121 	.word	0x08003121
 80030e0:	08003121 	.word	0x08003121
 80030e4:	0800310d 	.word	0x0800310d
 80030e8:	08003121 	.word	0x08003121
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003121 	.word	0x08003121
 80030f4:	08003117 	.word	0x08003117
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fe:	60fb      	str	r3, [r7, #12]

      break;
 8003100:	e00f      	b.n	8003122 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003108:	60fb      	str	r3, [r7, #12]

      break;
 800310a:	e00a      	b.n	8003122 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003112:	60fb      	str	r3, [r7, #12]

      break;
 8003114:	e005      	b.n	8003122 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	60fb      	str	r3, [r7, #12]

      break;
 800311e:	e000      	b.n	8003122 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003120:	bf00      	nop
  }

  return tmpreg;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a46      	ldr	r2, [pc, #280]	@ (80032ac <TIM_Base_SetConfig+0x12c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319e:	d00f      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a43      	ldr	r2, [pc, #268]	@ (80032b0 <TIM_Base_SetConfig+0x130>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00b      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a42      	ldr	r2, [pc, #264]	@ (80032b4 <TIM_Base_SetConfig+0x134>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d007      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a41      	ldr	r2, [pc, #260]	@ (80032b8 <TIM_Base_SetConfig+0x138>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a40      	ldr	r2, [pc, #256]	@ (80032bc <TIM_Base_SetConfig+0x13c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d108      	bne.n	80031d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a35      	ldr	r2, [pc, #212]	@ (80032ac <TIM_Base_SetConfig+0x12c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d02b      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e0:	d027      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a32      	ldr	r2, [pc, #200]	@ (80032b0 <TIM_Base_SetConfig+0x130>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d023      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a31      	ldr	r2, [pc, #196]	@ (80032b4 <TIM_Base_SetConfig+0x134>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a30      	ldr	r2, [pc, #192]	@ (80032b8 <TIM_Base_SetConfig+0x138>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01b      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2f      	ldr	r2, [pc, #188]	@ (80032bc <TIM_Base_SetConfig+0x13c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d017      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2e      	ldr	r2, [pc, #184]	@ (80032c0 <TIM_Base_SetConfig+0x140>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2d      	ldr	r2, [pc, #180]	@ (80032c4 <TIM_Base_SetConfig+0x144>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00f      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2c      	ldr	r2, [pc, #176]	@ (80032c8 <TIM_Base_SetConfig+0x148>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00b      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2b      	ldr	r2, [pc, #172]	@ (80032cc <TIM_Base_SetConfig+0x14c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a2a      	ldr	r2, [pc, #168]	@ (80032d0 <TIM_Base_SetConfig+0x150>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <TIM_Base_SetConfig+0x154>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d108      	bne.n	8003244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a10      	ldr	r2, [pc, #64]	@ (80032ac <TIM_Base_SetConfig+0x12c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0xf8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <TIM_Base_SetConfig+0x13c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d103      	bne.n	8003280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f023 0201 	bic.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	611a      	str	r2, [r3, #16]
  }
}
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40010400 	.word	0x40010400
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800
 80032cc:	40001800 	.word	0x40001800
 80032d0:	40001c00 	.word	0x40001c00
 80032d4:	40002000 	.word	0x40002000

080032d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f023 0201 	bic.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0302 	bic.w	r3, r3, #2
 8003320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a20      	ldr	r2, [pc, #128]	@ (80033b0 <TIM_OC1_SetConfig+0xd8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_OC1_SetConfig+0x64>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a1f      	ldr	r2, [pc, #124]	@ (80033b4 <TIM_OC1_SetConfig+0xdc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d10c      	bne.n	8003356 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0308 	bic.w	r3, r3, #8
 8003342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a15      	ldr	r2, [pc, #84]	@ (80033b0 <TIM_OC1_SetConfig+0xd8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_OC1_SetConfig+0x8e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a14      	ldr	r2, [pc, #80]	@ (80033b4 <TIM_OC1_SetConfig+0xdc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40010400 	.word	0x40010400

080033b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 0210 	bic.w	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0320 	bic.w	r3, r3, #32
 8003402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a22      	ldr	r2, [pc, #136]	@ (800349c <TIM_OC2_SetConfig+0xe4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_OC2_SetConfig+0x68>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a21      	ldr	r2, [pc, #132]	@ (80034a0 <TIM_OC2_SetConfig+0xe8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d10d      	bne.n	800343c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800343a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a17      	ldr	r2, [pc, #92]	@ (800349c <TIM_OC2_SetConfig+0xe4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_OC2_SetConfig+0x94>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a16      	ldr	r2, [pc, #88]	@ (80034a0 <TIM_OC2_SetConfig+0xe8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d113      	bne.n	8003474 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800345a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40010400 	.word	0x40010400

080034a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a21      	ldr	r2, [pc, #132]	@ (8003584 <TIM_OC3_SetConfig+0xe0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC3_SetConfig+0x66>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a20      	ldr	r2, [pc, #128]	@ (8003588 <TIM_OC3_SetConfig+0xe4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10d      	bne.n	8003526 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a16      	ldr	r2, [pc, #88]	@ (8003584 <TIM_OC3_SetConfig+0xe0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <TIM_OC3_SetConfig+0x92>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <TIM_OC3_SetConfig+0xe4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d113      	bne.n	800355e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800353c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	621a      	str	r2, [r3, #32]
}
 8003578:	bf00      	nop
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40010000 	.word	0x40010000
 8003588:	40010400 	.word	0x40010400

0800358c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	031b      	lsls	r3, r3, #12
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a12      	ldr	r2, [pc, #72]	@ (8003630 <TIM_OC4_SetConfig+0xa4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_OC4_SetConfig+0x68>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a11      	ldr	r2, [pc, #68]	@ (8003634 <TIM_OC4_SetConfig+0xa8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d109      	bne.n	8003608 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	019b      	lsls	r3, r3, #6
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40010000 	.word	0x40010000
 8003634:	40010400 	.word	0x40010400

08003638 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003654:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f023 0307 	bic.w	r3, r3, #7
 8003666:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b70      	cmp	r3, #112	@ 0x70
 8003680:	d01a      	beq.n	80036b8 <TIM_SlaveTimer_SetConfig+0x80>
 8003682:	2b70      	cmp	r3, #112	@ 0x70
 8003684:	d860      	bhi.n	8003748 <TIM_SlaveTimer_SetConfig+0x110>
 8003686:	2b60      	cmp	r3, #96	@ 0x60
 8003688:	d054      	beq.n	8003734 <TIM_SlaveTimer_SetConfig+0xfc>
 800368a:	2b60      	cmp	r3, #96	@ 0x60
 800368c:	d85c      	bhi.n	8003748 <TIM_SlaveTimer_SetConfig+0x110>
 800368e:	2b50      	cmp	r3, #80	@ 0x50
 8003690:	d046      	beq.n	8003720 <TIM_SlaveTimer_SetConfig+0xe8>
 8003692:	2b50      	cmp	r3, #80	@ 0x50
 8003694:	d858      	bhi.n	8003748 <TIM_SlaveTimer_SetConfig+0x110>
 8003696:	2b40      	cmp	r3, #64	@ 0x40
 8003698:	d019      	beq.n	80036ce <TIM_SlaveTimer_SetConfig+0x96>
 800369a:	2b40      	cmp	r3, #64	@ 0x40
 800369c:	d854      	bhi.n	8003748 <TIM_SlaveTimer_SetConfig+0x110>
 800369e:	2b30      	cmp	r3, #48	@ 0x30
 80036a0:	d055      	beq.n	800374e <TIM_SlaveTimer_SetConfig+0x116>
 80036a2:	2b30      	cmp	r3, #48	@ 0x30
 80036a4:	d850      	bhi.n	8003748 <TIM_SlaveTimer_SetConfig+0x110>
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d051      	beq.n	800374e <TIM_SlaveTimer_SetConfig+0x116>
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d84c      	bhi.n	8003748 <TIM_SlaveTimer_SetConfig+0x110>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d04d      	beq.n	800374e <TIM_SlaveTimer_SetConfig+0x116>
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d04b      	beq.n	800374e <TIM_SlaveTimer_SetConfig+0x116>
 80036b6:	e047      	b.n	8003748 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80036c8:	f000 f9ec 	bl	8003aa4 <TIM_ETR_SetConfig>
      break;
 80036cc:	e040      	b.n	8003750 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d101      	bne.n	80036da <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e03b      	b.n	8003752 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003700:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	4313      	orrs	r3, r2
 800370c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
      break;
 800371e:	e017      	b.n	8003750 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800372c:	461a      	mov	r2, r3
 800372e:	f000 f889 	bl	8003844 <TIM_TI1_ConfigInputStage>
      break;
 8003732:	e00d      	b.n	8003750 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003740:	461a      	mov	r2, r3
 8003742:	f000 f8eb 	bl	800391c <TIM_TI2_ConfigInputStage>
      break;
 8003746:	e003      	b.n	8003750 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
      break;
 800374c:	e000      	b.n	8003750 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800374e:	bf00      	nop
  }

  return status;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f023 0201 	bic.w	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a28      	ldr	r2, [pc, #160]	@ (8003828 <TIM_TI1_SetConfig+0xcc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01b      	beq.n	80037c2 <TIM_TI1_SetConfig+0x66>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003790:	d017      	beq.n	80037c2 <TIM_TI1_SetConfig+0x66>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a25      	ldr	r2, [pc, #148]	@ (800382c <TIM_TI1_SetConfig+0xd0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <TIM_TI1_SetConfig+0x66>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4a24      	ldr	r2, [pc, #144]	@ (8003830 <TIM_TI1_SetConfig+0xd4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00f      	beq.n	80037c2 <TIM_TI1_SetConfig+0x66>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a23      	ldr	r2, [pc, #140]	@ (8003834 <TIM_TI1_SetConfig+0xd8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <TIM_TI1_SetConfig+0x66>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a22      	ldr	r2, [pc, #136]	@ (8003838 <TIM_TI1_SetConfig+0xdc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <TIM_TI1_SetConfig+0x66>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a21      	ldr	r2, [pc, #132]	@ (800383c <TIM_TI1_SetConfig+0xe0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <TIM_TI1_SetConfig+0x66>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a20      	ldr	r2, [pc, #128]	@ (8003840 <TIM_TI1_SetConfig+0xe4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <TIM_TI1_SetConfig+0x6a>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <TIM_TI1_SetConfig+0x6c>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0303 	bic.w	r3, r3, #3
 80037d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e003      	b.n	80037e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f023 030a 	bic.w	r3, r3, #10
 8003800:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f003 030a 	and.w	r3, r3, #10
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40010400 	.word	0x40010400
 800383c:	40014000 	.word	0x40014000
 8003840:	40001800 	.word	0x40001800

08003844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800386e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f023 030a 	bic.w	r3, r3, #10
 8003880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b087      	sub	sp, #28
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f023 0210 	bic.w	r2, r3, #16
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	031b      	lsls	r3, r3, #12
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038f4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f023 0210 	bic.w	r2, r3, #16
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	031b      	lsls	r3, r3, #12
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003958:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f023 0303 	bic.w	r3, r3, #3
 80039a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	621a      	str	r2, [r3, #32]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	031b      	lsls	r3, r3, #12
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003a46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	031b      	lsls	r3, r3, #12
 8003a4c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f043 0307 	orr.w	r3, r3, #7
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	021a      	lsls	r2, r3, #8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2201      	movs	r2, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1a      	ldr	r2, [r3, #32]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	401a      	ands	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e05a      	b.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a21      	ldr	r2, [pc, #132]	@ (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b94:	d01d      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d018      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1a      	ldr	r2, [pc, #104]	@ (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	@ (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10c      	bne.n	8003bec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40010000 	.word	0x40010000
 8003c10:	40000400 	.word	0x40000400
 8003c14:	40000800 	.word	0x40000800
 8003c18:	40000c00 	.word	0x40000c00
 8003c1c:	40010400 	.word	0x40010400
 8003c20:	40014000 	.word	0x40014000
 8003c24:	40001800 	.word	0x40001800

08003c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e042      	b.n	8003ce8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fc ff8e 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	@ 0x24
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fc85 	bl	80045a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b0ba      	sub	sp, #232	@ 0xe8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10f      	bne.n	8003d56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_UART_IRQHandler+0x66>
 8003d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fb69 	bl	8004426 <UART_Receive_IT>
      return;
 8003d54:	e25b      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80de 	beq.w	8003f1c <HAL_UART_IRQHandler+0x22c>
 8003d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80d1 	beq.w	8003f1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_UART_IRQHandler+0xae>
 8003d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xd2>
 8003daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_UART_IRQHandler+0xf6>
 8003dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d011      	beq.n	8003e16 <HAL_UART_IRQHandler+0x126>
 8003df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f043 0208 	orr.w	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 81f2 	beq.w	8004204 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_UART_IRQHandler+0x14e>
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 faf4 	bl	8004426 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e48:	2b40      	cmp	r3, #64	@ 0x40
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <HAL_UART_IRQHandler+0x17a>
 8003e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d04f      	beq.n	8003f0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9fc 	bl	8004268 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d141      	bne.n	8003f02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3314      	adds	r3, #20
 8003e84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1d9      	bne.n	8003e7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d013      	beq.n	8003efa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80040d0 <HAL_UART_IRQHandler+0x3e0>)
 8003ed8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd fb0e 	bl	8001500 <HAL_DMA_Abort_IT>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	e00e      	b.n	8003f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f99e 	bl	800423c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e00a      	b.n	8003f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f99a 	bl	800423c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	e006      	b.n	8003f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f996 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f16:	e175      	b.n	8004204 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	bf00      	nop
    return;
 8003f1a:	e173      	b.n	8004204 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	f040 814f 	bne.w	80041c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8148 	beq.w	80041c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8141 	beq.w	80041c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f62:	2b40      	cmp	r3, #64	@ 0x40
 8003f64:	f040 80b6 	bne.w	80040d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8145 	beq.w	8004208 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f86:	429a      	cmp	r2, r3
 8003f88:	f080 813e 	bcs.w	8004208 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f9e:	f000 8088 	beq.w	80040b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003fce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1d9      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3314      	adds	r3, #20
 8003ff4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ffe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004012:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004016:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800401a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004024:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e1      	bne.n	8003fee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3314      	adds	r3, #20
 8004030:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800403a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800403c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3314      	adds	r3, #20
 800404a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800404e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004050:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004054:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800405c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e3      	bne.n	800402a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004082:	f023 0310 	bic.w	r3, r3, #16
 8004086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004094:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004096:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800409a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e3      	bne.n	8004070 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fd f9b7 	bl	8001420 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f8c1 	bl	8004250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040ce:	e09b      	b.n	8004208 <HAL_UART_IRQHandler+0x518>
 80040d0:	0800432f 	.word	0x0800432f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 808e 	beq.w	800420c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8089 	beq.w	800420c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800410a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004110:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800411e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004120:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004124:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800412c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e3      	bne.n	80040fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	623b      	str	r3, [r7, #32]
   return(result);
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004156:	633a      	str	r2, [r7, #48]	@ 0x30
 8004158:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800415c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e3      	bne.n	8004132 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	60fb      	str	r3, [r7, #12]
   return(result);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0310 	bic.w	r3, r3, #16
 800418e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800419c:	61fa      	str	r2, [r7, #28]
 800419e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	617b      	str	r3, [r7, #20]
   return(result);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e3      	bne.n	8004178 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041ba:	4619      	mov	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f847 	bl	8004250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041c2:	e023      	b.n	800420c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_UART_IRQHandler+0x4f4>
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8ba 	bl	8004356 <UART_Transmit_IT>
    return;
 80041e2:	e014      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <HAL_UART_IRQHandler+0x51e>
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f8fa 	bl	80043f6 <UART_EndTransmit_IT>
    return;
 8004202:	e004      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
    return;
 8004204:	bf00      	nop
 8004206:	e002      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
      return;
 8004208:	bf00      	nop
 800420a:	e000      	b.n	800420e <HAL_UART_IRQHandler+0x51e>
      return;
 800420c:	bf00      	nop
  }
}
 800420e:	37e8      	adds	r7, #232	@ 0xe8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b095      	sub	sp, #84	@ 0x54
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004290:	643a      	str	r2, [r7, #64]	@ 0x40
 8004292:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3314      	adds	r3, #20
 80042c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d119      	bne.n	8004314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004300:	61ba      	str	r2, [r7, #24]
 8004302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	613b      	str	r3, [r7, #16]
   return(result);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004322:	bf00      	nop
 8004324:	3754      	adds	r7, #84	@ 0x54
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ff77 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b21      	cmp	r3, #33	@ 0x21
 8004368:	d13e      	bne.n	80043e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004372:	d114      	bne.n	800439e <UART_Transmit_IT+0x48>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d110      	bne.n	800439e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004390:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	1c9a      	adds	r2, r3, #2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	621a      	str	r2, [r3, #32]
 800439c:	e008      	b.n	80043b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	1c59      	adds	r1, r3, #1
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6211      	str	r1, [r2, #32]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4619      	mov	r1, r3
 80043be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e000      	b.n	80043ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e8:	2302      	movs	r3, #2
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800440c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fefc 	bl	8004214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b08c      	sub	sp, #48	@ 0x30
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b22      	cmp	r3, #34	@ 0x22
 8004438:	f040 80ae 	bne.w	8004598 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004444:	d117      	bne.n	8004476 <UART_Receive_IT+0x50>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d113      	bne.n	8004476 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004464:	b29a      	uxth	r2, r3
 8004466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004468:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	@ 0x28
 8004474:	e026      	b.n	80044c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004488:	d007      	beq.n	800449a <UART_Receive_IT+0x74>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <UART_Receive_IT+0x82>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e008      	b.n	80044ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4619      	mov	r1, r3
 80044d2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d15d      	bne.n	8004594 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0220 	bic.w	r2, r2, #32
 80044e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	2b01      	cmp	r3, #1
 800451c:	d135      	bne.n	800458a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	613b      	str	r3, [r7, #16]
   return(result);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f023 0310 	bic.w	r3, r3, #16
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004544:	623a      	str	r2, [r7, #32]
 8004546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	69f9      	ldr	r1, [r7, #28]
 800454a:	6a3a      	ldr	r2, [r7, #32]
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	61bb      	str	r3, [r7, #24]
   return(result);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b10      	cmp	r3, #16
 8004564:	d10a      	bne.n	800457c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff fe64 	bl	8004250 <HAL_UARTEx_RxEventCallback>
 8004588:	e002      	b.n	8004590 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff fe4c 	bl	8004228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e002      	b.n	800459a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3730      	adds	r7, #48	@ 0x30
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a8:	b0c0      	sub	sp, #256	@ 0x100
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	68d9      	ldr	r1, [r3, #12]
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	ea40 0301 	orr.w	r3, r0, r1
 80045cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80045fc:	f021 010c 	bic.w	r1, r1, #12
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800460a:	430b      	orrs	r3, r1
 800460c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461e:	6999      	ldr	r1, [r3, #24]
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	ea40 0301 	orr.w	r3, r0, r1
 800462a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b8f      	ldr	r3, [pc, #572]	@ (8004870 <UART_SetConfig+0x2cc>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d005      	beq.n	8004644 <UART_SetConfig+0xa0>
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b8d      	ldr	r3, [pc, #564]	@ (8004874 <UART_SetConfig+0x2d0>)
 8004640:	429a      	cmp	r2, r3
 8004642:	d104      	bne.n	800464e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004644:	f7fd ff9a 	bl	800257c <HAL_RCC_GetPCLK2Freq>
 8004648:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800464c:	e003      	b.n	8004656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800464e:	f7fd ff81 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8004652:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004660:	f040 810c 	bne.w	800487c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800466e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004676:	4622      	mov	r2, r4
 8004678:	462b      	mov	r3, r5
 800467a:	1891      	adds	r1, r2, r2
 800467c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800467e:	415b      	adcs	r3, r3
 8004680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004686:	4621      	mov	r1, r4
 8004688:	eb12 0801 	adds.w	r8, r2, r1
 800468c:	4629      	mov	r1, r5
 800468e:	eb43 0901 	adc.w	r9, r3, r1
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800469e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046a6:	4690      	mov	r8, r2
 80046a8:	4699      	mov	r9, r3
 80046aa:	4623      	mov	r3, r4
 80046ac:	eb18 0303 	adds.w	r3, r8, r3
 80046b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046b4:	462b      	mov	r3, r5
 80046b6:	eb49 0303 	adc.w	r3, r9, r3
 80046ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046d2:	460b      	mov	r3, r1
 80046d4:	18db      	adds	r3, r3, r3
 80046d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046d8:	4613      	mov	r3, r2
 80046da:	eb42 0303 	adc.w	r3, r2, r3
 80046de:	657b      	str	r3, [r7, #84]	@ 0x54
 80046e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046e8:	f7fb fdc2 	bl	8000270 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4b61      	ldr	r3, [pc, #388]	@ (8004878 <UART_SetConfig+0x2d4>)
 80046f2:	fba3 2302 	umull	r2, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	011c      	lsls	r4, r3, #4
 80046fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004704:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800470c:	4642      	mov	r2, r8
 800470e:	464b      	mov	r3, r9
 8004710:	1891      	adds	r1, r2, r2
 8004712:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004714:	415b      	adcs	r3, r3
 8004716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800471c:	4641      	mov	r1, r8
 800471e:	eb12 0a01 	adds.w	sl, r2, r1
 8004722:	4649      	mov	r1, r9
 8004724:	eb43 0b01 	adc.w	fp, r3, r1
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800473c:	4692      	mov	sl, r2
 800473e:	469b      	mov	fp, r3
 8004740:	4643      	mov	r3, r8
 8004742:	eb1a 0303 	adds.w	r3, sl, r3
 8004746:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800474a:	464b      	mov	r3, r9
 800474c:	eb4b 0303 	adc.w	r3, fp, r3
 8004750:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004760:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004768:	460b      	mov	r3, r1
 800476a:	18db      	adds	r3, r3, r3
 800476c:	643b      	str	r3, [r7, #64]	@ 0x40
 800476e:	4613      	mov	r3, r2
 8004770:	eb42 0303 	adc.w	r3, r2, r3
 8004774:	647b      	str	r3, [r7, #68]	@ 0x44
 8004776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800477a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800477e:	f7fb fd77 	bl	8000270 <__aeabi_uldivmod>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4611      	mov	r1, r2
 8004788:	4b3b      	ldr	r3, [pc, #236]	@ (8004878 <UART_SetConfig+0x2d4>)
 800478a:	fba3 2301 	umull	r2, r3, r3, r1
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2264      	movs	r2, #100	@ 0x64
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	1acb      	subs	r3, r1, r3
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800479e:	4b36      	ldr	r3, [pc, #216]	@ (8004878 <UART_SetConfig+0x2d4>)
 80047a0:	fba3 2302 	umull	r2, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047ac:	441c      	add	r4, r3
 80047ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	1891      	adds	r1, r2, r2
 80047c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047c8:	415b      	adcs	r3, r3
 80047ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047d0:	4641      	mov	r1, r8
 80047d2:	1851      	adds	r1, r2, r1
 80047d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80047d6:	4649      	mov	r1, r9
 80047d8:	414b      	adcs	r3, r1
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047e8:	4659      	mov	r1, fp
 80047ea:	00cb      	lsls	r3, r1, #3
 80047ec:	4651      	mov	r1, sl
 80047ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f2:	4651      	mov	r1, sl
 80047f4:	00ca      	lsls	r2, r1, #3
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	4603      	mov	r3, r0
 80047fc:	4642      	mov	r2, r8
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004804:	464b      	mov	r3, r9
 8004806:	460a      	mov	r2, r1
 8004808:	eb42 0303 	adc.w	r3, r2, r3
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800481c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004824:	460b      	mov	r3, r1
 8004826:	18db      	adds	r3, r3, r3
 8004828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800482a:	4613      	mov	r3, r2
 800482c:	eb42 0303 	adc.w	r3, r2, r3
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800483a:	f7fb fd19 	bl	8000270 <__aeabi_uldivmod>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <UART_SetConfig+0x2d4>)
 8004844:	fba3 1302 	umull	r1, r3, r3, r2
 8004848:	095b      	lsrs	r3, r3, #5
 800484a:	2164      	movs	r1, #100	@ 0x64
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	3332      	adds	r3, #50	@ 0x32
 8004856:	4a08      	ldr	r2, [pc, #32]	@ (8004878 <UART_SetConfig+0x2d4>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	f003 0207 	and.w	r2, r3, #7
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4422      	add	r2, r4
 800486a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800486c:	e106      	b.n	8004a7c <UART_SetConfig+0x4d8>
 800486e:	bf00      	nop
 8004870:	40011000 	.word	0x40011000
 8004874:	40011400 	.word	0x40011400
 8004878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800487c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004880:	2200      	movs	r2, #0
 8004882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004886:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800488a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800488e:	4642      	mov	r2, r8
 8004890:	464b      	mov	r3, r9
 8004892:	1891      	adds	r1, r2, r2
 8004894:	6239      	str	r1, [r7, #32]
 8004896:	415b      	adcs	r3, r3
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
 800489a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800489e:	4641      	mov	r1, r8
 80048a0:	1854      	adds	r4, r2, r1
 80048a2:	4649      	mov	r1, r9
 80048a4:	eb43 0501 	adc.w	r5, r3, r1
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	00eb      	lsls	r3, r5, #3
 80048b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b6:	00e2      	lsls	r2, r4, #3
 80048b8:	4614      	mov	r4, r2
 80048ba:	461d      	mov	r5, r3
 80048bc:	4643      	mov	r3, r8
 80048be:	18e3      	adds	r3, r4, r3
 80048c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048c4:	464b      	mov	r3, r9
 80048c6:	eb45 0303 	adc.w	r3, r5, r3
 80048ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048ea:	4629      	mov	r1, r5
 80048ec:	008b      	lsls	r3, r1, #2
 80048ee:	4621      	mov	r1, r4
 80048f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f4:	4621      	mov	r1, r4
 80048f6:	008a      	lsls	r2, r1, #2
 80048f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80048fc:	f7fb fcb8 	bl	8000270 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4b60      	ldr	r3, [pc, #384]	@ (8004a88 <UART_SetConfig+0x4e4>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	011c      	lsls	r4, r3, #4
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004918:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800491c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	1891      	adds	r1, r2, r2
 8004926:	61b9      	str	r1, [r7, #24]
 8004928:	415b      	adcs	r3, r3
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004930:	4641      	mov	r1, r8
 8004932:	1851      	adds	r1, r2, r1
 8004934:	6139      	str	r1, [r7, #16]
 8004936:	4649      	mov	r1, r9
 8004938:	414b      	adcs	r3, r1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004948:	4659      	mov	r1, fp
 800494a:	00cb      	lsls	r3, r1, #3
 800494c:	4651      	mov	r1, sl
 800494e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004952:	4651      	mov	r1, sl
 8004954:	00ca      	lsls	r2, r1, #3
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	4603      	mov	r3, r0
 800495c:	4642      	mov	r2, r8
 800495e:	189b      	adds	r3, r3, r2
 8004960:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004964:	464b      	mov	r3, r9
 8004966:	460a      	mov	r2, r1
 8004968:	eb42 0303 	adc.w	r3, r2, r3
 800496c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	67bb      	str	r3, [r7, #120]	@ 0x78
 800497a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004988:	4649      	mov	r1, r9
 800498a:	008b      	lsls	r3, r1, #2
 800498c:	4641      	mov	r1, r8
 800498e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004992:	4641      	mov	r1, r8
 8004994:	008a      	lsls	r2, r1, #2
 8004996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800499a:	f7fb fc69 	bl	8000270 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	4b38      	ldr	r3, [pc, #224]	@ (8004a88 <UART_SetConfig+0x4e4>)
 80049a6:	fba3 2301 	umull	r2, r3, r3, r1
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2264      	movs	r2, #100	@ 0x64
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	1acb      	subs	r3, r1, r3
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	3332      	adds	r3, #50	@ 0x32
 80049b8:	4a33      	ldr	r2, [pc, #204]	@ (8004a88 <UART_SetConfig+0x4e4>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049c4:	441c      	add	r4, r3
 80049c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ca:	2200      	movs	r2, #0
 80049cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80049ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80049d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	1891      	adds	r1, r2, r2
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	415b      	adcs	r3, r3
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e4:	4641      	mov	r1, r8
 80049e6:	1851      	adds	r1, r2, r1
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	4649      	mov	r1, r9
 80049ec:	414b      	adcs	r3, r1
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049fc:	4659      	mov	r1, fp
 80049fe:	00cb      	lsls	r3, r1, #3
 8004a00:	4651      	mov	r1, sl
 8004a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a06:	4651      	mov	r1, sl
 8004a08:	00ca      	lsls	r2, r1, #3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4642      	mov	r2, r8
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a16:	464b      	mov	r3, r9
 8004a18:	460a      	mov	r2, r1
 8004a1a:	eb42 0303 	adc.w	r3, r2, r3
 8004a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a38:	4649      	mov	r1, r9
 8004a3a:	008b      	lsls	r3, r1, #2
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a42:	4641      	mov	r1, r8
 8004a44:	008a      	lsls	r2, r1, #2
 8004a46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a4a:	f7fb fc11 	bl	8000270 <__aeabi_uldivmod>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4b0d      	ldr	r3, [pc, #52]	@ (8004a88 <UART_SetConfig+0x4e4>)
 8004a54:	fba3 1302 	umull	r1, r3, r3, r2
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	2164      	movs	r1, #100	@ 0x64
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	3332      	adds	r3, #50	@ 0x32
 8004a66:	4a08      	ldr	r2, [pc, #32]	@ (8004a88 <UART_SetConfig+0x4e4>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	f003 020f 	and.w	r2, r3, #15
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4422      	add	r2, r4
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a82:	46bd      	mov	sp, r7
 8004a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a88:	51eb851f 	.word	0x51eb851f

08004a8c <std>:
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	b510      	push	{r4, lr}
 8004a90:	4604      	mov	r4, r0
 8004a92:	e9c0 3300 	strd	r3, r3, [r0]
 8004a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a9a:	6083      	str	r3, [r0, #8]
 8004a9c:	8181      	strh	r1, [r0, #12]
 8004a9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004aa0:	81c2      	strh	r2, [r0, #14]
 8004aa2:	6183      	str	r3, [r0, #24]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	305c      	adds	r0, #92	@ 0x5c
 8004aaa:	f000 f906 	bl	8004cba <memset>
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <std+0x58>)
 8004ab0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae8 <std+0x5c>)
 8004ab4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8004aec <std+0x60>)
 8004ab8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004aba:	4b0d      	ldr	r3, [pc, #52]	@ (8004af0 <std+0x64>)
 8004abc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004abe:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <std+0x68>)
 8004ac0:	6224      	str	r4, [r4, #32]
 8004ac2:	429c      	cmp	r4, r3
 8004ac4:	d006      	beq.n	8004ad4 <std+0x48>
 8004ac6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004aca:	4294      	cmp	r4, r2
 8004acc:	d002      	beq.n	8004ad4 <std+0x48>
 8004ace:	33d0      	adds	r3, #208	@ 0xd0
 8004ad0:	429c      	cmp	r4, r3
 8004ad2:	d105      	bne.n	8004ae0 <std+0x54>
 8004ad4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004adc:	f000 b966 	b.w	8004dac <__retarget_lock_init_recursive>
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	bf00      	nop
 8004ae4:	08004c35 	.word	0x08004c35
 8004ae8:	08004c57 	.word	0x08004c57
 8004aec:	08004c8f 	.word	0x08004c8f
 8004af0:	08004cb3 	.word	0x08004cb3
 8004af4:	20000230 	.word	0x20000230

08004af8 <stdio_exit_handler>:
 8004af8:	4a02      	ldr	r2, [pc, #8]	@ (8004b04 <stdio_exit_handler+0xc>)
 8004afa:	4903      	ldr	r1, [pc, #12]	@ (8004b08 <stdio_exit_handler+0x10>)
 8004afc:	4803      	ldr	r0, [pc, #12]	@ (8004b0c <stdio_exit_handler+0x14>)
 8004afe:	f000 b869 	b.w	8004bd4 <_fwalk_sglue>
 8004b02:	bf00      	nop
 8004b04:	2000000c 	.word	0x2000000c
 8004b08:	0800564d 	.word	0x0800564d
 8004b0c:	2000001c 	.word	0x2000001c

08004b10 <cleanup_stdio>:
 8004b10:	6841      	ldr	r1, [r0, #4]
 8004b12:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <cleanup_stdio+0x34>)
 8004b14:	4299      	cmp	r1, r3
 8004b16:	b510      	push	{r4, lr}
 8004b18:	4604      	mov	r4, r0
 8004b1a:	d001      	beq.n	8004b20 <cleanup_stdio+0x10>
 8004b1c:	f000 fd96 	bl	800564c <_fflush_r>
 8004b20:	68a1      	ldr	r1, [r4, #8]
 8004b22:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <cleanup_stdio+0x38>)
 8004b24:	4299      	cmp	r1, r3
 8004b26:	d002      	beq.n	8004b2e <cleanup_stdio+0x1e>
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 fd8f 	bl	800564c <_fflush_r>
 8004b2e:	68e1      	ldr	r1, [r4, #12]
 8004b30:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <cleanup_stdio+0x3c>)
 8004b32:	4299      	cmp	r1, r3
 8004b34:	d004      	beq.n	8004b40 <cleanup_stdio+0x30>
 8004b36:	4620      	mov	r0, r4
 8004b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b3c:	f000 bd86 	b.w	800564c <_fflush_r>
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	bf00      	nop
 8004b44:	20000230 	.word	0x20000230
 8004b48:	20000298 	.word	0x20000298
 8004b4c:	20000300 	.word	0x20000300

08004b50 <global_stdio_init.part.0>:
 8004b50:	b510      	push	{r4, lr}
 8004b52:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <global_stdio_init.part.0+0x30>)
 8004b54:	4c0b      	ldr	r4, [pc, #44]	@ (8004b84 <global_stdio_init.part.0+0x34>)
 8004b56:	4a0c      	ldr	r2, [pc, #48]	@ (8004b88 <global_stdio_init.part.0+0x38>)
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2104      	movs	r1, #4
 8004b60:	f7ff ff94 	bl	8004a8c <std>
 8004b64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b68:	2201      	movs	r2, #1
 8004b6a:	2109      	movs	r1, #9
 8004b6c:	f7ff ff8e 	bl	8004a8c <std>
 8004b70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b74:	2202      	movs	r2, #2
 8004b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b7a:	2112      	movs	r1, #18
 8004b7c:	f7ff bf86 	b.w	8004a8c <std>
 8004b80:	20000368 	.word	0x20000368
 8004b84:	20000230 	.word	0x20000230
 8004b88:	08004af9 	.word	0x08004af9

08004b8c <__sfp_lock_acquire>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	@ (8004b94 <__sfp_lock_acquire+0x8>)
 8004b8e:	f000 b90e 	b.w	8004dae <__retarget_lock_acquire_recursive>
 8004b92:	bf00      	nop
 8004b94:	20000371 	.word	0x20000371

08004b98 <__sfp_lock_release>:
 8004b98:	4801      	ldr	r0, [pc, #4]	@ (8004ba0 <__sfp_lock_release+0x8>)
 8004b9a:	f000 b909 	b.w	8004db0 <__retarget_lock_release_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	20000371 	.word	0x20000371

08004ba4 <__sinit>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	f7ff fff0 	bl	8004b8c <__sfp_lock_acquire>
 8004bac:	6a23      	ldr	r3, [r4, #32]
 8004bae:	b11b      	cbz	r3, 8004bb8 <__sinit+0x14>
 8004bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb4:	f7ff bff0 	b.w	8004b98 <__sfp_lock_release>
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <__sinit+0x28>)
 8004bba:	6223      	str	r3, [r4, #32]
 8004bbc:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <__sinit+0x2c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f5      	bne.n	8004bb0 <__sinit+0xc>
 8004bc4:	f7ff ffc4 	bl	8004b50 <global_stdio_init.part.0>
 8004bc8:	e7f2      	b.n	8004bb0 <__sinit+0xc>
 8004bca:	bf00      	nop
 8004bcc:	08004b11 	.word	0x08004b11
 8004bd0:	20000368 	.word	0x20000368

08004bd4 <_fwalk_sglue>:
 8004bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd8:	4607      	mov	r7, r0
 8004bda:	4688      	mov	r8, r1
 8004bdc:	4614      	mov	r4, r2
 8004bde:	2600      	movs	r6, #0
 8004be0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004be4:	f1b9 0901 	subs.w	r9, r9, #1
 8004be8:	d505      	bpl.n	8004bf6 <_fwalk_sglue+0x22>
 8004bea:	6824      	ldr	r4, [r4, #0]
 8004bec:	2c00      	cmp	r4, #0
 8004bee:	d1f7      	bne.n	8004be0 <_fwalk_sglue+0xc>
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bf6:	89ab      	ldrh	r3, [r5, #12]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d907      	bls.n	8004c0c <_fwalk_sglue+0x38>
 8004bfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c00:	3301      	adds	r3, #1
 8004c02:	d003      	beq.n	8004c0c <_fwalk_sglue+0x38>
 8004c04:	4629      	mov	r1, r5
 8004c06:	4638      	mov	r0, r7
 8004c08:	47c0      	blx	r8
 8004c0a:	4306      	orrs	r6, r0
 8004c0c:	3568      	adds	r5, #104	@ 0x68
 8004c0e:	e7e9      	b.n	8004be4 <_fwalk_sglue+0x10>

08004c10 <iprintf>:
 8004c10:	b40f      	push	{r0, r1, r2, r3}
 8004c12:	b507      	push	{r0, r1, r2, lr}
 8004c14:	4906      	ldr	r1, [pc, #24]	@ (8004c30 <iprintf+0x20>)
 8004c16:	ab04      	add	r3, sp, #16
 8004c18:	6808      	ldr	r0, [r1, #0]
 8004c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c1e:	6881      	ldr	r1, [r0, #8]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	f000 f9e9 	bl	8004ff8 <_vfiprintf_r>
 8004c26:	b003      	add	sp, #12
 8004c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c2c:	b004      	add	sp, #16
 8004c2e:	4770      	bx	lr
 8004c30:	20000018 	.word	0x20000018

08004c34 <__sread>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	460c      	mov	r4, r1
 8004c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3c:	f000 f868 	bl	8004d10 <_read_r>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	bfab      	itete	ge
 8004c44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c46:	89a3      	ldrhlt	r3, [r4, #12]
 8004c48:	181b      	addge	r3, r3, r0
 8004c4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c4e:	bfac      	ite	ge
 8004c50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c52:	81a3      	strhlt	r3, [r4, #12]
 8004c54:	bd10      	pop	{r4, pc}

08004c56 <__swrite>:
 8004c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5a:	461f      	mov	r7, r3
 8004c5c:	898b      	ldrh	r3, [r1, #12]
 8004c5e:	05db      	lsls	r3, r3, #23
 8004c60:	4605      	mov	r5, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	4616      	mov	r6, r2
 8004c66:	d505      	bpl.n	8004c74 <__swrite+0x1e>
 8004c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f000 f83c 	bl	8004cec <_lseek_r>
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c7e:	81a3      	strh	r3, [r4, #12]
 8004c80:	4632      	mov	r2, r6
 8004c82:	463b      	mov	r3, r7
 8004c84:	4628      	mov	r0, r5
 8004c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8a:	f000 b853 	b.w	8004d34 <_write_r>

08004c8e <__sseek>:
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	460c      	mov	r4, r1
 8004c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c96:	f000 f829 	bl	8004cec <_lseek_r>
 8004c9a:	1c43      	adds	r3, r0, #1
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	bf15      	itete	ne
 8004ca0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ca2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ca6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004caa:	81a3      	strheq	r3, [r4, #12]
 8004cac:	bf18      	it	ne
 8004cae:	81a3      	strhne	r3, [r4, #12]
 8004cb0:	bd10      	pop	{r4, pc}

08004cb2 <__sclose>:
 8004cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb6:	f000 b809 	b.w	8004ccc <_close_r>

08004cba <memset>:
 8004cba:	4402      	add	r2, r0
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d100      	bne.n	8004cc4 <memset+0xa>
 8004cc2:	4770      	bx	lr
 8004cc4:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc8:	e7f9      	b.n	8004cbe <memset+0x4>
	...

08004ccc <_close_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d06      	ldr	r5, [pc, #24]	@ (8004ce8 <_close_r+0x1c>)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	602b      	str	r3, [r5, #0]
 8004cd8:	f7fc f8a5 	bl	8000e26 <_close>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d102      	bne.n	8004ce6 <_close_r+0x1a>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	b103      	cbz	r3, 8004ce6 <_close_r+0x1a>
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	2000036c 	.word	0x2000036c

08004cec <_lseek_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4d07      	ldr	r5, [pc, #28]	@ (8004d0c <_lseek_r+0x20>)
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	4608      	mov	r0, r1
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	602a      	str	r2, [r5, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f7fc f8ba 	bl	8000e74 <_lseek>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d102      	bne.n	8004d0a <_lseek_r+0x1e>
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	b103      	cbz	r3, 8004d0a <_lseek_r+0x1e>
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}
 8004d0c:	2000036c 	.word	0x2000036c

08004d10 <_read_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4d07      	ldr	r5, [pc, #28]	@ (8004d30 <_read_r+0x20>)
 8004d14:	4604      	mov	r4, r0
 8004d16:	4608      	mov	r0, r1
 8004d18:	4611      	mov	r1, r2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	602a      	str	r2, [r5, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f7fc f848 	bl	8000db4 <_read>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_read_r+0x1e>
 8004d28:	682b      	ldr	r3, [r5, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_read_r+0x1e>
 8004d2c:	6023      	str	r3, [r4, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	2000036c 	.word	0x2000036c

08004d34 <_write_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	4d07      	ldr	r5, [pc, #28]	@ (8004d54 <_write_r+0x20>)
 8004d38:	4604      	mov	r4, r0
 8004d3a:	4608      	mov	r0, r1
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	602a      	str	r2, [r5, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f7fc f853 	bl	8000dee <_write>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d102      	bne.n	8004d52 <_write_r+0x1e>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	b103      	cbz	r3, 8004d52 <_write_r+0x1e>
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	bd38      	pop	{r3, r4, r5, pc}
 8004d54:	2000036c 	.word	0x2000036c

08004d58 <__errno>:
 8004d58:	4b01      	ldr	r3, [pc, #4]	@ (8004d60 <__errno+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000018 	.word	0x20000018

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	4d0d      	ldr	r5, [pc, #52]	@ (8004d9c <__libc_init_array+0x38>)
 8004d68:	4c0d      	ldr	r4, [pc, #52]	@ (8004da0 <__libc_init_array+0x3c>)
 8004d6a:	1b64      	subs	r4, r4, r5
 8004d6c:	10a4      	asrs	r4, r4, #2
 8004d6e:	2600      	movs	r6, #0
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	4d0b      	ldr	r5, [pc, #44]	@ (8004da4 <__libc_init_array+0x40>)
 8004d76:	4c0c      	ldr	r4, [pc, #48]	@ (8004da8 <__libc_init_array+0x44>)
 8004d78:	f000 fdb8 	bl	80058ec <_init>
 8004d7c:	1b64      	subs	r4, r4, r5
 8004d7e:	10a4      	asrs	r4, r4, #2
 8004d80:	2600      	movs	r6, #0
 8004d82:	42a6      	cmp	r6, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8c:	4798      	blx	r3
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d96:	4798      	blx	r3
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	08005990 	.word	0x08005990
 8004da0:	08005990 	.word	0x08005990
 8004da4:	08005990 	.word	0x08005990
 8004da8:	08005994 	.word	0x08005994

08004dac <__retarget_lock_init_recursive>:
 8004dac:	4770      	bx	lr

08004dae <__retarget_lock_acquire_recursive>:
 8004dae:	4770      	bx	lr

08004db0 <__retarget_lock_release_recursive>:
 8004db0:	4770      	bx	lr
	...

08004db4 <_free_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4605      	mov	r5, r0
 8004db8:	2900      	cmp	r1, #0
 8004dba:	d041      	beq.n	8004e40 <_free_r+0x8c>
 8004dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc0:	1f0c      	subs	r4, r1, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bfb8      	it	lt
 8004dc6:	18e4      	addlt	r4, r4, r3
 8004dc8:	f000 f8e0 	bl	8004f8c <__malloc_lock>
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <_free_r+0x90>)
 8004dce:	6813      	ldr	r3, [r2, #0]
 8004dd0:	b933      	cbnz	r3, 8004de0 <_free_r+0x2c>
 8004dd2:	6063      	str	r3, [r4, #4]
 8004dd4:	6014      	str	r4, [r2, #0]
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ddc:	f000 b8dc 	b.w	8004f98 <__malloc_unlock>
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	d908      	bls.n	8004df6 <_free_r+0x42>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	1821      	adds	r1, r4, r0
 8004de8:	428b      	cmp	r3, r1
 8004dea:	bf01      	itttt	eq
 8004dec:	6819      	ldreq	r1, [r3, #0]
 8004dee:	685b      	ldreq	r3, [r3, #4]
 8004df0:	1809      	addeq	r1, r1, r0
 8004df2:	6021      	streq	r1, [r4, #0]
 8004df4:	e7ed      	b.n	8004dd2 <_free_r+0x1e>
 8004df6:	461a      	mov	r2, r3
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b10b      	cbz	r3, 8004e00 <_free_r+0x4c>
 8004dfc:	42a3      	cmp	r3, r4
 8004dfe:	d9fa      	bls.n	8004df6 <_free_r+0x42>
 8004e00:	6811      	ldr	r1, [r2, #0]
 8004e02:	1850      	adds	r0, r2, r1
 8004e04:	42a0      	cmp	r0, r4
 8004e06:	d10b      	bne.n	8004e20 <_free_r+0x6c>
 8004e08:	6820      	ldr	r0, [r4, #0]
 8004e0a:	4401      	add	r1, r0
 8004e0c:	1850      	adds	r0, r2, r1
 8004e0e:	4283      	cmp	r3, r0
 8004e10:	6011      	str	r1, [r2, #0]
 8004e12:	d1e0      	bne.n	8004dd6 <_free_r+0x22>
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	6053      	str	r3, [r2, #4]
 8004e1a:	4408      	add	r0, r1
 8004e1c:	6010      	str	r0, [r2, #0]
 8004e1e:	e7da      	b.n	8004dd6 <_free_r+0x22>
 8004e20:	d902      	bls.n	8004e28 <_free_r+0x74>
 8004e22:	230c      	movs	r3, #12
 8004e24:	602b      	str	r3, [r5, #0]
 8004e26:	e7d6      	b.n	8004dd6 <_free_r+0x22>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	1821      	adds	r1, r4, r0
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	bf04      	itt	eq
 8004e30:	6819      	ldreq	r1, [r3, #0]
 8004e32:	685b      	ldreq	r3, [r3, #4]
 8004e34:	6063      	str	r3, [r4, #4]
 8004e36:	bf04      	itt	eq
 8004e38:	1809      	addeq	r1, r1, r0
 8004e3a:	6021      	streq	r1, [r4, #0]
 8004e3c:	6054      	str	r4, [r2, #4]
 8004e3e:	e7ca      	b.n	8004dd6 <_free_r+0x22>
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	20000378 	.word	0x20000378

08004e48 <sbrk_aligned>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8004e88 <sbrk_aligned+0x40>)
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	6831      	ldr	r1, [r6, #0]
 8004e50:	4605      	mov	r5, r0
 8004e52:	b911      	cbnz	r1, 8004e5a <sbrk_aligned+0x12>
 8004e54:	f000 fcb6 	bl	80057c4 <_sbrk_r>
 8004e58:	6030      	str	r0, [r6, #0]
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	f000 fcb1 	bl	80057c4 <_sbrk_r>
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	d103      	bne.n	8004e6e <sbrk_aligned+0x26>
 8004e66:	f04f 34ff 	mov.w	r4, #4294967295
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	bd70      	pop	{r4, r5, r6, pc}
 8004e6e:	1cc4      	adds	r4, r0, #3
 8004e70:	f024 0403 	bic.w	r4, r4, #3
 8004e74:	42a0      	cmp	r0, r4
 8004e76:	d0f8      	beq.n	8004e6a <sbrk_aligned+0x22>
 8004e78:	1a21      	subs	r1, r4, r0
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 fca2 	bl	80057c4 <_sbrk_r>
 8004e80:	3001      	adds	r0, #1
 8004e82:	d1f2      	bne.n	8004e6a <sbrk_aligned+0x22>
 8004e84:	e7ef      	b.n	8004e66 <sbrk_aligned+0x1e>
 8004e86:	bf00      	nop
 8004e88:	20000374 	.word	0x20000374

08004e8c <_malloc_r>:
 8004e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e90:	1ccd      	adds	r5, r1, #3
 8004e92:	f025 0503 	bic.w	r5, r5, #3
 8004e96:	3508      	adds	r5, #8
 8004e98:	2d0c      	cmp	r5, #12
 8004e9a:	bf38      	it	cc
 8004e9c:	250c      	movcc	r5, #12
 8004e9e:	2d00      	cmp	r5, #0
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	db01      	blt.n	8004ea8 <_malloc_r+0x1c>
 8004ea4:	42a9      	cmp	r1, r5
 8004ea6:	d904      	bls.n	8004eb2 <_malloc_r+0x26>
 8004ea8:	230c      	movs	r3, #12
 8004eaa:	6033      	str	r3, [r6, #0]
 8004eac:	2000      	movs	r0, #0
 8004eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f88 <_malloc_r+0xfc>
 8004eb6:	f000 f869 	bl	8004f8c <__malloc_lock>
 8004eba:	f8d8 3000 	ldr.w	r3, [r8]
 8004ebe:	461c      	mov	r4, r3
 8004ec0:	bb44      	cbnz	r4, 8004f14 <_malloc_r+0x88>
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f7ff ffbf 	bl	8004e48 <sbrk_aligned>
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	4604      	mov	r4, r0
 8004ece:	d158      	bne.n	8004f82 <_malloc_r+0xf6>
 8004ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ed4:	4627      	mov	r7, r4
 8004ed6:	2f00      	cmp	r7, #0
 8004ed8:	d143      	bne.n	8004f62 <_malloc_r+0xd6>
 8004eda:	2c00      	cmp	r4, #0
 8004edc:	d04b      	beq.n	8004f76 <_malloc_r+0xea>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	eb04 0903 	add.w	r9, r4, r3
 8004ee8:	f000 fc6c 	bl	80057c4 <_sbrk_r>
 8004eec:	4581      	cmp	r9, r0
 8004eee:	d142      	bne.n	8004f76 <_malloc_r+0xea>
 8004ef0:	6821      	ldr	r1, [r4, #0]
 8004ef2:	1a6d      	subs	r5, r5, r1
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff ffa6 	bl	8004e48 <sbrk_aligned>
 8004efc:	3001      	adds	r0, #1
 8004efe:	d03a      	beq.n	8004f76 <_malloc_r+0xea>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	442b      	add	r3, r5
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	f8d8 3000 	ldr.w	r3, [r8]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	bb62      	cbnz	r2, 8004f68 <_malloc_r+0xdc>
 8004f0e:	f8c8 7000 	str.w	r7, [r8]
 8004f12:	e00f      	b.n	8004f34 <_malloc_r+0xa8>
 8004f14:	6822      	ldr	r2, [r4, #0]
 8004f16:	1b52      	subs	r2, r2, r5
 8004f18:	d420      	bmi.n	8004f5c <_malloc_r+0xd0>
 8004f1a:	2a0b      	cmp	r2, #11
 8004f1c:	d917      	bls.n	8004f4e <_malloc_r+0xc2>
 8004f1e:	1961      	adds	r1, r4, r5
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	6025      	str	r5, [r4, #0]
 8004f24:	bf18      	it	ne
 8004f26:	6059      	strne	r1, [r3, #4]
 8004f28:	6863      	ldr	r3, [r4, #4]
 8004f2a:	bf08      	it	eq
 8004f2c:	f8c8 1000 	streq.w	r1, [r8]
 8004f30:	5162      	str	r2, [r4, r5]
 8004f32:	604b      	str	r3, [r1, #4]
 8004f34:	4630      	mov	r0, r6
 8004f36:	f000 f82f 	bl	8004f98 <__malloc_unlock>
 8004f3a:	f104 000b 	add.w	r0, r4, #11
 8004f3e:	1d23      	adds	r3, r4, #4
 8004f40:	f020 0007 	bic.w	r0, r0, #7
 8004f44:	1ac2      	subs	r2, r0, r3
 8004f46:	bf1c      	itt	ne
 8004f48:	1a1b      	subne	r3, r3, r0
 8004f4a:	50a3      	strne	r3, [r4, r2]
 8004f4c:	e7af      	b.n	8004eae <_malloc_r+0x22>
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	42a3      	cmp	r3, r4
 8004f52:	bf0c      	ite	eq
 8004f54:	f8c8 2000 	streq.w	r2, [r8]
 8004f58:	605a      	strne	r2, [r3, #4]
 8004f5a:	e7eb      	b.n	8004f34 <_malloc_r+0xa8>
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	6864      	ldr	r4, [r4, #4]
 8004f60:	e7ae      	b.n	8004ec0 <_malloc_r+0x34>
 8004f62:	463c      	mov	r4, r7
 8004f64:	687f      	ldr	r7, [r7, #4]
 8004f66:	e7b6      	b.n	8004ed6 <_malloc_r+0x4a>
 8004f68:	461a      	mov	r2, r3
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	d1fb      	bne.n	8004f68 <_malloc_r+0xdc>
 8004f70:	2300      	movs	r3, #0
 8004f72:	6053      	str	r3, [r2, #4]
 8004f74:	e7de      	b.n	8004f34 <_malloc_r+0xa8>
 8004f76:	230c      	movs	r3, #12
 8004f78:	6033      	str	r3, [r6, #0]
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f000 f80c 	bl	8004f98 <__malloc_unlock>
 8004f80:	e794      	b.n	8004eac <_malloc_r+0x20>
 8004f82:	6005      	str	r5, [r0, #0]
 8004f84:	e7d6      	b.n	8004f34 <_malloc_r+0xa8>
 8004f86:	bf00      	nop
 8004f88:	20000378 	.word	0x20000378

08004f8c <__malloc_lock>:
 8004f8c:	4801      	ldr	r0, [pc, #4]	@ (8004f94 <__malloc_lock+0x8>)
 8004f8e:	f7ff bf0e 	b.w	8004dae <__retarget_lock_acquire_recursive>
 8004f92:	bf00      	nop
 8004f94:	20000370 	.word	0x20000370

08004f98 <__malloc_unlock>:
 8004f98:	4801      	ldr	r0, [pc, #4]	@ (8004fa0 <__malloc_unlock+0x8>)
 8004f9a:	f7ff bf09 	b.w	8004db0 <__retarget_lock_release_recursive>
 8004f9e:	bf00      	nop
 8004fa0:	20000370 	.word	0x20000370

08004fa4 <__sfputc_r>:
 8004fa4:	6893      	ldr	r3, [r2, #8]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	b410      	push	{r4}
 8004fac:	6093      	str	r3, [r2, #8]
 8004fae:	da08      	bge.n	8004fc2 <__sfputc_r+0x1e>
 8004fb0:	6994      	ldr	r4, [r2, #24]
 8004fb2:	42a3      	cmp	r3, r4
 8004fb4:	db01      	blt.n	8004fba <__sfputc_r+0x16>
 8004fb6:	290a      	cmp	r1, #10
 8004fb8:	d103      	bne.n	8004fc2 <__sfputc_r+0x1e>
 8004fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fbe:	f000 bb6d 	b.w	800569c <__swbuf_r>
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	1c58      	adds	r0, r3, #1
 8004fc6:	6010      	str	r0, [r2, #0]
 8004fc8:	7019      	strb	r1, [r3, #0]
 8004fca:	4608      	mov	r0, r1
 8004fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <__sfputs_r>:
 8004fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	460f      	mov	r7, r1
 8004fd8:	4614      	mov	r4, r2
 8004fda:	18d5      	adds	r5, r2, r3
 8004fdc:	42ac      	cmp	r4, r5
 8004fde:	d101      	bne.n	8004fe4 <__sfputs_r+0x12>
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e007      	b.n	8004ff4 <__sfputs_r+0x22>
 8004fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe8:	463a      	mov	r2, r7
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7ff ffda 	bl	8004fa4 <__sfputc_r>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d1f3      	bne.n	8004fdc <__sfputs_r+0xa>
 8004ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ff8 <_vfiprintf_r>:
 8004ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffc:	460d      	mov	r5, r1
 8004ffe:	b09d      	sub	sp, #116	@ 0x74
 8005000:	4614      	mov	r4, r2
 8005002:	4698      	mov	r8, r3
 8005004:	4606      	mov	r6, r0
 8005006:	b118      	cbz	r0, 8005010 <_vfiprintf_r+0x18>
 8005008:	6a03      	ldr	r3, [r0, #32]
 800500a:	b90b      	cbnz	r3, 8005010 <_vfiprintf_r+0x18>
 800500c:	f7ff fdca 	bl	8004ba4 <__sinit>
 8005010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005012:	07d9      	lsls	r1, r3, #31
 8005014:	d405      	bmi.n	8005022 <_vfiprintf_r+0x2a>
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	059a      	lsls	r2, r3, #22
 800501a:	d402      	bmi.n	8005022 <_vfiprintf_r+0x2a>
 800501c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800501e:	f7ff fec6 	bl	8004dae <__retarget_lock_acquire_recursive>
 8005022:	89ab      	ldrh	r3, [r5, #12]
 8005024:	071b      	lsls	r3, r3, #28
 8005026:	d501      	bpl.n	800502c <_vfiprintf_r+0x34>
 8005028:	692b      	ldr	r3, [r5, #16]
 800502a:	b99b      	cbnz	r3, 8005054 <_vfiprintf_r+0x5c>
 800502c:	4629      	mov	r1, r5
 800502e:	4630      	mov	r0, r6
 8005030:	f000 fb72 	bl	8005718 <__swsetup_r>
 8005034:	b170      	cbz	r0, 8005054 <_vfiprintf_r+0x5c>
 8005036:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005038:	07dc      	lsls	r4, r3, #31
 800503a:	d504      	bpl.n	8005046 <_vfiprintf_r+0x4e>
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	b01d      	add	sp, #116	@ 0x74
 8005042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005046:	89ab      	ldrh	r3, [r5, #12]
 8005048:	0598      	lsls	r0, r3, #22
 800504a:	d4f7      	bmi.n	800503c <_vfiprintf_r+0x44>
 800504c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800504e:	f7ff feaf 	bl	8004db0 <__retarget_lock_release_recursive>
 8005052:	e7f3      	b.n	800503c <_vfiprintf_r+0x44>
 8005054:	2300      	movs	r3, #0
 8005056:	9309      	str	r3, [sp, #36]	@ 0x24
 8005058:	2320      	movs	r3, #32
 800505a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800505e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005062:	2330      	movs	r3, #48	@ 0x30
 8005064:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005214 <_vfiprintf_r+0x21c>
 8005068:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800506c:	f04f 0901 	mov.w	r9, #1
 8005070:	4623      	mov	r3, r4
 8005072:	469a      	mov	sl, r3
 8005074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005078:	b10a      	cbz	r2, 800507e <_vfiprintf_r+0x86>
 800507a:	2a25      	cmp	r2, #37	@ 0x25
 800507c:	d1f9      	bne.n	8005072 <_vfiprintf_r+0x7a>
 800507e:	ebba 0b04 	subs.w	fp, sl, r4
 8005082:	d00b      	beq.n	800509c <_vfiprintf_r+0xa4>
 8005084:	465b      	mov	r3, fp
 8005086:	4622      	mov	r2, r4
 8005088:	4629      	mov	r1, r5
 800508a:	4630      	mov	r0, r6
 800508c:	f7ff ffa1 	bl	8004fd2 <__sfputs_r>
 8005090:	3001      	adds	r0, #1
 8005092:	f000 80a7 	beq.w	80051e4 <_vfiprintf_r+0x1ec>
 8005096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005098:	445a      	add	r2, fp
 800509a:	9209      	str	r2, [sp, #36]	@ 0x24
 800509c:	f89a 3000 	ldrb.w	r3, [sl]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 809f 	beq.w	80051e4 <_vfiprintf_r+0x1ec>
 80050a6:	2300      	movs	r3, #0
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b0:	f10a 0a01 	add.w	sl, sl, #1
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80050be:	4654      	mov	r4, sl
 80050c0:	2205      	movs	r2, #5
 80050c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c6:	4853      	ldr	r0, [pc, #332]	@ (8005214 <_vfiprintf_r+0x21c>)
 80050c8:	f7fb f882 	bl	80001d0 <memchr>
 80050cc:	9a04      	ldr	r2, [sp, #16]
 80050ce:	b9d8      	cbnz	r0, 8005108 <_vfiprintf_r+0x110>
 80050d0:	06d1      	lsls	r1, r2, #27
 80050d2:	bf44      	itt	mi
 80050d4:	2320      	movmi	r3, #32
 80050d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050da:	0713      	lsls	r3, r2, #28
 80050dc:	bf44      	itt	mi
 80050de:	232b      	movmi	r3, #43	@ 0x2b
 80050e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050e4:	f89a 3000 	ldrb.w	r3, [sl]
 80050e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ea:	d015      	beq.n	8005118 <_vfiprintf_r+0x120>
 80050ec:	9a07      	ldr	r2, [sp, #28]
 80050ee:	4654      	mov	r4, sl
 80050f0:	2000      	movs	r0, #0
 80050f2:	f04f 0c0a 	mov.w	ip, #10
 80050f6:	4621      	mov	r1, r4
 80050f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050fc:	3b30      	subs	r3, #48	@ 0x30
 80050fe:	2b09      	cmp	r3, #9
 8005100:	d94b      	bls.n	800519a <_vfiprintf_r+0x1a2>
 8005102:	b1b0      	cbz	r0, 8005132 <_vfiprintf_r+0x13a>
 8005104:	9207      	str	r2, [sp, #28]
 8005106:	e014      	b.n	8005132 <_vfiprintf_r+0x13a>
 8005108:	eba0 0308 	sub.w	r3, r0, r8
 800510c:	fa09 f303 	lsl.w	r3, r9, r3
 8005110:	4313      	orrs	r3, r2
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	46a2      	mov	sl, r4
 8005116:	e7d2      	b.n	80050be <_vfiprintf_r+0xc6>
 8005118:	9b03      	ldr	r3, [sp, #12]
 800511a:	1d19      	adds	r1, r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	9103      	str	r1, [sp, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	bfbb      	ittet	lt
 8005124:	425b      	neglt	r3, r3
 8005126:	f042 0202 	orrlt.w	r2, r2, #2
 800512a:	9307      	strge	r3, [sp, #28]
 800512c:	9307      	strlt	r3, [sp, #28]
 800512e:	bfb8      	it	lt
 8005130:	9204      	strlt	r2, [sp, #16]
 8005132:	7823      	ldrb	r3, [r4, #0]
 8005134:	2b2e      	cmp	r3, #46	@ 0x2e
 8005136:	d10a      	bne.n	800514e <_vfiprintf_r+0x156>
 8005138:	7863      	ldrb	r3, [r4, #1]
 800513a:	2b2a      	cmp	r3, #42	@ 0x2a
 800513c:	d132      	bne.n	80051a4 <_vfiprintf_r+0x1ac>
 800513e:	9b03      	ldr	r3, [sp, #12]
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	9203      	str	r2, [sp, #12]
 8005146:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800514a:	3402      	adds	r4, #2
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005224 <_vfiprintf_r+0x22c>
 8005152:	7821      	ldrb	r1, [r4, #0]
 8005154:	2203      	movs	r2, #3
 8005156:	4650      	mov	r0, sl
 8005158:	f7fb f83a 	bl	80001d0 <memchr>
 800515c:	b138      	cbz	r0, 800516e <_vfiprintf_r+0x176>
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	eba0 000a 	sub.w	r0, r0, sl
 8005164:	2240      	movs	r2, #64	@ 0x40
 8005166:	4082      	lsls	r2, r0
 8005168:	4313      	orrs	r3, r2
 800516a:	3401      	adds	r4, #1
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005172:	4829      	ldr	r0, [pc, #164]	@ (8005218 <_vfiprintf_r+0x220>)
 8005174:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005178:	2206      	movs	r2, #6
 800517a:	f7fb f829 	bl	80001d0 <memchr>
 800517e:	2800      	cmp	r0, #0
 8005180:	d03f      	beq.n	8005202 <_vfiprintf_r+0x20a>
 8005182:	4b26      	ldr	r3, [pc, #152]	@ (800521c <_vfiprintf_r+0x224>)
 8005184:	bb1b      	cbnz	r3, 80051ce <_vfiprintf_r+0x1d6>
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	3307      	adds	r3, #7
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	3308      	adds	r3, #8
 8005190:	9303      	str	r3, [sp, #12]
 8005192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005194:	443b      	add	r3, r7
 8005196:	9309      	str	r3, [sp, #36]	@ 0x24
 8005198:	e76a      	b.n	8005070 <_vfiprintf_r+0x78>
 800519a:	fb0c 3202 	mla	r2, ip, r2, r3
 800519e:	460c      	mov	r4, r1
 80051a0:	2001      	movs	r0, #1
 80051a2:	e7a8      	b.n	80050f6 <_vfiprintf_r+0xfe>
 80051a4:	2300      	movs	r3, #0
 80051a6:	3401      	adds	r4, #1
 80051a8:	9305      	str	r3, [sp, #20]
 80051aa:	4619      	mov	r1, r3
 80051ac:	f04f 0c0a 	mov.w	ip, #10
 80051b0:	4620      	mov	r0, r4
 80051b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051b6:	3a30      	subs	r2, #48	@ 0x30
 80051b8:	2a09      	cmp	r2, #9
 80051ba:	d903      	bls.n	80051c4 <_vfiprintf_r+0x1cc>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0c6      	beq.n	800514e <_vfiprintf_r+0x156>
 80051c0:	9105      	str	r1, [sp, #20]
 80051c2:	e7c4      	b.n	800514e <_vfiprintf_r+0x156>
 80051c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051c8:	4604      	mov	r4, r0
 80051ca:	2301      	movs	r3, #1
 80051cc:	e7f0      	b.n	80051b0 <_vfiprintf_r+0x1b8>
 80051ce:	ab03      	add	r3, sp, #12
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	462a      	mov	r2, r5
 80051d4:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <_vfiprintf_r+0x228>)
 80051d6:	a904      	add	r1, sp, #16
 80051d8:	4630      	mov	r0, r6
 80051da:	f3af 8000 	nop.w
 80051de:	4607      	mov	r7, r0
 80051e0:	1c78      	adds	r0, r7, #1
 80051e2:	d1d6      	bne.n	8005192 <_vfiprintf_r+0x19a>
 80051e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051e6:	07d9      	lsls	r1, r3, #31
 80051e8:	d405      	bmi.n	80051f6 <_vfiprintf_r+0x1fe>
 80051ea:	89ab      	ldrh	r3, [r5, #12]
 80051ec:	059a      	lsls	r2, r3, #22
 80051ee:	d402      	bmi.n	80051f6 <_vfiprintf_r+0x1fe>
 80051f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051f2:	f7ff fddd 	bl	8004db0 <__retarget_lock_release_recursive>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	065b      	lsls	r3, r3, #25
 80051fa:	f53f af1f 	bmi.w	800503c <_vfiprintf_r+0x44>
 80051fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005200:	e71e      	b.n	8005040 <_vfiprintf_r+0x48>
 8005202:	ab03      	add	r3, sp, #12
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	462a      	mov	r2, r5
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <_vfiprintf_r+0x228>)
 800520a:	a904      	add	r1, sp, #16
 800520c:	4630      	mov	r0, r6
 800520e:	f000 f879 	bl	8005304 <_printf_i>
 8005212:	e7e4      	b.n	80051de <_vfiprintf_r+0x1e6>
 8005214:	08005954 	.word	0x08005954
 8005218:	0800595e 	.word	0x0800595e
 800521c:	00000000 	.word	0x00000000
 8005220:	08004fd3 	.word	0x08004fd3
 8005224:	0800595a 	.word	0x0800595a

08005228 <_printf_common>:
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	4616      	mov	r6, r2
 800522e:	4698      	mov	r8, r3
 8005230:	688a      	ldr	r2, [r1, #8]
 8005232:	690b      	ldr	r3, [r1, #16]
 8005234:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005238:	4293      	cmp	r3, r2
 800523a:	bfb8      	it	lt
 800523c:	4613      	movlt	r3, r2
 800523e:	6033      	str	r3, [r6, #0]
 8005240:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005244:	4607      	mov	r7, r0
 8005246:	460c      	mov	r4, r1
 8005248:	b10a      	cbz	r2, 800524e <_printf_common+0x26>
 800524a:	3301      	adds	r3, #1
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	0699      	lsls	r1, r3, #26
 8005252:	bf42      	ittt	mi
 8005254:	6833      	ldrmi	r3, [r6, #0]
 8005256:	3302      	addmi	r3, #2
 8005258:	6033      	strmi	r3, [r6, #0]
 800525a:	6825      	ldr	r5, [r4, #0]
 800525c:	f015 0506 	ands.w	r5, r5, #6
 8005260:	d106      	bne.n	8005270 <_printf_common+0x48>
 8005262:	f104 0a19 	add.w	sl, r4, #25
 8005266:	68e3      	ldr	r3, [r4, #12]
 8005268:	6832      	ldr	r2, [r6, #0]
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	42ab      	cmp	r3, r5
 800526e:	dc26      	bgt.n	80052be <_printf_common+0x96>
 8005270:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	3b00      	subs	r3, #0
 8005278:	bf18      	it	ne
 800527a:	2301      	movne	r3, #1
 800527c:	0692      	lsls	r2, r2, #26
 800527e:	d42b      	bmi.n	80052d8 <_printf_common+0xb0>
 8005280:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005284:	4641      	mov	r1, r8
 8005286:	4638      	mov	r0, r7
 8005288:	47c8      	blx	r9
 800528a:	3001      	adds	r0, #1
 800528c:	d01e      	beq.n	80052cc <_printf_common+0xa4>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	6922      	ldr	r2, [r4, #16]
 8005292:	f003 0306 	and.w	r3, r3, #6
 8005296:	2b04      	cmp	r3, #4
 8005298:	bf02      	ittt	eq
 800529a:	68e5      	ldreq	r5, [r4, #12]
 800529c:	6833      	ldreq	r3, [r6, #0]
 800529e:	1aed      	subeq	r5, r5, r3
 80052a0:	68a3      	ldr	r3, [r4, #8]
 80052a2:	bf0c      	ite	eq
 80052a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052a8:	2500      	movne	r5, #0
 80052aa:	4293      	cmp	r3, r2
 80052ac:	bfc4      	itt	gt
 80052ae:	1a9b      	subgt	r3, r3, r2
 80052b0:	18ed      	addgt	r5, r5, r3
 80052b2:	2600      	movs	r6, #0
 80052b4:	341a      	adds	r4, #26
 80052b6:	42b5      	cmp	r5, r6
 80052b8:	d11a      	bne.n	80052f0 <_printf_common+0xc8>
 80052ba:	2000      	movs	r0, #0
 80052bc:	e008      	b.n	80052d0 <_printf_common+0xa8>
 80052be:	2301      	movs	r3, #1
 80052c0:	4652      	mov	r2, sl
 80052c2:	4641      	mov	r1, r8
 80052c4:	4638      	mov	r0, r7
 80052c6:	47c8      	blx	r9
 80052c8:	3001      	adds	r0, #1
 80052ca:	d103      	bne.n	80052d4 <_printf_common+0xac>
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	3501      	adds	r5, #1
 80052d6:	e7c6      	b.n	8005266 <_printf_common+0x3e>
 80052d8:	18e1      	adds	r1, r4, r3
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	2030      	movs	r0, #48	@ 0x30
 80052de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052e2:	4422      	add	r2, r4
 80052e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052ec:	3302      	adds	r3, #2
 80052ee:	e7c7      	b.n	8005280 <_printf_common+0x58>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4622      	mov	r2, r4
 80052f4:	4641      	mov	r1, r8
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c8      	blx	r9
 80052fa:	3001      	adds	r0, #1
 80052fc:	d0e6      	beq.n	80052cc <_printf_common+0xa4>
 80052fe:	3601      	adds	r6, #1
 8005300:	e7d9      	b.n	80052b6 <_printf_common+0x8e>
	...

08005304 <_printf_i>:
 8005304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	7e0f      	ldrb	r7, [r1, #24]
 800530a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800530c:	2f78      	cmp	r7, #120	@ 0x78
 800530e:	4691      	mov	r9, r2
 8005310:	4680      	mov	r8, r0
 8005312:	460c      	mov	r4, r1
 8005314:	469a      	mov	sl, r3
 8005316:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800531a:	d807      	bhi.n	800532c <_printf_i+0x28>
 800531c:	2f62      	cmp	r7, #98	@ 0x62
 800531e:	d80a      	bhi.n	8005336 <_printf_i+0x32>
 8005320:	2f00      	cmp	r7, #0
 8005322:	f000 80d2 	beq.w	80054ca <_printf_i+0x1c6>
 8005326:	2f58      	cmp	r7, #88	@ 0x58
 8005328:	f000 80b9 	beq.w	800549e <_printf_i+0x19a>
 800532c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005330:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005334:	e03a      	b.n	80053ac <_printf_i+0xa8>
 8005336:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800533a:	2b15      	cmp	r3, #21
 800533c:	d8f6      	bhi.n	800532c <_printf_i+0x28>
 800533e:	a101      	add	r1, pc, #4	@ (adr r1, 8005344 <_printf_i+0x40>)
 8005340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005344:	0800539d 	.word	0x0800539d
 8005348:	080053b1 	.word	0x080053b1
 800534c:	0800532d 	.word	0x0800532d
 8005350:	0800532d 	.word	0x0800532d
 8005354:	0800532d 	.word	0x0800532d
 8005358:	0800532d 	.word	0x0800532d
 800535c:	080053b1 	.word	0x080053b1
 8005360:	0800532d 	.word	0x0800532d
 8005364:	0800532d 	.word	0x0800532d
 8005368:	0800532d 	.word	0x0800532d
 800536c:	0800532d 	.word	0x0800532d
 8005370:	080054b1 	.word	0x080054b1
 8005374:	080053db 	.word	0x080053db
 8005378:	0800546b 	.word	0x0800546b
 800537c:	0800532d 	.word	0x0800532d
 8005380:	0800532d 	.word	0x0800532d
 8005384:	080054d3 	.word	0x080054d3
 8005388:	0800532d 	.word	0x0800532d
 800538c:	080053db 	.word	0x080053db
 8005390:	0800532d 	.word	0x0800532d
 8005394:	0800532d 	.word	0x0800532d
 8005398:	08005473 	.word	0x08005473
 800539c:	6833      	ldr	r3, [r6, #0]
 800539e:	1d1a      	adds	r2, r3, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6032      	str	r2, [r6, #0]
 80053a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053ac:	2301      	movs	r3, #1
 80053ae:	e09d      	b.n	80054ec <_printf_i+0x1e8>
 80053b0:	6833      	ldr	r3, [r6, #0]
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	1d19      	adds	r1, r3, #4
 80053b6:	6031      	str	r1, [r6, #0]
 80053b8:	0606      	lsls	r6, r0, #24
 80053ba:	d501      	bpl.n	80053c0 <_printf_i+0xbc>
 80053bc:	681d      	ldr	r5, [r3, #0]
 80053be:	e003      	b.n	80053c8 <_printf_i+0xc4>
 80053c0:	0645      	lsls	r5, r0, #25
 80053c2:	d5fb      	bpl.n	80053bc <_printf_i+0xb8>
 80053c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	da03      	bge.n	80053d4 <_printf_i+0xd0>
 80053cc:	232d      	movs	r3, #45	@ 0x2d
 80053ce:	426d      	negs	r5, r5
 80053d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d4:	4859      	ldr	r0, [pc, #356]	@ (800553c <_printf_i+0x238>)
 80053d6:	230a      	movs	r3, #10
 80053d8:	e011      	b.n	80053fe <_printf_i+0xfa>
 80053da:	6821      	ldr	r1, [r4, #0]
 80053dc:	6833      	ldr	r3, [r6, #0]
 80053de:	0608      	lsls	r0, r1, #24
 80053e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80053e4:	d402      	bmi.n	80053ec <_printf_i+0xe8>
 80053e6:	0649      	lsls	r1, r1, #25
 80053e8:	bf48      	it	mi
 80053ea:	b2ad      	uxthmi	r5, r5
 80053ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80053ee:	4853      	ldr	r0, [pc, #332]	@ (800553c <_printf_i+0x238>)
 80053f0:	6033      	str	r3, [r6, #0]
 80053f2:	bf14      	ite	ne
 80053f4:	230a      	movne	r3, #10
 80053f6:	2308      	moveq	r3, #8
 80053f8:	2100      	movs	r1, #0
 80053fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053fe:	6866      	ldr	r6, [r4, #4]
 8005400:	60a6      	str	r6, [r4, #8]
 8005402:	2e00      	cmp	r6, #0
 8005404:	bfa2      	ittt	ge
 8005406:	6821      	ldrge	r1, [r4, #0]
 8005408:	f021 0104 	bicge.w	r1, r1, #4
 800540c:	6021      	strge	r1, [r4, #0]
 800540e:	b90d      	cbnz	r5, 8005414 <_printf_i+0x110>
 8005410:	2e00      	cmp	r6, #0
 8005412:	d04b      	beq.n	80054ac <_printf_i+0x1a8>
 8005414:	4616      	mov	r6, r2
 8005416:	fbb5 f1f3 	udiv	r1, r5, r3
 800541a:	fb03 5711 	mls	r7, r3, r1, r5
 800541e:	5dc7      	ldrb	r7, [r0, r7]
 8005420:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005424:	462f      	mov	r7, r5
 8005426:	42bb      	cmp	r3, r7
 8005428:	460d      	mov	r5, r1
 800542a:	d9f4      	bls.n	8005416 <_printf_i+0x112>
 800542c:	2b08      	cmp	r3, #8
 800542e:	d10b      	bne.n	8005448 <_printf_i+0x144>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	07df      	lsls	r7, r3, #31
 8005434:	d508      	bpl.n	8005448 <_printf_i+0x144>
 8005436:	6923      	ldr	r3, [r4, #16]
 8005438:	6861      	ldr	r1, [r4, #4]
 800543a:	4299      	cmp	r1, r3
 800543c:	bfde      	ittt	le
 800543e:	2330      	movle	r3, #48	@ 0x30
 8005440:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005444:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005448:	1b92      	subs	r2, r2, r6
 800544a:	6122      	str	r2, [r4, #16]
 800544c:	f8cd a000 	str.w	sl, [sp]
 8005450:	464b      	mov	r3, r9
 8005452:	aa03      	add	r2, sp, #12
 8005454:	4621      	mov	r1, r4
 8005456:	4640      	mov	r0, r8
 8005458:	f7ff fee6 	bl	8005228 <_printf_common>
 800545c:	3001      	adds	r0, #1
 800545e:	d14a      	bne.n	80054f6 <_printf_i+0x1f2>
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	b004      	add	sp, #16
 8005466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	f043 0320 	orr.w	r3, r3, #32
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	4833      	ldr	r0, [pc, #204]	@ (8005540 <_printf_i+0x23c>)
 8005474:	2778      	movs	r7, #120	@ 0x78
 8005476:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	6831      	ldr	r1, [r6, #0]
 800547e:	061f      	lsls	r7, r3, #24
 8005480:	f851 5b04 	ldr.w	r5, [r1], #4
 8005484:	d402      	bmi.n	800548c <_printf_i+0x188>
 8005486:	065f      	lsls	r7, r3, #25
 8005488:	bf48      	it	mi
 800548a:	b2ad      	uxthmi	r5, r5
 800548c:	6031      	str	r1, [r6, #0]
 800548e:	07d9      	lsls	r1, r3, #31
 8005490:	bf44      	itt	mi
 8005492:	f043 0320 	orrmi.w	r3, r3, #32
 8005496:	6023      	strmi	r3, [r4, #0]
 8005498:	b11d      	cbz	r5, 80054a2 <_printf_i+0x19e>
 800549a:	2310      	movs	r3, #16
 800549c:	e7ac      	b.n	80053f8 <_printf_i+0xf4>
 800549e:	4827      	ldr	r0, [pc, #156]	@ (800553c <_printf_i+0x238>)
 80054a0:	e7e9      	b.n	8005476 <_printf_i+0x172>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	f023 0320 	bic.w	r3, r3, #32
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	e7f6      	b.n	800549a <_printf_i+0x196>
 80054ac:	4616      	mov	r6, r2
 80054ae:	e7bd      	b.n	800542c <_printf_i+0x128>
 80054b0:	6833      	ldr	r3, [r6, #0]
 80054b2:	6825      	ldr	r5, [r4, #0]
 80054b4:	6961      	ldr	r1, [r4, #20]
 80054b6:	1d18      	adds	r0, r3, #4
 80054b8:	6030      	str	r0, [r6, #0]
 80054ba:	062e      	lsls	r6, r5, #24
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	d501      	bpl.n	80054c4 <_printf_i+0x1c0>
 80054c0:	6019      	str	r1, [r3, #0]
 80054c2:	e002      	b.n	80054ca <_printf_i+0x1c6>
 80054c4:	0668      	lsls	r0, r5, #25
 80054c6:	d5fb      	bpl.n	80054c0 <_printf_i+0x1bc>
 80054c8:	8019      	strh	r1, [r3, #0]
 80054ca:	2300      	movs	r3, #0
 80054cc:	6123      	str	r3, [r4, #16]
 80054ce:	4616      	mov	r6, r2
 80054d0:	e7bc      	b.n	800544c <_printf_i+0x148>
 80054d2:	6833      	ldr	r3, [r6, #0]
 80054d4:	1d1a      	adds	r2, r3, #4
 80054d6:	6032      	str	r2, [r6, #0]
 80054d8:	681e      	ldr	r6, [r3, #0]
 80054da:	6862      	ldr	r2, [r4, #4]
 80054dc:	2100      	movs	r1, #0
 80054de:	4630      	mov	r0, r6
 80054e0:	f7fa fe76 	bl	80001d0 <memchr>
 80054e4:	b108      	cbz	r0, 80054ea <_printf_i+0x1e6>
 80054e6:	1b80      	subs	r0, r0, r6
 80054e8:	6060      	str	r0, [r4, #4]
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	6123      	str	r3, [r4, #16]
 80054ee:	2300      	movs	r3, #0
 80054f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054f4:	e7aa      	b.n	800544c <_printf_i+0x148>
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	4632      	mov	r2, r6
 80054fa:	4649      	mov	r1, r9
 80054fc:	4640      	mov	r0, r8
 80054fe:	47d0      	blx	sl
 8005500:	3001      	adds	r0, #1
 8005502:	d0ad      	beq.n	8005460 <_printf_i+0x15c>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	079b      	lsls	r3, r3, #30
 8005508:	d413      	bmi.n	8005532 <_printf_i+0x22e>
 800550a:	68e0      	ldr	r0, [r4, #12]
 800550c:	9b03      	ldr	r3, [sp, #12]
 800550e:	4298      	cmp	r0, r3
 8005510:	bfb8      	it	lt
 8005512:	4618      	movlt	r0, r3
 8005514:	e7a6      	b.n	8005464 <_printf_i+0x160>
 8005516:	2301      	movs	r3, #1
 8005518:	4632      	mov	r2, r6
 800551a:	4649      	mov	r1, r9
 800551c:	4640      	mov	r0, r8
 800551e:	47d0      	blx	sl
 8005520:	3001      	adds	r0, #1
 8005522:	d09d      	beq.n	8005460 <_printf_i+0x15c>
 8005524:	3501      	adds	r5, #1
 8005526:	68e3      	ldr	r3, [r4, #12]
 8005528:	9903      	ldr	r1, [sp, #12]
 800552a:	1a5b      	subs	r3, r3, r1
 800552c:	42ab      	cmp	r3, r5
 800552e:	dcf2      	bgt.n	8005516 <_printf_i+0x212>
 8005530:	e7eb      	b.n	800550a <_printf_i+0x206>
 8005532:	2500      	movs	r5, #0
 8005534:	f104 0619 	add.w	r6, r4, #25
 8005538:	e7f5      	b.n	8005526 <_printf_i+0x222>
 800553a:	bf00      	nop
 800553c:	08005965 	.word	0x08005965
 8005540:	08005976 	.word	0x08005976

08005544 <__sflush_r>:
 8005544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554c:	0716      	lsls	r6, r2, #28
 800554e:	4605      	mov	r5, r0
 8005550:	460c      	mov	r4, r1
 8005552:	d454      	bmi.n	80055fe <__sflush_r+0xba>
 8005554:	684b      	ldr	r3, [r1, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	dc02      	bgt.n	8005560 <__sflush_r+0x1c>
 800555a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	dd48      	ble.n	80055f2 <__sflush_r+0xae>
 8005560:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005562:	2e00      	cmp	r6, #0
 8005564:	d045      	beq.n	80055f2 <__sflush_r+0xae>
 8005566:	2300      	movs	r3, #0
 8005568:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800556c:	682f      	ldr	r7, [r5, #0]
 800556e:	6a21      	ldr	r1, [r4, #32]
 8005570:	602b      	str	r3, [r5, #0]
 8005572:	d030      	beq.n	80055d6 <__sflush_r+0x92>
 8005574:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	0759      	lsls	r1, r3, #29
 800557a:	d505      	bpl.n	8005588 <__sflush_r+0x44>
 800557c:	6863      	ldr	r3, [r4, #4]
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005582:	b10b      	cbz	r3, 8005588 <__sflush_r+0x44>
 8005584:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	2300      	movs	r3, #0
 800558a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800558c:	6a21      	ldr	r1, [r4, #32]
 800558e:	4628      	mov	r0, r5
 8005590:	47b0      	blx	r6
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	d106      	bne.n	80055a6 <__sflush_r+0x62>
 8005598:	6829      	ldr	r1, [r5, #0]
 800559a:	291d      	cmp	r1, #29
 800559c:	d82b      	bhi.n	80055f6 <__sflush_r+0xb2>
 800559e:	4a2a      	ldr	r2, [pc, #168]	@ (8005648 <__sflush_r+0x104>)
 80055a0:	410a      	asrs	r2, r1
 80055a2:	07d6      	lsls	r6, r2, #31
 80055a4:	d427      	bmi.n	80055f6 <__sflush_r+0xb2>
 80055a6:	2200      	movs	r2, #0
 80055a8:	6062      	str	r2, [r4, #4]
 80055aa:	04d9      	lsls	r1, r3, #19
 80055ac:	6922      	ldr	r2, [r4, #16]
 80055ae:	6022      	str	r2, [r4, #0]
 80055b0:	d504      	bpl.n	80055bc <__sflush_r+0x78>
 80055b2:	1c42      	adds	r2, r0, #1
 80055b4:	d101      	bne.n	80055ba <__sflush_r+0x76>
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	b903      	cbnz	r3, 80055bc <__sflush_r+0x78>
 80055ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80055bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055be:	602f      	str	r7, [r5, #0]
 80055c0:	b1b9      	cbz	r1, 80055f2 <__sflush_r+0xae>
 80055c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055c6:	4299      	cmp	r1, r3
 80055c8:	d002      	beq.n	80055d0 <__sflush_r+0x8c>
 80055ca:	4628      	mov	r0, r5
 80055cc:	f7ff fbf2 	bl	8004db4 <_free_r>
 80055d0:	2300      	movs	r3, #0
 80055d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80055d4:	e00d      	b.n	80055f2 <__sflush_r+0xae>
 80055d6:	2301      	movs	r3, #1
 80055d8:	4628      	mov	r0, r5
 80055da:	47b0      	blx	r6
 80055dc:	4602      	mov	r2, r0
 80055de:	1c50      	adds	r0, r2, #1
 80055e0:	d1c9      	bne.n	8005576 <__sflush_r+0x32>
 80055e2:	682b      	ldr	r3, [r5, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0c6      	beq.n	8005576 <__sflush_r+0x32>
 80055e8:	2b1d      	cmp	r3, #29
 80055ea:	d001      	beq.n	80055f0 <__sflush_r+0xac>
 80055ec:	2b16      	cmp	r3, #22
 80055ee:	d11e      	bne.n	800562e <__sflush_r+0xea>
 80055f0:	602f      	str	r7, [r5, #0]
 80055f2:	2000      	movs	r0, #0
 80055f4:	e022      	b.n	800563c <__sflush_r+0xf8>
 80055f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055fa:	b21b      	sxth	r3, r3
 80055fc:	e01b      	b.n	8005636 <__sflush_r+0xf2>
 80055fe:	690f      	ldr	r7, [r1, #16]
 8005600:	2f00      	cmp	r7, #0
 8005602:	d0f6      	beq.n	80055f2 <__sflush_r+0xae>
 8005604:	0793      	lsls	r3, r2, #30
 8005606:	680e      	ldr	r6, [r1, #0]
 8005608:	bf08      	it	eq
 800560a:	694b      	ldreq	r3, [r1, #20]
 800560c:	600f      	str	r7, [r1, #0]
 800560e:	bf18      	it	ne
 8005610:	2300      	movne	r3, #0
 8005612:	eba6 0807 	sub.w	r8, r6, r7
 8005616:	608b      	str	r3, [r1, #8]
 8005618:	f1b8 0f00 	cmp.w	r8, #0
 800561c:	dde9      	ble.n	80055f2 <__sflush_r+0xae>
 800561e:	6a21      	ldr	r1, [r4, #32]
 8005620:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005622:	4643      	mov	r3, r8
 8005624:	463a      	mov	r2, r7
 8005626:	4628      	mov	r0, r5
 8005628:	47b0      	blx	r6
 800562a:	2800      	cmp	r0, #0
 800562c:	dc08      	bgt.n	8005640 <__sflush_r+0xfc>
 800562e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005640:	4407      	add	r7, r0
 8005642:	eba8 0800 	sub.w	r8, r8, r0
 8005646:	e7e7      	b.n	8005618 <__sflush_r+0xd4>
 8005648:	dfbffffe 	.word	0xdfbffffe

0800564c <_fflush_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	690b      	ldr	r3, [r1, #16]
 8005650:	4605      	mov	r5, r0
 8005652:	460c      	mov	r4, r1
 8005654:	b913      	cbnz	r3, 800565c <_fflush_r+0x10>
 8005656:	2500      	movs	r5, #0
 8005658:	4628      	mov	r0, r5
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	b118      	cbz	r0, 8005666 <_fflush_r+0x1a>
 800565e:	6a03      	ldr	r3, [r0, #32]
 8005660:	b90b      	cbnz	r3, 8005666 <_fflush_r+0x1a>
 8005662:	f7ff fa9f 	bl	8004ba4 <__sinit>
 8005666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f3      	beq.n	8005656 <_fflush_r+0xa>
 800566e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005670:	07d0      	lsls	r0, r2, #31
 8005672:	d404      	bmi.n	800567e <_fflush_r+0x32>
 8005674:	0599      	lsls	r1, r3, #22
 8005676:	d402      	bmi.n	800567e <_fflush_r+0x32>
 8005678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800567a:	f7ff fb98 	bl	8004dae <__retarget_lock_acquire_recursive>
 800567e:	4628      	mov	r0, r5
 8005680:	4621      	mov	r1, r4
 8005682:	f7ff ff5f 	bl	8005544 <__sflush_r>
 8005686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005688:	07da      	lsls	r2, r3, #31
 800568a:	4605      	mov	r5, r0
 800568c:	d4e4      	bmi.n	8005658 <_fflush_r+0xc>
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	059b      	lsls	r3, r3, #22
 8005692:	d4e1      	bmi.n	8005658 <_fflush_r+0xc>
 8005694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005696:	f7ff fb8b 	bl	8004db0 <__retarget_lock_release_recursive>
 800569a:	e7dd      	b.n	8005658 <_fflush_r+0xc>

0800569c <__swbuf_r>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	460e      	mov	r6, r1
 80056a0:	4614      	mov	r4, r2
 80056a2:	4605      	mov	r5, r0
 80056a4:	b118      	cbz	r0, 80056ae <__swbuf_r+0x12>
 80056a6:	6a03      	ldr	r3, [r0, #32]
 80056a8:	b90b      	cbnz	r3, 80056ae <__swbuf_r+0x12>
 80056aa:	f7ff fa7b 	bl	8004ba4 <__sinit>
 80056ae:	69a3      	ldr	r3, [r4, #24]
 80056b0:	60a3      	str	r3, [r4, #8]
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	071a      	lsls	r2, r3, #28
 80056b6:	d501      	bpl.n	80056bc <__swbuf_r+0x20>
 80056b8:	6923      	ldr	r3, [r4, #16]
 80056ba:	b943      	cbnz	r3, 80056ce <__swbuf_r+0x32>
 80056bc:	4621      	mov	r1, r4
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 f82a 	bl	8005718 <__swsetup_r>
 80056c4:	b118      	cbz	r0, 80056ce <__swbuf_r+0x32>
 80056c6:	f04f 37ff 	mov.w	r7, #4294967295
 80056ca:	4638      	mov	r0, r7
 80056cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	6922      	ldr	r2, [r4, #16]
 80056d2:	1a98      	subs	r0, r3, r2
 80056d4:	6963      	ldr	r3, [r4, #20]
 80056d6:	b2f6      	uxtb	r6, r6
 80056d8:	4283      	cmp	r3, r0
 80056da:	4637      	mov	r7, r6
 80056dc:	dc05      	bgt.n	80056ea <__swbuf_r+0x4e>
 80056de:	4621      	mov	r1, r4
 80056e0:	4628      	mov	r0, r5
 80056e2:	f7ff ffb3 	bl	800564c <_fflush_r>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	d1ed      	bne.n	80056c6 <__swbuf_r+0x2a>
 80056ea:	68a3      	ldr	r3, [r4, #8]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	60a3      	str	r3, [r4, #8]
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	6022      	str	r2, [r4, #0]
 80056f6:	701e      	strb	r6, [r3, #0]
 80056f8:	6962      	ldr	r2, [r4, #20]
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d004      	beq.n	800570a <__swbuf_r+0x6e>
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	07db      	lsls	r3, r3, #31
 8005704:	d5e1      	bpl.n	80056ca <__swbuf_r+0x2e>
 8005706:	2e0a      	cmp	r6, #10
 8005708:	d1df      	bne.n	80056ca <__swbuf_r+0x2e>
 800570a:	4621      	mov	r1, r4
 800570c:	4628      	mov	r0, r5
 800570e:	f7ff ff9d 	bl	800564c <_fflush_r>
 8005712:	2800      	cmp	r0, #0
 8005714:	d0d9      	beq.n	80056ca <__swbuf_r+0x2e>
 8005716:	e7d6      	b.n	80056c6 <__swbuf_r+0x2a>

08005718 <__swsetup_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4b29      	ldr	r3, [pc, #164]	@ (80057c0 <__swsetup_r+0xa8>)
 800571c:	4605      	mov	r5, r0
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	460c      	mov	r4, r1
 8005722:	b118      	cbz	r0, 800572c <__swsetup_r+0x14>
 8005724:	6a03      	ldr	r3, [r0, #32]
 8005726:	b90b      	cbnz	r3, 800572c <__swsetup_r+0x14>
 8005728:	f7ff fa3c 	bl	8004ba4 <__sinit>
 800572c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005730:	0719      	lsls	r1, r3, #28
 8005732:	d422      	bmi.n	800577a <__swsetup_r+0x62>
 8005734:	06da      	lsls	r2, r3, #27
 8005736:	d407      	bmi.n	8005748 <__swsetup_r+0x30>
 8005738:	2209      	movs	r2, #9
 800573a:	602a      	str	r2, [r5, #0]
 800573c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	f04f 30ff 	mov.w	r0, #4294967295
 8005746:	e033      	b.n	80057b0 <__swsetup_r+0x98>
 8005748:	0758      	lsls	r0, r3, #29
 800574a:	d512      	bpl.n	8005772 <__swsetup_r+0x5a>
 800574c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800574e:	b141      	cbz	r1, 8005762 <__swsetup_r+0x4a>
 8005750:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005754:	4299      	cmp	r1, r3
 8005756:	d002      	beq.n	800575e <__swsetup_r+0x46>
 8005758:	4628      	mov	r0, r5
 800575a:	f7ff fb2b 	bl	8004db4 <_free_r>
 800575e:	2300      	movs	r3, #0
 8005760:	6363      	str	r3, [r4, #52]	@ 0x34
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	2300      	movs	r3, #0
 800576c:	6063      	str	r3, [r4, #4]
 800576e:	6923      	ldr	r3, [r4, #16]
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	f043 0308 	orr.w	r3, r3, #8
 8005778:	81a3      	strh	r3, [r4, #12]
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	b94b      	cbnz	r3, 8005792 <__swsetup_r+0x7a>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005788:	d003      	beq.n	8005792 <__swsetup_r+0x7a>
 800578a:	4621      	mov	r1, r4
 800578c:	4628      	mov	r0, r5
 800578e:	f000 f84f 	bl	8005830 <__smakebuf_r>
 8005792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005796:	f013 0201 	ands.w	r2, r3, #1
 800579a:	d00a      	beq.n	80057b2 <__swsetup_r+0x9a>
 800579c:	2200      	movs	r2, #0
 800579e:	60a2      	str	r2, [r4, #8]
 80057a0:	6962      	ldr	r2, [r4, #20]
 80057a2:	4252      	negs	r2, r2
 80057a4:	61a2      	str	r2, [r4, #24]
 80057a6:	6922      	ldr	r2, [r4, #16]
 80057a8:	b942      	cbnz	r2, 80057bc <__swsetup_r+0xa4>
 80057aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057ae:	d1c5      	bne.n	800573c <__swsetup_r+0x24>
 80057b0:	bd38      	pop	{r3, r4, r5, pc}
 80057b2:	0799      	lsls	r1, r3, #30
 80057b4:	bf58      	it	pl
 80057b6:	6962      	ldrpl	r2, [r4, #20]
 80057b8:	60a2      	str	r2, [r4, #8]
 80057ba:	e7f4      	b.n	80057a6 <__swsetup_r+0x8e>
 80057bc:	2000      	movs	r0, #0
 80057be:	e7f7      	b.n	80057b0 <__swsetup_r+0x98>
 80057c0:	20000018 	.word	0x20000018

080057c4 <_sbrk_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d06      	ldr	r5, [pc, #24]	@ (80057e0 <_sbrk_r+0x1c>)
 80057c8:	2300      	movs	r3, #0
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	f7fb fb5e 	bl	8000e90 <_sbrk>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_sbrk_r+0x1a>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_sbrk_r+0x1a>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	2000036c 	.word	0x2000036c

080057e4 <__swhatbuf_r>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	460c      	mov	r4, r1
 80057e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ec:	2900      	cmp	r1, #0
 80057ee:	b096      	sub	sp, #88	@ 0x58
 80057f0:	4615      	mov	r5, r2
 80057f2:	461e      	mov	r6, r3
 80057f4:	da0d      	bge.n	8005812 <__swhatbuf_r+0x2e>
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057fc:	f04f 0100 	mov.w	r1, #0
 8005800:	bf14      	ite	ne
 8005802:	2340      	movne	r3, #64	@ 0x40
 8005804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005808:	2000      	movs	r0, #0
 800580a:	6031      	str	r1, [r6, #0]
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	b016      	add	sp, #88	@ 0x58
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	466a      	mov	r2, sp
 8005814:	f000 f848 	bl	80058a8 <_fstat_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	dbec      	blt.n	80057f6 <__swhatbuf_r+0x12>
 800581c:	9901      	ldr	r1, [sp, #4]
 800581e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005826:	4259      	negs	r1, r3
 8005828:	4159      	adcs	r1, r3
 800582a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800582e:	e7eb      	b.n	8005808 <__swhatbuf_r+0x24>

08005830 <__smakebuf_r>:
 8005830:	898b      	ldrh	r3, [r1, #12]
 8005832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005834:	079d      	lsls	r5, r3, #30
 8005836:	4606      	mov	r6, r0
 8005838:	460c      	mov	r4, r1
 800583a:	d507      	bpl.n	800584c <__smakebuf_r+0x1c>
 800583c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	6123      	str	r3, [r4, #16]
 8005844:	2301      	movs	r3, #1
 8005846:	6163      	str	r3, [r4, #20]
 8005848:	b003      	add	sp, #12
 800584a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800584c:	ab01      	add	r3, sp, #4
 800584e:	466a      	mov	r2, sp
 8005850:	f7ff ffc8 	bl	80057e4 <__swhatbuf_r>
 8005854:	9f00      	ldr	r7, [sp, #0]
 8005856:	4605      	mov	r5, r0
 8005858:	4639      	mov	r1, r7
 800585a:	4630      	mov	r0, r6
 800585c:	f7ff fb16 	bl	8004e8c <_malloc_r>
 8005860:	b948      	cbnz	r0, 8005876 <__smakebuf_r+0x46>
 8005862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005866:	059a      	lsls	r2, r3, #22
 8005868:	d4ee      	bmi.n	8005848 <__smakebuf_r+0x18>
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	f043 0302 	orr.w	r3, r3, #2
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	e7e2      	b.n	800583c <__smakebuf_r+0xc>
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	6020      	str	r0, [r4, #0]
 800587a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005886:	b15b      	cbz	r3, 80058a0 <__smakebuf_r+0x70>
 8005888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800588c:	4630      	mov	r0, r6
 800588e:	f000 f81d 	bl	80058cc <_isatty_r>
 8005892:	b128      	cbz	r0, 80058a0 <__smakebuf_r+0x70>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	431d      	orrs	r5, r3
 80058a4:	81a5      	strh	r5, [r4, #12]
 80058a6:	e7cf      	b.n	8005848 <__smakebuf_r+0x18>

080058a8 <_fstat_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d07      	ldr	r5, [pc, #28]	@ (80058c8 <_fstat_r+0x20>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	f7fb fac2 	bl	8000e3e <_fstat>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d102      	bne.n	80058c4 <_fstat_r+0x1c>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	b103      	cbz	r3, 80058c4 <_fstat_r+0x1c>
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
 80058c6:	bf00      	nop
 80058c8:	2000036c 	.word	0x2000036c

080058cc <_isatty_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4d06      	ldr	r5, [pc, #24]	@ (80058e8 <_isatty_r+0x1c>)
 80058d0:	2300      	movs	r3, #0
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	602b      	str	r3, [r5, #0]
 80058d8:	f7fb fac1 	bl	8000e5e <_isatty>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_isatty_r+0x1a>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_isatty_r+0x1a>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	2000036c 	.word	0x2000036c

080058ec <_init>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr

080058f8 <_fini>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	bf00      	nop
 80058fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fe:	bc08      	pop	{r3}
 8005900:	469e      	mov	lr, r3
 8005902:	4770      	bx	lr
