
VolTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000670c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800689c  0800689c  0000789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800699c  0800699c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800699c  0800699c  0000799c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069a4  080069a4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069a4  080069a4  000079a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069a8  080069a8  000079a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080069ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000004a4  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcb0  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc5  00000000  00000000  00015d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00017d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a7d  00000000  00000000  00018a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c31  00000000  00000000  000194e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1f6  00000000  00000000  0003b116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd06c  00000000  00000000  0004a30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117378  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fbc  00000000  00000000  001173bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0011b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006884 	.word	0x08006884

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006884 	.word	0x08006884

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <__io_putchar+0x20>)
 8000572:	f003 ffd7 	bl	8004524 <HAL_UART_Transmit>
    return ch;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000114 	.word	0x20000114

08000584 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	429a      	cmp	r2, r3
 8000596:	d116      	bne.n	80005c6 <HAL_TIM_IC_CaptureCallback+0x42>
	{
		switch(htim->Channel)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7f1b      	ldrb	r3, [r3, #28]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d002      	beq.n	80005a6 <HAL_TIM_IC_CaptureCallback+0x22>
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d008      	beq.n	80005b6 <HAL_TIM_IC_CaptureCallback+0x32>
				uiDutyCycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);      /* 占空�???? */
				break;
			case HAL_TIM_ACTIVE_CHANNEL_2:
				uiCycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);          /* 周期 */
				break;
			default:break;
 80005a4:	e00f      	b.n	80005c6 <HAL_TIM_IC_CaptureCallback+0x42>
				uiDutyCycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);      /* 占空�???? */
 80005a6:	2100      	movs	r1, #0
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f003 f997 	bl	80038dc <HAL_TIM_ReadCapturedValue>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <HAL_TIM_IC_CaptureCallback+0x50>)
 80005b2:	6013      	str	r3, [r2, #0]
				break;
 80005b4:	e007      	b.n	80005c6 <HAL_TIM_IC_CaptureCallback+0x42>
				uiCycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);          /* 周期 */
 80005b6:	2104      	movs	r1, #4
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f003 f98f 	bl	80038dc <HAL_TIM_ReadCapturedValue>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a05      	ldr	r2, [pc, #20]	@ (80005d8 <HAL_TIM_IC_CaptureCallback+0x54>)
 80005c2:	6013      	str	r3, [r2, #0]
				break;
 80005c4:	bf00      	nop
		}
	}
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000084 	.word	0x20000084
 80005d4:	2000036c 	.word	0x2000036c
 80005d8:	20000370 	.word	0x20000370

080005dc <Process_UART_Data>:

//接收函数
void Process_UART_Data(uint8_t *buf, uint32_t len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
    uint32_t i = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i < len)
 80005ea:	e0bd      	b.n	8000768 <Process_UART_Data+0x18c>
    {
        // 查找帧头
        if (buf[i] == 0xAA && buf[i + 1] == 0x55)
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2baa      	cmp	r3, #170	@ 0xaa
 80005f6:	f040 80b4 	bne.w	8000762 <Process_UART_Data+0x186>
 80005fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005fc:	3301      	adds	r3, #1
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b55      	cmp	r3, #85	@ 0x55
 8000606:	f040 80ac 	bne.w	8000762 <Process_UART_Data+0x186>
        {
            if (i + 3 < len)
 800060a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800060c:	3303      	adds	r3, #3
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	f240 80af 	bls.w	8000774 <Process_UART_Data+0x198>
            {
                uint8_t length = buf[i + 2];
 8000616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000618:	3302      	adds	r3, #2
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	76fb      	strb	r3, [r7, #27]
                if (i + 3 + length <= len)
 8000622:	7efa      	ldrb	r2, [r7, #27]
 8000624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000626:	4413      	add	r3, r2
 8000628:	3303      	adds	r3, #3
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	f0c0 80a3 	bcc.w	8000778 <Process_UART_Data+0x19c>
                {
                    // 校验和计�??
                    uint8_t checksum = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    for (uint32_t j = i + 3; j < i + 3 + length - 1; j++)
 8000638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063a:	3303      	adds	r3, #3
 800063c:	61fb      	str	r3, [r7, #28]
 800063e:	e00b      	b.n	8000658 <Process_UART_Data+0x7c>
                    {
                        checksum += buf[j];
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	4413      	add	r3, r2
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800064c:	4413      	add	r3, r2
 800064e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    for (uint32_t j = i + 3; j < i + 3 + length - 1; j++)
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3301      	adds	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	7efa      	ldrb	r2, [r7, #27]
 800065a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800065c:	4413      	add	r3, r2
 800065e:	3302      	adds	r3, #2
 8000660:	69fa      	ldr	r2, [r7, #28]
 8000662:	429a      	cmp	r2, r3
 8000664:	d3ec      	bcc.n	8000640 <Process_UART_Data+0x64>
                    }
                    if (checksum == buf[i + 3 + length - 1])
 8000666:	7efa      	ldrb	r2, [r7, #27]
 8000668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066a:	4413      	add	r3, r2
 800066c:	3302      	adds	r3, #2
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000678:	429a      	cmp	r2, r3
 800067a:	d169      	bne.n	8000750 <Process_UART_Data+0x174>
                    {
                        // 解析数据
                        uint8_t msgType = buf[i + 3];
 800067c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067e:	3303      	adds	r3, #3
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	76bb      	strb	r3, [r7, #26]
                        if (msgType == 0x01)
 8000688:	7ebb      	ldrb	r3, [r7, #26]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d163      	bne.n	8000756 <Process_UART_Data+0x17a>
                        {
                            uint32_t dutyCycle = (buf[i + 4] << 24) | (buf[i + 5] << 16) | (buf[i + 6] << 8) | buf[i + 7];
 800068e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000690:	3304      	adds	r3, #4
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	061a      	lsls	r2, r3, #24
 800069a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069c:	3305      	adds	r3, #5
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	440b      	add	r3, r1
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	041b      	lsls	r3, r3, #16
 80006a6:	431a      	orrs	r2, r3
 80006a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006aa:	3306      	adds	r3, #6
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	440b      	add	r3, r1
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	4313      	orrs	r3, r2
 80006b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006b8:	3207      	adds	r2, #7
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	440a      	add	r2, r1
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	617b      	str	r3, [r7, #20]
                            uint32_t cycle = (buf[i + 8] << 24) | (buf[i + 9] << 16) | (buf[i + 10] << 8) | buf[i + 11];
 80006c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c6:	3308      	adds	r3, #8
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	061a      	lsls	r2, r3, #24
 80006d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d2:	3309      	adds	r3, #9
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	440b      	add	r3, r1
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	431a      	orrs	r2, r3
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	330a      	adds	r3, #10
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	440b      	add	r3, r1
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	4313      	orrs	r3, r2
 80006ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ee:	320b      	adds	r2, #11
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	440a      	add	r2, r1
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	613b      	str	r3, [r7, #16]
                            uint32_t frequency = (buf[i + 12] << 24) | (buf[i + 13] << 16) | (buf[i + 14] << 8) | buf[i + 15];
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	330c      	adds	r3, #12
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	061a      	lsls	r2, r3, #24
 8000706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000708:	330d      	adds	r3, #13
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	440b      	add	r3, r1
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	041b      	lsls	r3, r3, #16
 8000712:	431a      	orrs	r2, r3
 8000714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000716:	330e      	adds	r3, #14
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	440b      	add	r3, r1
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	4313      	orrs	r3, r2
 8000722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000724:	320f      	adds	r2, #15
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	440a      	add	r2, r1
 800072a:	7812      	ldrb	r2, [r2, #0]
 800072c:	4313      	orrs	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]

                            // 使用接收到的数据
                            uiDutyCycle = dutyCycle;
 8000730:	4a14      	ldr	r2, [pc, #80]	@ (8000784 <Process_UART_Data+0x1a8>)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	6013      	str	r3, [r2, #0]
                            uiCycle = cycle;
 8000736:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <Process_UART_Data+0x1ac>)
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	6013      	str	r3, [r2, #0]
                            uiFrequency = frequency;
 800073c:	4a13      	ldr	r2, [pc, #76]	@ (800078c <Process_UART_Data+0x1b0>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6013      	str	r3, [r2, #0]

                            printf("receiveData  占空�??: %lu, 周期: %lu, 频率: %lu\r\n", dutyCycle, cycle, frequency);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	6979      	ldr	r1, [r7, #20]
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <Process_UART_Data+0x1b4>)
 800074a:	f005 f9cf 	bl	8005aec <iprintf>
 800074e:	e002      	b.n	8000756 <Process_UART_Data+0x17a>
                            //printf("receive%lu\r\n", dutyCycle);
                        }
                    }
                    else
                    {
                        printf("error \r\n");
 8000750:	4810      	ldr	r0, [pc, #64]	@ (8000794 <Process_UART_Data+0x1b8>)
 8000752:	f005 fa33 	bl	8005bbc <puts>
                    }
                    // 移动索引到下�??�??
                    i += 3 + length;
 8000756:	7efa      	ldrb	r2, [r7, #27]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	4413      	add	r3, r2
 800075c:	3303      	adds	r3, #3
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
            if (i + 3 < len)
 8000760:	e002      	b.n	8000768 <Process_UART_Data+0x18c>
            }
        }
        else
        {
            // 未找到帧头，继续查找
            i++;
 8000762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000764:	3301      	adds	r3, #1
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i < len)
 8000768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	f4ff af3d 	bcc.w	80005ec <Process_UART_Data+0x10>
        }
    }
}
 8000772:	e002      	b.n	800077a <Process_UART_Data+0x19e>
                break;
 8000774:	bf00      	nop
 8000776:	e000      	b.n	800077a <Process_UART_Data+0x19e>
                    break;
 8000778:	bf00      	nop
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	@ 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000036c 	.word	0x2000036c
 8000788:	20000370 	.word	0x20000370
 800078c:	20000374 	.word	0x20000374
 8000790:	0800689c 	.word	0x0800689c
 8000794:	080068d8 	.word	0x080068d8

08000798 <Send_Measurement_Message>:
*/



void Send_Measurement_Message(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
    uint8_t message[17]; // Total length of the message is 17 bytes
    uint8_t checksum = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	77fb      	strb	r3, [r7, #31]
    int index = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

    // Frame header
    message[index++] = 0xAA;
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	617a      	str	r2, [r7, #20]
 80007ac:	3320      	adds	r3, #32
 80007ae:	443b      	add	r3, r7
 80007b0:	22aa      	movs	r2, #170	@ 0xaa
 80007b2:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = 0x55;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	617a      	str	r2, [r7, #20]
 80007bc:	3320      	adds	r3, #32
 80007be:	443b      	add	r3, r7
 80007c0:	2255      	movs	r2, #85	@ 0x55
 80007c2:	f803 2c20 	strb.w	r2, [r3, #-32]

    // Length
    message[index++] = 14; // Length from message type to checksum
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	617a      	str	r2, [r7, #20]
 80007cc:	3320      	adds	r3, #32
 80007ce:	443b      	add	r3, r7
 80007d0:	220e      	movs	r2, #14
 80007d2:	f803 2c20 	strb.w	r2, [r3, #-32]

    // Message type
    message[index++] = 0x01;
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	617a      	str	r2, [r7, #20]
 80007dc:	3320      	adds	r3, #32
 80007de:	443b      	add	r3, r7
 80007e0:	2201      	movs	r2, #1
 80007e2:	f803 2c20 	strb.w	r2, [r3, #-32]

    // Data (big-endian format)
    // uiDutyCycle
    message[index++] = (uiDutyCycle >> 24) & 0xFF;
 80007e6:	4b54      	ldr	r3, [pc, #336]	@ (8000938 <Send_Measurement_Message+0x1a0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	0e19      	lsrs	r1, r3, #24
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	617a      	str	r2, [r7, #20]
 80007f2:	b2ca      	uxtb	r2, r1
 80007f4:	3320      	adds	r3, #32
 80007f6:	443b      	add	r3, r7
 80007f8:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = (uiDutyCycle >> 16) & 0xFF;
 80007fc:	4b4e      	ldr	r3, [pc, #312]	@ (8000938 <Send_Measurement_Message+0x1a0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	0c19      	lsrs	r1, r3, #16
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	617a      	str	r2, [r7, #20]
 8000808:	b2ca      	uxtb	r2, r1
 800080a:	3320      	adds	r3, #32
 800080c:	443b      	add	r3, r7
 800080e:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = (uiDutyCycle >> 8) & 0xFF;
 8000812:	4b49      	ldr	r3, [pc, #292]	@ (8000938 <Send_Measurement_Message+0x1a0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	0a19      	lsrs	r1, r3, #8
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	617a      	str	r2, [r7, #20]
 800081e:	b2ca      	uxtb	r2, r1
 8000820:	3320      	adds	r3, #32
 8000822:	443b      	add	r3, r7
 8000824:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = uiDutyCycle & 0xFF;
 8000828:	4b43      	ldr	r3, [pc, #268]	@ (8000938 <Send_Measurement_Message+0x1a0>)
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	617a      	str	r2, [r7, #20]
 8000832:	b2ca      	uxtb	r2, r1
 8000834:	3320      	adds	r3, #32
 8000836:	443b      	add	r3, r7
 8000838:	f803 2c20 	strb.w	r2, [r3, #-32]

    // uiCycle
    message[index++] = (uiCycle >> 24) & 0xFF;
 800083c:	4b3f      	ldr	r3, [pc, #252]	@ (800093c <Send_Measurement_Message+0x1a4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	0e19      	lsrs	r1, r3, #24
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	617a      	str	r2, [r7, #20]
 8000848:	b2ca      	uxtb	r2, r1
 800084a:	3320      	adds	r3, #32
 800084c:	443b      	add	r3, r7
 800084e:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = (uiCycle >> 16) & 0xFF;
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <Send_Measurement_Message+0x1a4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	0c19      	lsrs	r1, r3, #16
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	617a      	str	r2, [r7, #20]
 800085e:	b2ca      	uxtb	r2, r1
 8000860:	3320      	adds	r3, #32
 8000862:	443b      	add	r3, r7
 8000864:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = (uiCycle >> 8) & 0xFF;
 8000868:	4b34      	ldr	r3, [pc, #208]	@ (800093c <Send_Measurement_Message+0x1a4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0a19      	lsrs	r1, r3, #8
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	617a      	str	r2, [r7, #20]
 8000874:	b2ca      	uxtb	r2, r1
 8000876:	3320      	adds	r3, #32
 8000878:	443b      	add	r3, r7
 800087a:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = uiCycle & 0xFF;
 800087e:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <Send_Measurement_Message+0x1a4>)
 8000880:	6819      	ldr	r1, [r3, #0]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	617a      	str	r2, [r7, #20]
 8000888:	b2ca      	uxtb	r2, r1
 800088a:	3320      	adds	r3, #32
 800088c:	443b      	add	r3, r7
 800088e:	f803 2c20 	strb.w	r2, [r3, #-32]

    // uiFrequency
    message[index++] = (uiFrequency >> 24) & 0xFF;
 8000892:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <Send_Measurement_Message+0x1a8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	0e19      	lsrs	r1, r3, #24
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	617a      	str	r2, [r7, #20]
 800089e:	b2ca      	uxtb	r2, r1
 80008a0:	3320      	adds	r3, #32
 80008a2:	443b      	add	r3, r7
 80008a4:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = (uiFrequency >> 16) & 0xFF;
 80008a8:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <Send_Measurement_Message+0x1a8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	0c19      	lsrs	r1, r3, #16
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	617a      	str	r2, [r7, #20]
 80008b4:	b2ca      	uxtb	r2, r1
 80008b6:	3320      	adds	r3, #32
 80008b8:	443b      	add	r3, r7
 80008ba:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = (uiFrequency >> 8) & 0xFF;
 80008be:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <Send_Measurement_Message+0x1a8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	0a19      	lsrs	r1, r3, #8
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	617a      	str	r2, [r7, #20]
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	3320      	adds	r3, #32
 80008ce:	443b      	add	r3, r7
 80008d0:	f803 2c20 	strb.w	r2, [r3, #-32]
    message[index++] = uiFrequency & 0xFF;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <Send_Measurement_Message+0x1a8>)
 80008d6:	6819      	ldr	r1, [r3, #0]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	617a      	str	r2, [r7, #20]
 80008de:	b2ca      	uxtb	r2, r1
 80008e0:	3320      	adds	r3, #32
 80008e2:	443b      	add	r3, r7
 80008e4:	f803 2c20 	strb.w	r2, [r3, #-32]

    // Checksum calculation (from message type to data)
    for (int i = 3; i < index; i++)
 80008e8:	2303      	movs	r3, #3
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	e009      	b.n	8000902 <Send_Measurement_Message+0x16a>
    {
        checksum += message[i];
 80008ee:	463a      	mov	r2, r7
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	4413      	add	r3, r2
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	7ffb      	ldrb	r3, [r7, #31]
 80008f8:	4413      	add	r3, r2
 80008fa:	77fb      	strb	r3, [r7, #31]
    for (int i = 3; i < index; i++)
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	3301      	adds	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	429a      	cmp	r2, r3
 8000908:	dbf1      	blt.n	80008ee <Send_Measurement_Message+0x156>
    }
    message[index++] = checksum;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	617a      	str	r2, [r7, #20]
 8000910:	3320      	adds	r3, #32
 8000912:	443b      	add	r3, r7
 8000914:	7ffa      	ldrb	r2, [r7, #31]
 8000916:	f803 2c20 	strb.w	r2, [r3, #-32]

    // Transmit the message via UART2 (blocking mode)
    HAL_UART_Transmit(&huart2, message, index, HAL_MAX_DELAY);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4639      	mov	r1, r7
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	4807      	ldr	r0, [pc, #28]	@ (8000944 <Send_Measurement_Message+0x1ac>)
 8000926:	f003 fdfd 	bl	8004524 <HAL_UART_Transmit>
    printf("sendSuccess \r\n" );
 800092a:	4807      	ldr	r0, [pc, #28]	@ (8000948 <Send_Measurement_Message+0x1b0>)
 800092c:	f005 f946 	bl	8005bbc <puts>
}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000036c 	.word	0x2000036c
 800093c:	20000370 	.word	0x20000370
 8000940:	20000374 	.word	0x20000374
 8000944:	2000015c 	.word	0x2000015c
 8000948:	080068e0 	.word	0x080068e0

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fea4 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f83a 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 fa7e 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 800095c:	f000 fa36 	bl	8000dcc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000960:	f000 f9ae 	bl	8000cc0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000964:	f000 f89a 	bl	8000a9c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000968:	f000 f934 	bl	8000bd4 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 800096c:	f000 f9d2 	bl	8000d14 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000970:	f000 f9fa 	bl	8000d68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);   /* 使能定时�????4通道1输出PWM�???? */

	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);  /* 使能定时�????2通道1的PWM输入捕获 */
 8000974:	2100      	movs	r1, #0
 8000976:	480f      	ldr	r0, [pc, #60]	@ (80009b4 <main+0x68>)
 8000978:	f002 fb30 	bl	8002fdc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);  /* 使能定时�????2通道2的PWM输入捕获 */
 800097c:	2104      	movs	r1, #4
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <main+0x68>)
 8000980:	f002 fb2c 	bl	8002fdc <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		HAL_Delay(500);
 8000984:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000988:	f000 fefa 	bl	8001780 <HAL_Delay>
		uiFrequency = 1000000 / uiCycle;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <main+0x6c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <main+0x70>)
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <main+0x74>)
 8000998:	6013      	str	r3, [r2, #0]
		printf("DataGet 空占�??:%luus    周期:%luus    频率:%luHz    \r\n", (unsigned long)uiDutyCycle, (unsigned long)uiCycle, (unsigned long)uiFrequency);
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <main+0x78>)
 800099c:	6819      	ldr	r1, [r3, #0]
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <main+0x6c>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <main+0x74>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4808      	ldr	r0, [pc, #32]	@ (80009c8 <main+0x7c>)
 80009a8:	f005 f8a0 	bl	8005aec <iprintf>
		Send_Measurement_Message(); // 发�?�测量数据报�??
 80009ac:	f7ff fef4 	bl	8000798 <Send_Measurement_Message>
		HAL_Delay(500);
 80009b0:	bf00      	nop
 80009b2:	e7e7      	b.n	8000984 <main+0x38>
 80009b4:	20000084 	.word	0x20000084
 80009b8:	20000370 	.word	0x20000370
 80009bc:	000f4240 	.word	0x000f4240
 80009c0:	20000374 	.word	0x20000374
 80009c4:	2000036c 	.word	0x2000036c
 80009c8:	080068f0 	.word	0x080068f0

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	@ 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2230      	movs	r2, #48	@ 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 f9ce 	bl	8005d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <SystemClock_Config+0xc8>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	4a26      	ldr	r2, [pc, #152]	@ (8000a94 <SystemClock_Config+0xc8>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <SystemClock_Config+0xc8>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a20      	ldr	r2, [pc, #128]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	2310      	movs	r3, #16
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a40:	2348      	movs	r3, #72	@ 0x48
 8000a42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fd69 	bl	8002528 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a5c:	f000 fa24 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2102      	movs	r1, #2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 ffcb 	bl	8002a18 <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a88:	f000 fa0e 	bl	8000ea8 <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3750      	adds	r7, #80	@ 0x50
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b090      	sub	sp, #64	@ 0x40
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000ad8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000adc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000ade:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000ae0:	2247      	movs	r2, #71	@ 0x47
 8000ae2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000aea:	4b39      	ldr	r3, [pc, #228]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000aec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000af0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af2:	4b37      	ldr	r3, [pc, #220]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b35      	ldr	r3, [pc, #212]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000afe:	4834      	ldr	r0, [pc, #208]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000b00:	f002 f96a 	bl	8002dd8 <HAL_TIM_Base_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b0a:	f000 f9cd 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b18:	4619      	mov	r1, r3
 8000b1a:	482d      	ldr	r0, [pc, #180]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000b1c:	f002 fdd4 	bl	80036c8 <HAL_TIM_ConfigClockSource>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b26:	f000 f9bf 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b2a:	4829      	ldr	r0, [pc, #164]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000b2c:	f002 f9fc 	bl	8002f28 <HAL_TIM_IC_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b36:	f000 f9b7 	bl	8000ea8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000b3e:	2360      	movs	r3, #96	@ 0x60
 8000b40:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	481e      	ldr	r0, [pc, #120]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000b56:	f002 fe7e 	bl	8003856 <HAL_TIM_SlaveConfigSynchro>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000b60:	f000 f9a2 	bl	8000ea8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b64:	2302      	movs	r3, #2
 8000b66:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4814      	ldr	r0, [pc, #80]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000b7e:	f002 fc45 	bl	800340c <HAL_TIM_IC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b88:	f000 f98e 	bl	8000ea8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b90:	2301      	movs	r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2204      	movs	r2, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000b9e:	f002 fc35 	bl	800340c <HAL_TIM_IC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000ba8:	f000 f97e 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_TIM2_Init+0x134>)
 8000bba:	f003 fbd3 	bl	8004364 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8000bc4:	f000 f970 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3740      	adds	r7, #64	@ 0x40
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000084 	.word	0x20000084

08000bd4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	@ 0x38
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c04:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c06:	4a2d      	ldr	r2, [pc, #180]	@ (8000cbc <MX_TIM5_Init+0xe8>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c0c:	2247      	movs	r2, #71	@ 0x47
 8000c0e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b29      	ldr	r3, [pc, #164]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8000c16:	4b28      	ldr	r3, [pc, #160]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c18:	2263      	movs	r2, #99	@ 0x63
 8000c1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1c:	4b26      	ldr	r3, [pc, #152]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b25      	ldr	r3, [pc, #148]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c28:	4823      	ldr	r0, [pc, #140]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c2a:	f002 f8d5 	bl	8002dd8 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000c34:	f000 f938 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c42:	4619      	mov	r1, r3
 8000c44:	481c      	ldr	r0, [pc, #112]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c46:	f002 fd3f 	bl	80036c8 <HAL_TIM_ConfigClockSource>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000c50:	f000 f92a 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000c54:	4818      	ldr	r0, [pc, #96]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c56:	f002 f90e 	bl	8002e76 <HAL_TIM_PWM_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000c60:	f000 f922 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	4619      	mov	r1, r3
 8000c72:	4811      	ldr	r0, [pc, #68]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c74:	f003 fb76 	bl	8004364 <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000c7e:	f000 f913 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c82:	2360      	movs	r3, #96	@ 0x60
 8000c84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000c86:	2332      	movs	r3, #50	@ 0x32
 8000c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	4619      	mov	r1, r3
 8000c98:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000c9a:	f002 fc53 	bl	8003544 <HAL_TIM_PWM_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000ca4:	f000 f900 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ca8:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <MX_TIM5_Init+0xe4>)
 8000caa:	f000 f98f 	bl	8000fcc <HAL_TIM_MspPostInit>

}
 8000cae:	bf00      	nop
 8000cb0:	3738      	adds	r7, #56	@ 0x38
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000cc 	.word	0x200000cc
 8000cbc:	40000c00 	.word	0x40000c00

08000cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <MX_USART1_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf8:	f003 fbc4 	bl	8004484 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f000 f8d1 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000114 	.word	0x20000114
 8000d10:	40011000 	.word	0x40011000

08000d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	f003 fb9a 	bl	8004484 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d56:	f000 f8a7 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000015c 	.word	0x2000015c
 8000d64:	40004400 	.word	0x40004400

08000d68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000d6e:	4a16      	ldr	r2, [pc, #88]	@ (8000dc8 <MX_USART3_UART_Init+0x60>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d9e:	4809      	ldr	r0, [pc, #36]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000da0:	f003 fb70 	bl	8004484 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000daa:	f000 f87d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <MX_USART3_UART_Init+0x5c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f042 0210 	orr.w	r2, r2, #16
 8000dbc:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART3_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001a4 	.word	0x200001a4
 8000dc8:	40004800 	.word	0x40004800

08000dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_DMA_Init+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a1e      	ldr	r2, [pc, #120]	@ (8000e54 <MX_DMA_Init+0x88>)
 8000ddc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_DMA_Init+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <MX_DMA_Init+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <MX_DMA_Init+0x88>)
 8000df8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <MX_DMA_Init+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	200c      	movs	r0, #12
 8000e10:	f000 fdb5 	bl	800197e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e14:	200c      	movs	r0, #12
 8000e16:	f000 fdce 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	200e      	movs	r0, #14
 8000e20:	f000 fdad 	bl	800197e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e24:	200e      	movs	r0, #14
 8000e26:	f000 fdc6 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	203a      	movs	r0, #58	@ 0x3a
 8000e30:	f000 fda5 	bl	800197e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e34:	203a      	movs	r0, #58	@ 0x3a
 8000e36:	f000 fdbe 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2046      	movs	r0, #70	@ 0x46
 8000e40:	f000 fd9d 	bl	800197e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000e44:	2046      	movs	r0, #70	@ 0x46
 8000e46:	f000 fdb6 	bl	80019b6 <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <MX_GPIO_Init+0x4c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea4 <MX_GPIO_Init+0x4c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <MX_GPIO_Init+0x4c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_GPIO_Init+0x4c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a08      	ldr	r2, [pc, #32]	@ (8000ea4 <MX_GPIO_Init+0x4c>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <MX_GPIO_Init+0x4c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f24:	d134      	bne.n	8000f90 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xbc>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a24      	ldr	r2, [pc, #144]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xbc>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xbc>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xbc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xbc>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xbc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <HAL_TIM_Base_MspInit+0xc0>)
 8000f7a:	f001 f939 	bl	80021f0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	201c      	movs	r0, #28
 8000f84:	f000 fcfb 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f88:	201c      	movs	r0, #28
 8000f8a:	f000 fd14 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f8e:	e012      	b.n	8000fb6 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM5)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <HAL_TIM_Base_MspInit+0xc4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d10d      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xbc>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	4a07      	ldr	r2, [pc, #28]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xbc>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000faa:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_TIM_Base_MspInit+0xbc>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	@ 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40000c00 	.word	0x40000c00

08000fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <HAL_TIM_MspPostInit+0x68>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d11d      	bne.n	800102a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_TIM_MspPostInit+0x6c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a10      	ldr	r2, [pc, #64]	@ (8001038 <HAL_TIM_MspPostInit+0x6c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_TIM_MspPostInit+0x6c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	2301      	movs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	@ (800103c <HAL_TIM_MspPostInit+0x70>)
 8001026:	f001 f8e3 	bl	80021f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40000c00 	.word	0x40000c00
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	@ 0x38
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a67      	ldr	r2, [pc, #412]	@ (80011fc <HAL_UART_MspInit+0x1bc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	f040 8092 	bne.w	8001188 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	4b65      	ldr	r3, [pc, #404]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 800106a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106c:	4a64      	ldr	r2, [pc, #400]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	6453      	str	r3, [r2, #68]	@ 0x44
 8001074:	4b62      	ldr	r3, [pc, #392]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 8001076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	4b5e      	ldr	r3, [pc, #376]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	4a5d      	ldr	r2, [pc, #372]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001090:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800109c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ae:	2307      	movs	r3, #7
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b6:	4619      	mov	r1, r3
 80010b8:	4852      	ldr	r0, [pc, #328]	@ (8001204 <HAL_UART_MspInit+0x1c4>)
 80010ba:	f001 f899 	bl	80021f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80010be:	4b52      	ldr	r3, [pc, #328]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010c0:	4a52      	ldr	r2, [pc, #328]	@ (800120c <HAL_UART_MspInit+0x1cc>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80010c4:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010de:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e0:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e6:	4b48      	ldr	r3, [pc, #288]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010ec:	4b46      	ldr	r3, [pc, #280]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010f2:	4b45      	ldr	r3, [pc, #276]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f8:	4b43      	ldr	r3, [pc, #268]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010fe:	4842      	ldr	r0, [pc, #264]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 8001100:	f000 fc74 	bl	80019ec <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800110a:	f7ff fecd 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a3d      	ldr	r2, [pc, #244]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 8001112:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001114:	4a3c      	ldr	r2, [pc, #240]	@ (8001208 <HAL_UART_MspInit+0x1c8>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800111a:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 800111c:	4a3d      	ldr	r2, [pc, #244]	@ (8001214 <HAL_UART_MspInit+0x1d4>)
 800111e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001120:	4b3b      	ldr	r3, [pc, #236]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 8001122:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001126:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001128:	4b39      	ldr	r3, [pc, #228]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 800112a:	2240      	movs	r2, #64	@ 0x40
 800112c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112e:	4b38      	ldr	r3, [pc, #224]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	4b36      	ldr	r3, [pc, #216]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 8001136:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	4b34      	ldr	r3, [pc, #208]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001142:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001148:	4b31      	ldr	r3, [pc, #196]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800114e:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001154:	4b2e      	ldr	r3, [pc, #184]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800115a:	482d      	ldr	r0, [pc, #180]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 800115c:	f000 fc46 	bl	80019ec <HAL_DMA_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001166:	f7ff fe9f 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a28      	ldr	r2, [pc, #160]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 800116e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001170:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <HAL_UART_MspInit+0x1d0>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2025      	movs	r0, #37	@ 0x25
 800117c:	f000 fbff 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001180:	2025      	movs	r0, #37	@ 0x25
 8001182:	f000 fc18 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001186:	e0e0      	b.n	800134a <HAL_UART_MspInit+0x30a>
  else if(huart->Instance==USART2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <HAL_UART_MspInit+0x1d8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d144      	bne.n	800121c <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <HAL_UART_MspInit+0x1c0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ca:	230c      	movs	r3, #12
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011da:	2307      	movs	r3, #7
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e2:	4619      	mov	r1, r3
 80011e4:	4807      	ldr	r0, [pc, #28]	@ (8001204 <HAL_UART_MspInit+0x1c4>)
 80011e6:	f001 f803 	bl	80021f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2026      	movs	r0, #38	@ 0x26
 80011f0:	f000 fbc5 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f4:	2026      	movs	r0, #38	@ 0x26
 80011f6:	f000 fbde 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 80011fa:	e0a6      	b.n	800134a <HAL_UART_MspInit+0x30a>
 80011fc:	40011000 	.word	0x40011000
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000
 8001208:	200001ec 	.word	0x200001ec
 800120c:	40026440 	.word	0x40026440
 8001210:	2000024c 	.word	0x2000024c
 8001214:	400264b8 	.word	0x400264b8
 8001218:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a4c      	ldr	r2, [pc, #304]	@ (8001354 <HAL_UART_MspInit+0x314>)
 8001222:	4293      	cmp	r3, r2
 8001224:	f040 8091 	bne.w	800134a <HAL_UART_MspInit+0x30a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	4b4a      	ldr	r3, [pc, #296]	@ (8001358 <HAL_UART_MspInit+0x318>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	4a49      	ldr	r2, [pc, #292]	@ (8001358 <HAL_UART_MspInit+0x318>)
 8001232:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001236:	6413      	str	r3, [r2, #64]	@ 0x40
 8001238:	4b47      	ldr	r3, [pc, #284]	@ (8001358 <HAL_UART_MspInit+0x318>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b43      	ldr	r3, [pc, #268]	@ (8001358 <HAL_UART_MspInit+0x318>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	4a42      	ldr	r2, [pc, #264]	@ (8001358 <HAL_UART_MspInit+0x318>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	6313      	str	r3, [r2, #48]	@ 0x30
 8001254:	4b40      	ldr	r3, [pc, #256]	@ (8001358 <HAL_UART_MspInit+0x318>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001260:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001272:	2307      	movs	r3, #7
 8001274:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	4837      	ldr	r0, [pc, #220]	@ (800135c <HAL_UART_MspInit+0x31c>)
 800127e:	f000 ffb7 	bl	80021f0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001282:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <HAL_UART_MspInit+0x320>)
 8001284:	4a37      	ldr	r2, [pc, #220]	@ (8001364 <HAL_UART_MspInit+0x324>)
 8001286:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001288:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <HAL_UART_MspInit+0x320>)
 800128a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800128e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001290:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <HAL_UART_MspInit+0x320>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001296:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <HAL_UART_MspInit+0x320>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800129c:	4b30      	ldr	r3, [pc, #192]	@ (8001360 <HAL_UART_MspInit+0x320>)
 800129e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <HAL_UART_MspInit+0x320>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <HAL_UART_MspInit+0x320>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80012b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <HAL_UART_MspInit+0x320>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <HAL_UART_MspInit+0x320>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012bc:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <HAL_UART_MspInit+0x320>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80012c2:	4827      	ldr	r0, [pc, #156]	@ (8001360 <HAL_UART_MspInit+0x320>)
 80012c4:	f000 fb92 	bl	80019ec <HAL_DMA_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_UART_MspInit+0x292>
      Error_Handler();
 80012ce:	f7ff fdeb 	bl	8000ea8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <HAL_UART_MspInit+0x320>)
 80012d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012d8:	4a21      	ldr	r2, [pc, #132]	@ (8001360 <HAL_UART_MspInit+0x320>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80012de:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <HAL_UART_MspInit+0x328>)
 80012e0:	4a22      	ldr	r2, [pc, #136]	@ (800136c <HAL_UART_MspInit+0x32c>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80012e4:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <HAL_UART_MspInit+0x328>)
 80012e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <HAL_UART_MspInit+0x328>)
 80012ee:	2240      	movs	r2, #64	@ 0x40
 80012f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <HAL_UART_MspInit+0x328>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <HAL_UART_MspInit+0x328>)
 80012fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_UART_MspInit+0x328>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001306:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <HAL_UART_MspInit+0x328>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <HAL_UART_MspInit+0x328>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <HAL_UART_MspInit+0x328>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <HAL_UART_MspInit+0x328>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800131e:	4812      	ldr	r0, [pc, #72]	@ (8001368 <HAL_UART_MspInit+0x328>)
 8001320:	f000 fb64 	bl	80019ec <HAL_DMA_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 800132a:	f7ff fdbd 	bl	8000ea8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <HAL_UART_MspInit+0x328>)
 8001332:	639a      	str	r2, [r3, #56]	@ 0x38
 8001334:	4a0c      	ldr	r2, [pc, #48]	@ (8001368 <HAL_UART_MspInit+0x328>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2027      	movs	r0, #39	@ 0x27
 8001340:	f000 fb1d 	bl	800197e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001344:	2027      	movs	r0, #39	@ 0x27
 8001346:	f000 fb36 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3738      	adds	r7, #56	@ 0x38
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40004800 	.word	0x40004800
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400
 8001360:	200002ac 	.word	0x200002ac
 8001364:	40026028 	.word	0x40026028
 8001368:	2000030c 	.word	0x2000030c
 800136c:	40026058 	.word	0x40026058

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 f9bb 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <DMA1_Stream1_IRQHandler+0x10>)
 80013d6:	f000 fca1 	bl	8001d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002ac 	.word	0x200002ac

080013e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <DMA1_Stream3_IRQHandler+0x10>)
 80013ea:	f000 fc97 	bl	8001d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000030c 	.word	0x2000030c

080013f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <TIM2_IRQHandler+0x10>)
 80013fe:	f001 ff15 	bl	800322c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000084 	.word	0x20000084

0800140c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <USART1_IRQHandler+0x10>)
 8001412:	f003 f9b7 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000114 	.word	0x20000114

08001420 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <USART2_IRQHandler+0x10>)
 8001426:	f003 f9ad 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000015c 	.word	0x2000015c

08001434 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
    // Check for IDLE flag
    if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE) &&
 800143a:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <USART3_IRQHandler+0x74>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b10      	cmp	r3, #16
 8001446:	d127      	bne.n	8001498 <USART3_IRQHandler+0x64>
        __HAL_UART_GET_IT_SOURCE(&huart3, UART_IT_IDLE))
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <USART3_IRQHandler+0x74>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0310 	and.w	r3, r3, #16
    if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE) &&
 8001452:	2b00      	cmp	r3, #0
 8001454:	d020      	beq.n	8001498 <USART3_IRQHandler+0x64>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart3); // Clear IDLE flag
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <USART3_IRQHandler+0x74>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <USART3_IRQHandler+0x74>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
        printf("USART3_IRQHandler used\r\n");
 800146c:	480f      	ldr	r0, [pc, #60]	@ (80014ac <USART3_IRQHandler+0x78>)
 800146e:	f004 fba5 	bl	8005bbc <puts>
        // Stop DMA reception
        HAL_UART_DMAStop(&huart3);
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <USART3_IRQHandler+0x74>)
 8001474:	f003 f906 	bl	8004684 <HAL_UART_DMAStop>

        // Calculate the length of received data
        uint32_t received_length = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart3.hdmarx);
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <USART3_IRQHandler+0x74>)
 800147a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001484:	607b      	str	r3, [r7, #4]

        // Process the received data
        Process_UART_Data(rxBuffer, received_length);
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <USART3_IRQHandler+0x7c>)
 800148a:	f7ff f8a7 	bl	80005dc <Process_UART_Data>

        // Restart DMA reception
        HAL_UART_Receive_DMA(&huart3, rxBuffer, RX_BUFFER_SIZE);
 800148e:	2240      	movs	r2, #64	@ 0x40
 8001490:	4907      	ldr	r1, [pc, #28]	@ (80014b0 <USART3_IRQHandler+0x7c>)
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <USART3_IRQHandler+0x74>)
 8001494:	f003 f8d1 	bl	800463a <HAL_UART_Receive_DMA>
    }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <USART3_IRQHandler+0x74>)
 800149a:	f003 f973 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200001a4 	.word	0x200001a4
 80014ac:	08006930 	.word	0x08006930
 80014b0:	20000378 	.word	0x20000378

080014b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <DMA2_Stream2_IRQHandler+0x10>)
 80014ba:	f000 fc2f 	bl	8001d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200001ec 	.word	0x200001ec

080014c8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014cc:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <DMA2_Stream7_IRQHandler+0x10>)
 80014ce:	f000 fc25 	bl	8001d1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000024c 	.word	0x2000024c

080014dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e00a      	b.n	8001504 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ee:	f3af 8000 	nop.w
 80014f2:	4601      	mov	r1, r0
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	b2ca      	uxtb	r2, r1
 80014fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf0      	blt.n	80014ee <_read+0x12>
  }

  return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e009      	b.n	800153c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f815 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf1      	blt.n	8001528 <_write+0x12>
  }
  return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_close>:

int _close(int file)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001576:	605a      	str	r2, [r3, #4]
  return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_isatty>:

int _isatty(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	@ (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f004 fc16 	bl	8005e18 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	@ (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20020000 	.word	0x20020000
 8001618:	00000400 	.word	0x00000400
 800161c:	200003b8 	.word	0x200003b8
 8001620:	20000510 	.word	0x20000510

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800164c:	f7ff ffea 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f004 fbd5 	bl	8005e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff f967 	bl	800094c <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800168c:	080069ac 	.word	0x080069ac
  ldr r2, =_sbss
 8001690:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001694:	2000050c 	.word	0x2000050c

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f94f 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fbf0 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f967 	bl	80019d2 <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f92f 	bl	800197e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	@ (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000000 	.word	0x20000000
 8001738:	20000008 	.word	0x20000008
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	200003bc 	.word	0x200003bc

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200003bc 	.word	0x200003bc

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	@ (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	@ (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	@ (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	@ (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	@ 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	@ 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f7ff ff8e 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff29 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff3e 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff8e 	bl	80018bc <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5d 	bl	8001868 <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff31 	bl	800182c <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffa2 	bl	8001924 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff feb6 	bl	8001768 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e099      	b.n	8001b3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a28:	e00f      	b.n	8001a4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a2a:	f7ff fe9d 	bl	8001768 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d908      	bls.n	8001a4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2203      	movs	r2, #3
 8001a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e078      	b.n	8001b3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e8      	bne.n	8001a2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_DMA_Init+0x158>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d107      	bne.n	8001ab4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aac:	4313      	orrs	r3, r2
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f023 0307 	bic.w	r3, r3, #7
 8001aca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d117      	bne.n	8001b0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00e      	beq.n	8001b0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fb01 	bl	80020f8 <DMA_CheckFifoParam>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2240      	movs	r2, #64	@ 0x40
 8001b00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e016      	b.n	8001b3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fab8 	bl	800208c <DMA_CalcBaseAndBitshift>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b24:	223f      	movs	r2, #63	@ 0x3f
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	f010803f 	.word	0xf010803f

08001b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_DMA_Start_IT+0x26>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e040      	b.n	8001bf0 <HAL_DMA_Start_IT+0xa8>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d12f      	bne.n	8001be2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2202      	movs	r2, #2
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fa4a 	bl	8002030 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba0:	223f      	movs	r2, #63	@ 0x3f
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0216 	orr.w	r2, r2, #22
 8001bb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0208 	orr.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e005      	b.n	8001bee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bea:	2302      	movs	r3, #2
 8001bec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c06:	f7ff fdaf 	bl	8001768 <HAL_GetTick>
 8001c0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d008      	beq.n	8001c2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2280      	movs	r2, #128	@ 0x80
 8001c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e052      	b.n	8001cd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0216 	bic.w	r2, r2, #22
 8001c38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <HAL_DMA_Abort+0x62>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0208 	bic.w	r2, r2, #8
 8001c68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7a:	e013      	b.n	8001ca4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7c:	f7ff fd74 	bl	8001768 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	d90c      	bls.n	8001ca4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2203      	movs	r2, #3
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e015      	b.n	8001cd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1e4      	bne.n	8001c7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb6:	223f      	movs	r2, #63	@ 0x3f
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d004      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2280      	movs	r2, #128	@ 0x80
 8001cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00c      	b.n	8001d10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2205      	movs	r2, #5
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d28:	4b8e      	ldr	r3, [pc, #568]	@ (8001f64 <HAL_DMA_IRQHandler+0x248>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a8e      	ldr	r2, [pc, #568]	@ (8001f68 <HAL_DMA_IRQHandler+0x24c>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0a9b      	lsrs	r3, r3, #10
 8001d34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d46:	2208      	movs	r2, #8
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01a      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0204 	bic.w	r2, r2, #4
 8001d6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d74:	2208      	movs	r2, #8
 8001d76:	409a      	lsls	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d012      	beq.n	8001dbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001daa:	2201      	movs	r2, #1
 8001dac:	409a      	lsls	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	f043 0202 	orr.w	r2, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d012      	beq.n	8001df4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de0:	2204      	movs	r2, #4
 8001de2:	409a      	lsls	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	f043 0204 	orr.w	r2, r3, #4
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	2210      	movs	r2, #16
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d043      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d03c      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e16:	2210      	movs	r2, #16
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d018      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d108      	bne.n	8001e4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d024      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4798      	blx	r3
 8001e4a:	e01f      	b.n	8001e8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01b      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
 8001e5c:	e016      	b.n	8001e8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0208 	bic.w	r2, r2, #8
 8001e7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e90:	2220      	movs	r2, #32
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 808f 	beq.w	8001fbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8087 	beq.w	8001fbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d136      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0216 	bic.w	r2, r2, #22
 8001ed4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <HAL_DMA_IRQHandler+0x1da>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0208 	bic.w	r2, r2, #8
 8001f04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	223f      	movs	r2, #63	@ 0x3f
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d07e      	beq.n	8002028 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	4798      	blx	r3
        }
        return;
 8001f32:	e079      	b.n	8002028 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01d      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10d      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d031      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
 8001f60:	e02c      	b.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
 8001f62:	bf00      	nop
 8001f64:	20000000 	.word	0x20000000
 8001f68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d023      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
 8001f7c:	e01e      	b.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10f      	bne.n	8001fac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0210 	bic.w	r2, r2, #16
 8001f9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d032      	beq.n	800202a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d022      	beq.n	8002016 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	3301      	adds	r3, #1
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d307      	bcc.n	8002004 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f2      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x2cc>
 8002002:	e000      	b.n	8002006 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002004:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	4798      	blx	r3
 8002026:	e000      	b.n	800202a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002028:	bf00      	nop
    }
  }
}
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800204c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b40      	cmp	r3, #64	@ 0x40
 800205c:	d108      	bne.n	8002070 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800206e:	e007      	b.n	8002080 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	60da      	str	r2, [r3, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	3b10      	subs	r3, #16
 800209c:	4a14      	ldr	r2, [pc, #80]	@ (80020f0 <DMA_CalcBaseAndBitshift+0x64>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020a6:	4a13      	ldr	r2, [pc, #76]	@ (80020f4 <DMA_CalcBaseAndBitshift+0x68>)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d909      	bls.n	80020ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	1d1a      	adds	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80020cc:	e007      	b.n	80020de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	aaaaaaab 	.word	0xaaaaaaab
 80020f4:	08006960 	.word	0x08006960

080020f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11f      	bne.n	8002152 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d856      	bhi.n	80021c6 <DMA_CheckFifoParam+0xce>
 8002118:	a201      	add	r2, pc, #4	@ (adr r2, 8002120 <DMA_CheckFifoParam+0x28>)
 800211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211e:	bf00      	nop
 8002120:	08002131 	.word	0x08002131
 8002124:	08002143 	.word	0x08002143
 8002128:	08002131 	.word	0x08002131
 800212c:	080021c7 	.word	0x080021c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d046      	beq.n	80021ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002140:	e043      	b.n	80021ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800214a:	d140      	bne.n	80021ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002150:	e03d      	b.n	80021ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800215a:	d121      	bne.n	80021a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d837      	bhi.n	80021d2 <DMA_CheckFifoParam+0xda>
 8002162:	a201      	add	r2, pc, #4	@ (adr r2, 8002168 <DMA_CheckFifoParam+0x70>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	08002179 	.word	0x08002179
 800216c:	0800217f 	.word	0x0800217f
 8002170:	08002179 	.word	0x08002179
 8002174:	08002191 	.word	0x08002191
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      break;
 800217c:	e030      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d025      	beq.n	80021d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218e:	e022      	b.n	80021d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002198:	d11f      	bne.n	80021da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800219e:	e01c      	b.n	80021da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d903      	bls.n	80021ae <DMA_CheckFifoParam+0xb6>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d003      	beq.n	80021b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021ac:	e018      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
      break;
 80021b2:	e015      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00e      	beq.n	80021de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
      break;
 80021c4:	e00b      	b.n	80021de <DMA_CheckFifoParam+0xe6>
      break;
 80021c6:	bf00      	nop
 80021c8:	e00a      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e008      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e006      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
 80021d4:	e004      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
 80021d8:	e002      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021da:	bf00      	nop
 80021dc:	e000      	b.n	80021e0 <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
    }
  } 
  
  return status; 
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	@ 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e16b      	b.n	80024e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 815a 	bne.w	80024de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d005      	beq.n	8002242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223e:	2b02      	cmp	r3, #2
 8002240:	d130      	bne.n	80022a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002278:	2201      	movs	r2, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 0201 	and.w	r2, r3, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d017      	beq.n	80022e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d123      	bne.n	8002334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	08da      	lsrs	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	08da      	lsrs	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3208      	adds	r2, #8
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80b4 	beq.w	80024de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b60      	ldr	r3, [pc, #384]	@ (80024fc <HAL_GPIO_Init+0x30c>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	4a5f      	ldr	r2, [pc, #380]	@ (80024fc <HAL_GPIO_Init+0x30c>)
 8002380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002384:	6453      	str	r3, [r2, #68]	@ 0x44
 8002386:	4b5d      	ldr	r3, [pc, #372]	@ (80024fc <HAL_GPIO_Init+0x30c>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002392:	4a5b      	ldr	r2, [pc, #364]	@ (8002500 <HAL_GPIO_Init+0x310>)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	3302      	adds	r3, #2
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a52      	ldr	r2, [pc, #328]	@ (8002504 <HAL_GPIO_Init+0x314>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02b      	beq.n	8002416 <HAL_GPIO_Init+0x226>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a51      	ldr	r2, [pc, #324]	@ (8002508 <HAL_GPIO_Init+0x318>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d025      	beq.n	8002412 <HAL_GPIO_Init+0x222>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a50      	ldr	r2, [pc, #320]	@ (800250c <HAL_GPIO_Init+0x31c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01f      	beq.n	800240e <HAL_GPIO_Init+0x21e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002510 <HAL_GPIO_Init+0x320>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x21a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002514 <HAL_GPIO_Init+0x324>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x216>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002518 <HAL_GPIO_Init+0x328>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x212>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4c      	ldr	r2, [pc, #304]	@ (800251c <HAL_GPIO_Init+0x32c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002520 <HAL_GPIO_Init+0x330>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x20a>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e00e      	b.n	8002418 <HAL_GPIO_Init+0x228>
 80023fa:	2308      	movs	r3, #8
 80023fc:	e00c      	b.n	8002418 <HAL_GPIO_Init+0x228>
 80023fe:	2306      	movs	r3, #6
 8002400:	e00a      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002402:	2305      	movs	r3, #5
 8002404:	e008      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002406:	2304      	movs	r3, #4
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x228>
 800240a:	2303      	movs	r3, #3
 800240c:	e004      	b.n	8002418 <HAL_GPIO_Init+0x228>
 800240e:	2302      	movs	r3, #2
 8002410:	e002      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_GPIO_Init+0x228>
 8002416:	2300      	movs	r3, #0
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f002 0203 	and.w	r2, r2, #3
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	4093      	lsls	r3, r2
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002428:	4935      	ldr	r1, [pc, #212]	@ (8002500 <HAL_GPIO_Init+0x310>)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <HAL_GPIO_Init+0x334>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245a:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <HAL_GPIO_Init+0x334>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	4b30      	ldr	r3, [pc, #192]	@ (8002524 <HAL_GPIO_Init+0x334>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002484:	4a27      	ldr	r2, [pc, #156]	@ (8002524 <HAL_GPIO_Init+0x334>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248a:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <HAL_GPIO_Init+0x334>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <HAL_GPIO_Init+0x334>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_GPIO_Init+0x334>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d8:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <HAL_GPIO_Init+0x334>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	f67f ae90 	bls.w	800220c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3724      	adds	r7, #36	@ 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40013800 	.word	0x40013800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40020800 	.word	0x40020800
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40021000 	.word	0x40021000
 8002518:	40021400 	.word	0x40021400
 800251c:	40021800 	.word	0x40021800
 8002520:	40021c00 	.word	0x40021c00
 8002524:	40013c00 	.word	0x40013c00

08002528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e267      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d075      	beq.n	8002632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002546:	4b88      	ldr	r3, [pc, #544]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b04      	cmp	r3, #4
 8002550:	d00c      	beq.n	800256c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002552:	4b85      	ldr	r3, [pc, #532]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800255a:	2b08      	cmp	r3, #8
 800255c:	d112      	bne.n	8002584 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255e:	4b82      	ldr	r3, [pc, #520]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800256a:	d10b      	bne.n	8002584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	4b7e      	ldr	r3, [pc, #504]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05b      	beq.n	8002630 <HAL_RCC_OscConfig+0x108>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d157      	bne.n	8002630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e242      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800258c:	d106      	bne.n	800259c <HAL_RCC_OscConfig+0x74>
 800258e:	4b76      	ldr	r3, [pc, #472]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a75      	ldr	r2, [pc, #468]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0xb0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x98>
 80025a6:	4b70      	ldr	r3, [pc, #448]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0xb0>
 80025c0:	4b69      	ldr	r3, [pc, #420]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a68      	ldr	r2, [pc, #416]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b66      	ldr	r3, [pc, #408]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a65      	ldr	r2, [pc, #404]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff f8c2 	bl	8001768 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff f8be 	bl	8001768 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e207      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0xc0>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7ff f8ae 	bl	8001768 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7ff f8aa 	bl	8001768 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1f3      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b51      	ldr	r3, [pc, #324]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0xe8>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d063      	beq.n	8002706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800263e:	4b4a      	ldr	r3, [pc, #296]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264a:	4b47      	ldr	r3, [pc, #284]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002652:	2b08      	cmp	r3, #8
 8002654:	d11c      	bne.n	8002690 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002656:	4b44      	ldr	r3, [pc, #272]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x152>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e1c7      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b3b      	ldr	r3, [pc, #236]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4937      	ldr	r1, [pc, #220]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	e03a      	b.n	8002706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002698:	4b34      	ldr	r3, [pc, #208]	@ (800276c <HAL_RCC_OscConfig+0x244>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7ff f863 	bl	8001768 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7ff f85f 	bl	8001768 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e1a8      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4925      	ldr	r1, [pc, #148]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]
 80026d8:	e015      	b.n	8002706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026da:	4b24      	ldr	r3, [pc, #144]	@ (800276c <HAL_RCC_OscConfig+0x244>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7ff f842 	bl	8001768 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e8:	f7ff f83e 	bl	8001768 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e187      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d036      	beq.n	8002780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_RCC_OscConfig+0x248>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7ff f822 	bl	8001768 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002728:	f7ff f81e 	bl	8001768 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e167      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800273c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x200>
 8002746:	e01b      	b.n	8002780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_OscConfig+0x248>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7ff f80b 	bl	8001768 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	e00e      	b.n	8002774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002756:	f7ff f807 	bl	8001768 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d907      	bls.n	8002774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e150      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
 8002768:	40023800 	.word	0x40023800
 800276c:	42470000 	.word	0x42470000
 8002770:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	4b88      	ldr	r3, [pc, #544]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ea      	bne.n	8002756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8097 	beq.w	80028bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002792:	4b81      	ldr	r3, [pc, #516]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10f      	bne.n	80027be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ba:	2301      	movs	r3, #1
 80027bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b77      	ldr	r3, [pc, #476]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d118      	bne.n	80027fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ca:	4b74      	ldr	r3, [pc, #464]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a73      	ldr	r2, [pc, #460]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d6:	f7fe ffc7 	bl	8001768 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7fe ffc3 	bl	8001768 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e10c      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	4b6a      	ldr	r3, [pc, #424]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x2ea>
 8002804:	4b64      	ldr	r3, [pc, #400]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a63      	ldr	r2, [pc, #396]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002810:	e01c      	b.n	800284c <HAL_RCC_OscConfig+0x324>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b05      	cmp	r3, #5
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x30c>
 800281a:	4b5f      	ldr	r3, [pc, #380]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	4a5e      	ldr	r2, [pc, #376]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
 8002826:	4b5c      	ldr	r3, [pc, #368]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	4a5b      	ldr	r2, [pc, #364]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6713      	str	r3, [r2, #112]	@ 0x70
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0x324>
 8002834:	4b58      	ldr	r3, [pc, #352]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a57      	ldr	r2, [pc, #348]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	4b55      	ldr	r3, [pc, #340]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4a54      	ldr	r2, [pc, #336]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002846:	f023 0304 	bic.w	r3, r3, #4
 800284a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe ff88 	bl	8001768 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe ff84 	bl	8001768 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0cb      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	4b49      	ldr	r3, [pc, #292]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ee      	beq.n	800285c <HAL_RCC_OscConfig+0x334>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002880:	f7fe ff72 	bl	8001768 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe ff6e 	bl	8001768 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0b5      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289e:	4b3e      	ldr	r3, [pc, #248]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ee      	bne.n	8002888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b0:	4b39      	ldr	r3, [pc, #228]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	4a38      	ldr	r2, [pc, #224]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80a1 	beq.w	8002a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028c6:	4b34      	ldr	r3, [pc, #208]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d05c      	beq.n	800298c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d141      	bne.n	800295e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b31      	ldr	r3, [pc, #196]	@ (80029a0 <HAL_RCC_OscConfig+0x478>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe ff42 	bl	8001768 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe ff3e 	bl	8001768 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e087      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b27      	ldr	r3, [pc, #156]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	3b01      	subs	r3, #1
 8002920:	041b      	lsls	r3, r3, #16
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	491b      	ldr	r1, [pc, #108]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x478>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe ff17 	bl	8001768 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe ff13 	bl	8001768 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e05c      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x416>
 800295c:	e054      	b.n	8002a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_RCC_OscConfig+0x478>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe ff00 	bl	8001768 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe fefc 	bl	8001768 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e045      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x444>
 800298a:	e03d      	b.n	8002a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e038      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
 8002998:	40023800 	.word	0x40023800
 800299c:	40007000 	.word	0x40007000
 80029a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x4ec>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d028      	beq.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d121      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d11a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029dc:	4293      	cmp	r3, r2
 80029de:	d111      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	3b01      	subs	r3, #1
 80029ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800

08002a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0cc      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b68      	ldr	r3, [pc, #416]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d90c      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b65      	ldr	r3, [pc, #404]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b63      	ldr	r3, [pc, #396]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b8      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a6c:	4b59      	ldr	r3, [pc, #356]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a58      	ldr	r2, [pc, #352]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a84:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a52      	ldr	r2, [pc, #328]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b50      	ldr	r3, [pc, #320]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	494d      	ldr	r1, [pc, #308]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d044      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b47      	ldr	r3, [pc, #284]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d119      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e067      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b37      	ldr	r3, [pc, #220]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4934      	ldr	r1, [pc, #208]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fe fe2e 	bl	8001768 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe fe2a 	bl	8001768 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e04f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b25      	ldr	r3, [pc, #148]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d20c      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e032      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4916      	ldr	r1, [pc, #88]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8a:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	490e      	ldr	r1, [pc, #56]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9e:	f000 f821 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	490a      	ldr	r1, [pc, #40]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fd8e 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	08006948 	.word	0x08006948
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be8:	b090      	sub	sp, #64	@ 0x40
 8002bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bfc:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d00d      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x40>
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	f200 80a1 	bhi.w	8002d50 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x34>
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c16:	e09b      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c18:	4b53      	ldr	r3, [pc, #332]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c1c:	e09b      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c1e:	4b53      	ldr	r3, [pc, #332]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c22:	e098      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c24:	4b4f      	ldr	r3, [pc, #316]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c2c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d028      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	099b      	lsrs	r3, r3, #6
 8002c40:	2200      	movs	r2, #0
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4b47      	ldr	r3, [pc, #284]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c50:	fb03 f201 	mul.w	r2, r3, r1
 8002c54:	2300      	movs	r3, #0
 8002c56:	fb00 f303 	mul.w	r3, r0, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a43      	ldr	r2, [pc, #268]	@ (8002d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c5e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c64:	460a      	mov	r2, r1
 8002c66:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c6a:	4413      	add	r3, r2
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c70:	2200      	movs	r2, #0
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	61fa      	str	r2, [r7, #28]
 8002c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c7e:	f7fd faf7 	bl	8000270 <__aeabi_uldivmod>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4613      	mov	r3, r2
 8002c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c8a:	e053      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8c:	4b35      	ldr	r3, [pc, #212]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	2200      	movs	r2, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	617a      	str	r2, [r7, #20]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c9e:	f04f 0b00 	mov.w	fp, #0
 8002ca2:	4652      	mov	r2, sl
 8002ca4:	465b      	mov	r3, fp
 8002ca6:	f04f 0000 	mov.w	r0, #0
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	0159      	lsls	r1, r3, #5
 8002cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb4:	0150      	lsls	r0, r2, #5
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	ebb2 080a 	subs.w	r8, r2, sl
 8002cbe:	eb63 090b 	sbc.w	r9, r3, fp
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cd6:	ebb2 0408 	subs.w	r4, r2, r8
 8002cda:	eb63 0509 	sbc.w	r5, r3, r9
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	00eb      	lsls	r3, r5, #3
 8002ce8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cec:	00e2      	lsls	r2, r4, #3
 8002cee:	4614      	mov	r4, r2
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	eb14 030a 	adds.w	r3, r4, sl
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	eb45 030b 	adc.w	r3, r5, fp
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	028b      	lsls	r3, r1, #10
 8002d0e:	4621      	mov	r1, r4
 8002d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d14:	4621      	mov	r1, r4
 8002d16:	028a      	lsls	r2, r1, #10
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	60fa      	str	r2, [r7, #12]
 8002d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d28:	f7fd faa2 	bl	8000270 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4613      	mov	r3, r2
 8002d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d4e:	e002      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3740      	adds	r7, #64	@ 0x40
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	017d7840 	.word	0x017d7840

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	@ (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0a9b      	lsrs	r3, r3, #10
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	@ (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	08006958 	.word	0x08006958

08002db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002db4:	f7ff ffdc 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0b5b      	lsrs	r3, r3, #13
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4903      	ldr	r1, [pc, #12]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	08006958 	.word	0x08006958

08002dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e041      	b.n	8002e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe f880 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 fdcc 	bl	80039b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e041      	b.n	8002f0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d106      	bne.n	8002ea2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f839 	bl	8002f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	f000 fd7d 	bl	80039b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e041      	b.n	8002fbe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f839 	bl	8002fc6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 fd24 	bl	80039b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <HAL_TIM_IC_Start_IT+0x1e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e013      	b.n	8003022 <HAL_TIM_IC_Start_IT+0x46>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d104      	bne.n	800300a <HAL_TIM_IC_Start_IT+0x2e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003006:	b2db      	uxtb	r3, r3
 8003008:	e00b      	b.n	8003022 <HAL_TIM_IC_Start_IT+0x46>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d104      	bne.n	800301a <HAL_TIM_IC_Start_IT+0x3e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003016:	b2db      	uxtb	r3, r3
 8003018:	e003      	b.n	8003022 <HAL_TIM_IC_Start_IT+0x46>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_TIM_IC_Start_IT+0x58>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e013      	b.n	800305c <HAL_TIM_IC_Start_IT+0x80>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d104      	bne.n	8003044 <HAL_TIM_IC_Start_IT+0x68>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e00b      	b.n	800305c <HAL_TIM_IC_Start_IT+0x80>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b08      	cmp	r3, #8
 8003048:	d104      	bne.n	8003054 <HAL_TIM_IC_Start_IT+0x78>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e003      	b.n	800305c <HAL_TIM_IC_Start_IT+0x80>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800305a:	b2db      	uxtb	r3, r3
 800305c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800305e:	7bbb      	ldrb	r3, [r7, #14]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d102      	bne.n	800306a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003064:	7b7b      	ldrb	r3, [r7, #13]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0cc      	b.n	8003208 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d104      	bne.n	800307e <HAL_TIM_IC_Start_IT+0xa2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800307c:	e013      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0xca>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d104      	bne.n	800308e <HAL_TIM_IC_Start_IT+0xb2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800308c:	e00b      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0xca>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d104      	bne.n	800309e <HAL_TIM_IC_Start_IT+0xc2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800309c:	e003      	b.n	80030a6 <HAL_TIM_IC_Start_IT+0xca>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d104      	bne.n	80030b6 <HAL_TIM_IC_Start_IT+0xda>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030b4:	e013      	b.n	80030de <HAL_TIM_IC_Start_IT+0x102>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d104      	bne.n	80030c6 <HAL_TIM_IC_Start_IT+0xea>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030c4:	e00b      	b.n	80030de <HAL_TIM_IC_Start_IT+0x102>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d104      	bne.n	80030d6 <HAL_TIM_IC_Start_IT+0xfa>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d4:	e003      	b.n	80030de <HAL_TIM_IC_Start_IT+0x102>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2202      	movs	r2, #2
 80030da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	d841      	bhi.n	8003168 <HAL_TIM_IC_Start_IT+0x18c>
 80030e4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <HAL_TIM_IC_Start_IT+0x110>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003169 	.word	0x08003169
 80030f4:	08003169 	.word	0x08003169
 80030f8:	08003169 	.word	0x08003169
 80030fc:	08003133 	.word	0x08003133
 8003100:	08003169 	.word	0x08003169
 8003104:	08003169 	.word	0x08003169
 8003108:	08003169 	.word	0x08003169
 800310c:	08003145 	.word	0x08003145
 8003110:	08003169 	.word	0x08003169
 8003114:	08003169 	.word	0x08003169
 8003118:	08003169 	.word	0x08003169
 800311c:	08003157 	.word	0x08003157
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0202 	orr.w	r2, r2, #2
 800312e:	60da      	str	r2, [r3, #12]
      break;
 8003130:	e01d      	b.n	800316e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0204 	orr.w	r2, r2, #4
 8003140:	60da      	str	r2, [r3, #12]
      break;
 8003142:	e014      	b.n	800316e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0208 	orr.w	r2, r2, #8
 8003152:	60da      	str	r2, [r3, #12]
      break;
 8003154:	e00b      	b.n	800316e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0210 	orr.w	r2, r2, #16
 8003164:	60da      	str	r2, [r3, #12]
      break;
 8003166:	e002      	b.n	800316e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	bf00      	nop
  }

  if (status == HAL_OK)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d148      	bne.n	8003206 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2201      	movs	r2, #1
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f001 f8cb 	bl	8004318 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a22      	ldr	r2, [pc, #136]	@ (8003210 <HAL_TIM_IC_Start_IT+0x234>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d022      	beq.n	80031d2 <HAL_TIM_IC_Start_IT+0x1f6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003194:	d01d      	beq.n	80031d2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1e      	ldr	r2, [pc, #120]	@ (8003214 <HAL_TIM_IC_Start_IT+0x238>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d018      	beq.n	80031d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003218 <HAL_TIM_IC_Start_IT+0x23c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1b      	ldr	r2, [pc, #108]	@ (800321c <HAL_TIM_IC_Start_IT+0x240>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00e      	beq.n	80031d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a19      	ldr	r2, [pc, #100]	@ (8003220 <HAL_TIM_IC_Start_IT+0x244>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d009      	beq.n	80031d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a18      	ldr	r2, [pc, #96]	@ (8003224 <HAL_TIM_IC_Start_IT+0x248>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_TIM_IC_Start_IT+0x1f6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a16      	ldr	r2, [pc, #88]	@ (8003228 <HAL_TIM_IC_Start_IT+0x24c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d111      	bne.n	80031f6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b06      	cmp	r3, #6
 80031e2:	d010      	beq.n	8003206 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f4:	e007      	b.n	8003206 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40010000 	.word	0x40010000
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40010400 	.word	0x40010400
 8003224:	40014000 	.word	0x40014000
 8003228:	40001800 	.word	0x40001800

0800322c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d020      	beq.n	8003290 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01b      	beq.n	8003290 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0202 	mvn.w	r2, #2
 8003260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd f984 	bl	8000584 <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fb7a 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fb81 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b00      	cmp	r3, #0
 8003298:	d020      	beq.n	80032dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01b      	beq.n	80032dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0204 	mvn.w	r2, #4
 80032ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd f95e 	bl	8000584 <HAL_TIM_IC_CaptureCallback>
 80032c8:	e005      	b.n	80032d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fb54 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fb5b 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0208 	mvn.w	r2, #8
 80032f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2204      	movs	r2, #4
 80032fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd f938 	bl	8000584 <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fb2e 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fb35 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0210 	mvn.w	r2, #16
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2208      	movs	r2, #8
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd f912 	bl	8000584 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb08 	bl	8003978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fb0f 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00c      	beq.n	8003398 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d007      	beq.n	8003398 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0201 	mvn.w	r2, #1
 8003390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fae6 	bl	8003964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00c      	beq.n	80033bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f001 f85a 	bl	8004470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fae0 	bl	80039a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00c      	beq.n	8003404 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0220 	mvn.w	r2, #32
 80033fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f001 f82c 	bl	800445c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003426:	2302      	movs	r3, #2
 8003428:	e088      	b.n	800353c <HAL_TIM_IC_ConfigChannel+0x130>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003448:	f000 fda2 	bl	8003f90 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 020c 	bic.w	r2, r2, #12
 800345a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6999      	ldr	r1, [r3, #24]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	619a      	str	r2, [r3, #24]
 800346e:	e060      	b.n	8003532 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d11c      	bne.n	80034b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003486:	f000 fe26 	bl	80040d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003498:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6999      	ldr	r1, [r3, #24]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	021a      	lsls	r2, r3, #8
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	619a      	str	r2, [r3, #24]
 80034ae:	e040      	b.n	8003532 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d11b      	bne.n	80034ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80034c6:	f000 fe73 	bl	80041b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 020c 	bic.w	r2, r2, #12
 80034d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69d9      	ldr	r1, [r3, #28]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	61da      	str	r2, [r3, #28]
 80034ec:	e021      	b.n	8003532 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d11c      	bne.n	800352e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003504:	f000 fe90 	bl	8004228 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003516:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69d9      	ldr	r1, [r3, #28]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	021a      	lsls	r2, r3, #8
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	61da      	str	r2, [r3, #28]
 800352c:	e001      	b.n	8003532 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800353a:	7dfb      	ldrb	r3, [r7, #23]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800355e:	2302      	movs	r3, #2
 8003560:	e0ae      	b.n	80036c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	f200 809f 	bhi.w	80036b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003572:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080036b1 	.word	0x080036b1
 8003580:	080036b1 	.word	0x080036b1
 8003584:	080036b1 	.word	0x080036b1
 8003588:	080035ed 	.word	0x080035ed
 800358c:	080036b1 	.word	0x080036b1
 8003590:	080036b1 	.word	0x080036b1
 8003594:	080036b1 	.word	0x080036b1
 8003598:	0800362f 	.word	0x0800362f
 800359c:	080036b1 	.word	0x080036b1
 80035a0:	080036b1 	.word	0x080036b1
 80035a4:	080036b1 	.word	0x080036b1
 80035a8:	0800366f 	.word	0x0800366f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 faaa 	bl	8003b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0204 	bic.w	r2, r2, #4
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	619a      	str	r2, [r3, #24]
      break;
 80035ea:	e064      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fafa 	bl	8003bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	619a      	str	r2, [r3, #24]
      break;
 800362c:	e043      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fb4f 	bl	8003cd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0208 	orr.w	r2, r2, #8
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0204 	bic.w	r2, r2, #4
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
      break;
 800366c:	e023      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fba3 	bl	8003dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69d9      	ldr	r1, [r3, #28]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	021a      	lsls	r2, r3, #8
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	61da      	str	r2, [r3, #28]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
      break;
 80036b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIM_ConfigClockSource+0x1c>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e0b4      	b.n	800384e <HAL_TIM_ConfigClockSource+0x186>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800370a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371c:	d03e      	beq.n	800379c <HAL_TIM_ConfigClockSource+0xd4>
 800371e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003722:	f200 8087 	bhi.w	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372a:	f000 8086 	beq.w	800383a <HAL_TIM_ConfigClockSource+0x172>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003732:	d87f      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	2b70      	cmp	r3, #112	@ 0x70
 8003736:	d01a      	beq.n	800376e <HAL_TIM_ConfigClockSource+0xa6>
 8003738:	2b70      	cmp	r3, #112	@ 0x70
 800373a:	d87b      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b60      	cmp	r3, #96	@ 0x60
 800373e:	d050      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003740:	2b60      	cmp	r3, #96	@ 0x60
 8003742:	d877      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b50      	cmp	r3, #80	@ 0x50
 8003746:	d03c      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003748:	2b50      	cmp	r3, #80	@ 0x50
 800374a:	d873      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	d058      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x13a>
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d86f      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b30      	cmp	r3, #48	@ 0x30
 8003756:	d064      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 8003758:	2b30      	cmp	r3, #48	@ 0x30
 800375a:	d86b      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d060      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d867      	bhi.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d05c      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	2b10      	cmp	r3, #16
 800376a:	d05a      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	e062      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800377e:	f000 fdab 	bl	80042d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003790:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	609a      	str	r2, [r3, #8]
      break;
 800379a:	e04f      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037ac:	f000 fd94 	bl	80042d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037be:	609a      	str	r2, [r3, #8]
      break;
 80037c0:	e03c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ce:	461a      	mov	r2, r3
 80037d0:	f000 fc52 	bl	8004078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2150      	movs	r1, #80	@ 0x50
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fd61 	bl	80042a2 <TIM_ITRx_SetConfig>
      break;
 80037e0:	e02c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ee:	461a      	mov	r2, r3
 80037f0:	f000 fcae 	bl	8004150 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2160      	movs	r1, #96	@ 0x60
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fd51 	bl	80042a2 <TIM_ITRx_SetConfig>
      break;
 8003800:	e01c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380e:	461a      	mov	r2, r3
 8003810:	f000 fc32 	bl	8004078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2140      	movs	r1, #64	@ 0x40
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fd41 	bl	80042a2 <TIM_ITRx_SetConfig>
      break;
 8003820:	e00c      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f000 fd38 	bl	80042a2 <TIM_ITRx_SetConfig>
      break;
 8003832:	e003      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e000      	b.n	800383c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800383a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_TIM_SlaveConfigSynchro+0x18>
 800386a:	2302      	movs	r3, #2
 800386c:	e031      	b.n	80038d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800387e:	6839      	ldr	r1, [r7, #0]
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 faf3 	bl	8003e6c <TIM_SlaveTimer_SetConfig>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e018      	b.n	80038d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	d831      	bhi.n	8003954 <HAL_TIM_ReadCapturedValue+0x78>
 80038f0:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	0800392d 	.word	0x0800392d
 80038fc:	08003955 	.word	0x08003955
 8003900:	08003955 	.word	0x08003955
 8003904:	08003955 	.word	0x08003955
 8003908:	08003937 	.word	0x08003937
 800390c:	08003955 	.word	0x08003955
 8003910:	08003955 	.word	0x08003955
 8003914:	08003955 	.word	0x08003955
 8003918:	08003941 	.word	0x08003941
 800391c:	08003955 	.word	0x08003955
 8003920:	08003955 	.word	0x08003955
 8003924:	08003955 	.word	0x08003955
 8003928:	0800394b 	.word	0x0800394b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003932:	60fb      	str	r3, [r7, #12]

      break;
 8003934:	e00f      	b.n	8003956 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	60fb      	str	r3, [r7, #12]

      break;
 800393e:	e00a      	b.n	8003956 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003946:	60fb      	str	r3, [r7, #12]

      break;
 8003948:	e005      	b.n	8003956 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	60fb      	str	r3, [r7, #12]

      break;
 8003952:	e000      	b.n	8003956 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003954:	bf00      	nop
  }

  return tmpreg;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a46      	ldr	r2, [pc, #280]	@ (8003ae0 <TIM_Base_SetConfig+0x12c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d2:	d00f      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a43      	ldr	r2, [pc, #268]	@ (8003ae4 <TIM_Base_SetConfig+0x130>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00b      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a42      	ldr	r2, [pc, #264]	@ (8003ae8 <TIM_Base_SetConfig+0x134>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d007      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a41      	ldr	r2, [pc, #260]	@ (8003aec <TIM_Base_SetConfig+0x138>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_Base_SetConfig+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a40      	ldr	r2, [pc, #256]	@ (8003af0 <TIM_Base_SetConfig+0x13c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d108      	bne.n	8003a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a35      	ldr	r2, [pc, #212]	@ (8003ae0 <TIM_Base_SetConfig+0x12c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d02b      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a14:	d027      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a32      	ldr	r2, [pc, #200]	@ (8003ae4 <TIM_Base_SetConfig+0x130>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d023      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a31      	ldr	r2, [pc, #196]	@ (8003ae8 <TIM_Base_SetConfig+0x134>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01f      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a30      	ldr	r2, [pc, #192]	@ (8003aec <TIM_Base_SetConfig+0x138>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01b      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2f      	ldr	r2, [pc, #188]	@ (8003af0 <TIM_Base_SetConfig+0x13c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d017      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a2e      	ldr	r2, [pc, #184]	@ (8003af4 <TIM_Base_SetConfig+0x140>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2d      	ldr	r2, [pc, #180]	@ (8003af8 <TIM_Base_SetConfig+0x144>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2c      	ldr	r2, [pc, #176]	@ (8003afc <TIM_Base_SetConfig+0x148>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a2b      	ldr	r2, [pc, #172]	@ (8003b00 <TIM_Base_SetConfig+0x14c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2a      	ldr	r2, [pc, #168]	@ (8003b04 <TIM_Base_SetConfig+0x150>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a29      	ldr	r2, [pc, #164]	@ (8003b08 <TIM_Base_SetConfig+0x154>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	@ (8003ae0 <TIM_Base_SetConfig+0x12c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_Base_SetConfig+0xf8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a12      	ldr	r2, [pc, #72]	@ (8003af0 <TIM_Base_SetConfig+0x13c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d103      	bne.n	8003ab4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f023 0201 	bic.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800
 8003b00:	40001800 	.word	0x40001800
 8003b04:	40001c00 	.word	0x40001c00
 8003b08:	40002000 	.word	0x40002000

08003b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	f023 0201 	bic.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f023 0302 	bic.w	r3, r3, #2
 8003b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a20      	ldr	r2, [pc, #128]	@ (8003be4 <TIM_OC1_SetConfig+0xd8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_OC1_SetConfig+0x64>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003be8 <TIM_OC1_SetConfig+0xdc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d10c      	bne.n	8003b8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f023 0308 	bic.w	r3, r3, #8
 8003b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f023 0304 	bic.w	r3, r3, #4
 8003b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a15      	ldr	r2, [pc, #84]	@ (8003be4 <TIM_OC1_SetConfig+0xd8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_OC1_SetConfig+0x8e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <TIM_OC1_SetConfig+0xdc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d111      	bne.n	8003bbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	621a      	str	r2, [r3, #32]
}
 8003bd8:	bf00      	nop
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40010400 	.word	0x40010400

08003bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 0210 	bic.w	r2, r3, #16
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0320 	bic.w	r3, r3, #32
 8003c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a22      	ldr	r2, [pc, #136]	@ (8003cd0 <TIM_OC2_SetConfig+0xe4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_OC2_SetConfig+0x68>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <TIM_OC2_SetConfig+0xe8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10d      	bne.n	8003c70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <TIM_OC2_SetConfig+0xe4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_OC2_SetConfig+0x94>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <TIM_OC2_SetConfig+0xe8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d113      	bne.n	8003ca8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	621a      	str	r2, [r3, #32]
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	40010400 	.word	0x40010400

08003cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0303 	bic.w	r3, r3, #3
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a21      	ldr	r2, [pc, #132]	@ (8003db8 <TIM_OC3_SetConfig+0xe0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_OC3_SetConfig+0x66>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a20      	ldr	r2, [pc, #128]	@ (8003dbc <TIM_OC3_SetConfig+0xe4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d10d      	bne.n	8003d5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	@ (8003db8 <TIM_OC3_SetConfig+0xe0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d003      	beq.n	8003d6a <TIM_OC3_SetConfig+0x92>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a15      	ldr	r2, [pc, #84]	@ (8003dbc <TIM_OC3_SetConfig+0xe4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d113      	bne.n	8003d92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40010400 	.word	0x40010400

08003dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	031b      	lsls	r3, r3, #12
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a12      	ldr	r2, [pc, #72]	@ (8003e64 <TIM_OC4_SetConfig+0xa4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_OC4_SetConfig+0x68>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a11      	ldr	r2, [pc, #68]	@ (8003e68 <TIM_OC4_SetConfig+0xa8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d109      	bne.n	8003e3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	621a      	str	r2, [r3, #32]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40010000 	.word	0x40010000
 8003e68:	40010400 	.word	0x40010400

08003e6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e88:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f023 0307 	bic.w	r3, r3, #7
 8003e9a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b70      	cmp	r3, #112	@ 0x70
 8003eb4:	d01a      	beq.n	8003eec <TIM_SlaveTimer_SetConfig+0x80>
 8003eb6:	2b70      	cmp	r3, #112	@ 0x70
 8003eb8:	d860      	bhi.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
 8003eba:	2b60      	cmp	r3, #96	@ 0x60
 8003ebc:	d054      	beq.n	8003f68 <TIM_SlaveTimer_SetConfig+0xfc>
 8003ebe:	2b60      	cmp	r3, #96	@ 0x60
 8003ec0:	d85c      	bhi.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
 8003ec2:	2b50      	cmp	r3, #80	@ 0x50
 8003ec4:	d046      	beq.n	8003f54 <TIM_SlaveTimer_SetConfig+0xe8>
 8003ec6:	2b50      	cmp	r3, #80	@ 0x50
 8003ec8:	d858      	bhi.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
 8003eca:	2b40      	cmp	r3, #64	@ 0x40
 8003ecc:	d019      	beq.n	8003f02 <TIM_SlaveTimer_SetConfig+0x96>
 8003ece:	2b40      	cmp	r3, #64	@ 0x40
 8003ed0:	d854      	bhi.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
 8003ed2:	2b30      	cmp	r3, #48	@ 0x30
 8003ed4:	d055      	beq.n	8003f82 <TIM_SlaveTimer_SetConfig+0x116>
 8003ed6:	2b30      	cmp	r3, #48	@ 0x30
 8003ed8:	d850      	bhi.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d051      	beq.n	8003f82 <TIM_SlaveTimer_SetConfig+0x116>
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d84c      	bhi.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d04d      	beq.n	8003f82 <TIM_SlaveTimer_SetConfig+0x116>
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d04b      	beq.n	8003f82 <TIM_SlaveTimer_SetConfig+0x116>
 8003eea:	e047      	b.n	8003f7c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003efc:	f000 f9ec 	bl	80042d8 <TIM_ETR_SetConfig>
      break;
 8003f00:	e040      	b.n	8003f84 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	d101      	bne.n	8003f0e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e03b      	b.n	8003f86 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f34:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	621a      	str	r2, [r3, #32]
      break;
 8003f52:	e017      	b.n	8003f84 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f60:	461a      	mov	r2, r3
 8003f62:	f000 f889 	bl	8004078 <TIM_TI1_ConfigInputStage>
      break;
 8003f66:	e00d      	b.n	8003f84 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f74:	461a      	mov	r2, r3
 8003f76:	f000 f8eb 	bl	8004150 <TIM_TI2_ConfigInputStage>
      break;
 8003f7a:	e003      	b.n	8003f84 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	e000      	b.n	8003f84 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003f82:	bf00      	nop
  }

  return status;
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f023 0201 	bic.w	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a28      	ldr	r2, [pc, #160]	@ (800405c <TIM_TI1_SetConfig+0xcc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01b      	beq.n	8003ff6 <TIM_TI1_SetConfig+0x66>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc4:	d017      	beq.n	8003ff6 <TIM_TI1_SetConfig+0x66>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a25      	ldr	r2, [pc, #148]	@ (8004060 <TIM_TI1_SetConfig+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <TIM_TI1_SetConfig+0x66>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a24      	ldr	r2, [pc, #144]	@ (8004064 <TIM_TI1_SetConfig+0xd4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00f      	beq.n	8003ff6 <TIM_TI1_SetConfig+0x66>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	@ (8004068 <TIM_TI1_SetConfig+0xd8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <TIM_TI1_SetConfig+0x66>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	@ (800406c <TIM_TI1_SetConfig+0xdc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <TIM_TI1_SetConfig+0x66>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a21      	ldr	r2, [pc, #132]	@ (8004070 <TIM_TI1_SetConfig+0xe0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_TI1_SetConfig+0x66>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a20      	ldr	r2, [pc, #128]	@ (8004074 <TIM_TI1_SetConfig+0xe4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <TIM_TI1_SetConfig+0x6a>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <TIM_TI1_SetConfig+0x6c>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e003      	b.n	800401a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	b2db      	uxtb	r3, r3
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f023 030a 	bic.w	r3, r3, #10
 8004034:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f003 030a 	and.w	r3, r3, #10
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40010400 	.word	0x40010400
 8004070:	40014000 	.word	0x40014000
 8004074:	40001800 	.word	0x40001800

08004078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0201 	bic.w	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f023 030a 	bic.w	r3, r3, #10
 80040b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b087      	sub	sp, #28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f023 0210 	bic.w	r2, r3, #16
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	031b      	lsls	r3, r3, #12
 800411a:	b29b      	uxth	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004128:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0210 	bic.w	r2, r3, #16
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	031b      	lsls	r3, r3, #12
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800418c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	621a      	str	r2, [r3, #32]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f023 0303 	bic.w	r3, r3, #3
 80041dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004200:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	621a      	str	r2, [r3, #32]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004254:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004266:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	031b      	lsls	r3, r3, #12
 800426c:	b29b      	uxth	r3, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800427a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	031b      	lsls	r3, r3, #12
 8004280:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	f043 0307 	orr.w	r3, r3, #7
 80042c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	609a      	str	r2, [r3, #8]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	021a      	lsls	r2, r3, #8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2201      	movs	r2, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	43db      	mvns	r3, r3
 800433a:	401a      	ands	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1a      	ldr	r2, [r3, #32]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004378:	2302      	movs	r3, #2
 800437a:	e05a      	b.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a21      	ldr	r2, [pc, #132]	@ (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d022      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c8:	d01d      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d018      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1a      	ldr	r2, [pc, #104]	@ (800444c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a18      	ldr	r2, [pc, #96]	@ (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a17      	ldr	r2, [pc, #92]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a15      	ldr	r2, [pc, #84]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10c      	bne.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010000 	.word	0x40010000
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800
 800444c:	40000c00 	.word	0x40000c00
 8004450:	40010400 	.word	0x40010400
 8004454:	40014000 	.word	0x40014000
 8004458:	40001800 	.word	0x40001800

0800445c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e042      	b.n	800451c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fc fdc8 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2224      	movs	r2, #36	@ 0x24
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 ffd9 	bl	8005480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	@ 0x28
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	4613      	mov	r3, r2
 8004532:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b20      	cmp	r3, #32
 8004542:	d175      	bne.n	8004630 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_UART_Transmit+0x2c>
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e06e      	b.n	8004632 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2221      	movs	r2, #33	@ 0x21
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004562:	f7fd f901 	bl	8001768 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	88fa      	ldrh	r2, [r7, #6]
 8004572:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457c:	d108      	bne.n	8004590 <HAL_UART_Transmit+0x6c>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e003      	b.n	8004598 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004598:	e02e      	b.n	80045f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	2180      	movs	r1, #128	@ 0x80
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fcb1 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e03a      	b.n	8004632 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	3302      	adds	r3, #2
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	e007      	b.n	80045ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3301      	adds	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1cb      	bne.n	800459a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	2140      	movs	r1, #64	@ 0x40
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fc7d 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e006      	b.n	8004632 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	e000      	b.n	8004632 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004630:	2302      	movs	r3, #2
  }
}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	4613      	mov	r3, r2
 8004646:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b20      	cmp	r3, #32
 8004652:	d112      	bne.n	800467a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_UART_Receive_DMA+0x26>
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e00b      	b.n	800467c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	461a      	mov	r2, r3
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 fca5 	bl	8004fc0 <UART_Start_Receive_DMA>
 8004676:	4603      	mov	r3, r0
 8004678:	e000      	b.n	800467c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b090      	sub	sp, #64	@ 0x40
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800468c:	2300      	movs	r3, #0
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469a:	2b80      	cmp	r3, #128	@ 0x80
 800469c:	bf0c      	ite	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	2300      	movne	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b21      	cmp	r3, #33	@ 0x21
 80046b0:	d128      	bne.n	8004704 <HAL_UART_DMAStop+0x80>
 80046b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d025      	beq.n	8004704 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3314      	adds	r3, #20
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	623b      	str	r3, [r7, #32]
   return(result);
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80046da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e5      	bne.n	80046b8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d004      	beq.n	80046fe <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fd fa7d 	bl	8001bf8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fcf8 	bl	80050f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b40      	cmp	r3, #64	@ 0x40
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b22      	cmp	r3, #34	@ 0x22
 8004724:	d128      	bne.n	8004778 <HAL_UART_DMAStop+0xf4>
 8004726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d025      	beq.n	8004778 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	60fb      	str	r3, [r7, #12]
   return(result);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004742:	637b      	str	r3, [r7, #52]	@ 0x34
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800474c:	61fa      	str	r2, [r7, #28]
 800474e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	69b9      	ldr	r1, [r7, #24]
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	617b      	str	r3, [r7, #20]
   return(result);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e5      	bne.n	800472c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476c:	4618      	mov	r0, r3
 800476e:	f7fd fa43 	bl	8001bf8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fce6 	bl	8005144 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3740      	adds	r7, #64	@ 0x40
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b0ba      	sub	sp, #232	@ 0xe8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80047c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10f      	bne.n	80047ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_UART_IRQHandler+0x66>
 80047d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fd8d 	bl	8005302 <UART_Receive_IT>
      return;
 80047e8:	e25b      	b.n	8004ca2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80de 	beq.w	80049b0 <HAL_UART_IRQHandler+0x22c>
 80047f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004804:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80d1 	beq.w	80049b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800480e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_UART_IRQHandler+0xae>
 800481a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_UART_IRQHandler+0xd2>
 800483e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	f043 0202 	orr.w	r2, r3, #2
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <HAL_UART_IRQHandler+0xf6>
 8004862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004872:	f043 0204 	orr.w	r2, r3, #4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d011      	beq.n	80048aa <HAL_UART_IRQHandler+0x126>
 8004886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d105      	bne.n	800489e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a2:	f043 0208 	orr.w	r2, r3, #8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 81f2 	beq.w	8004c98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_UART_IRQHandler+0x14e>
 80048c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fd18 	bl	8005302 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048dc:	2b40      	cmp	r3, #64	@ 0x40
 80048de:	bf0c      	ite	eq
 80048e0:	2301      	moveq	r3, #1
 80048e2:	2300      	movne	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <HAL_UART_IRQHandler+0x17a>
 80048f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d04f      	beq.n	800499e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fc20 	bl	8005144 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490e:	2b40      	cmp	r3, #64	@ 0x40
 8004910:	d141      	bne.n	8004996 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3314      	adds	r3, #20
 8004918:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004928:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800492c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3314      	adds	r3, #20
 800493a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800493e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800494a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1d9      	bne.n	8004912 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d013      	beq.n	800498e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b64 <HAL_UART_IRQHandler+0x3e0>)
 800496c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004972:	4618      	mov	r0, r3
 8004974:	f7fd f9b0 	bl	8001cd8 <HAL_DMA_Abort_IT>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004988:	4610      	mov	r0, r2
 800498a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e00e      	b.n	80049ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9a8 	bl	8004ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	e00a      	b.n	80049ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9a4 	bl	8004ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499c:	e006      	b.n	80049ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9a0 	bl	8004ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80049aa:	e175      	b.n	8004c98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ac:	bf00      	nop
    return;
 80049ae:	e173      	b.n	8004c98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	f040 814f 	bne.w	8004c58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 8148 	beq.w	8004c58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8141 	beq.w	8004c58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f6:	2b40      	cmp	r3, #64	@ 0x40
 80049f8:	f040 80b6 	bne.w	8004b68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8145 	beq.w	8004c9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	f080 813e 	bcs.w	8004c9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a32:	f000 8088 	beq.w	8004b46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1d9      	bne.n	8004a36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3314      	adds	r3, #20
 8004a88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e1      	bne.n	8004a82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3314      	adds	r3, #20
 8004ac4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3314      	adds	r3, #20
 8004ade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ae2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ae8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e3      	bne.n	8004abe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b16:	f023 0310 	bic.w	r3, r3, #16
 8004b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e3      	bne.n	8004b04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd f859 	bl	8001bf8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8cb 	bl	8004cf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b62:	e09b      	b.n	8004c9c <HAL_UART_IRQHandler+0x518>
 8004b64:	0800520b 	.word	0x0800520b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 808e 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8089 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004bb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e3      	bne.n	8004b8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bea:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e3      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0310 	bic.w	r3, r3, #16
 8004c22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c30:	61fa      	str	r2, [r7, #28]
 8004c32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e3      	bne.n	8004c0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f851 	bl	8004cf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c56:	e023      	b.n	8004ca0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <HAL_UART_IRQHandler+0x4f4>
 8004c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fade 	bl	8005232 <UART_Transmit_IT>
    return;
 8004c76:	e014      	b.n	8004ca2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00e      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x51e>
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fb1e 	bl	80052d2 <UART_EndTransmit_IT>
    return;
 8004c96:	e004      	b.n	8004ca2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c98:	bf00      	nop
 8004c9a:	e002      	b.n	8004ca2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ca0:	bf00      	nop
  }
}
 8004ca2:	37e8      	adds	r7, #232	@ 0xe8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b09c      	sub	sp, #112	@ 0x70
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d172      	bne.n	8004e12 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004d2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d2e:	2200      	movs	r2, #0
 8004d30:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3314      	adds	r3, #20
 8004d84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004d86:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e5      	bne.n	8004d66 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3314      	adds	r3, #20
 8004da0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	623b      	str	r3, [r7, #32]
   return(result);
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004db0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3314      	adds	r3, #20
 8004db8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004dba:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e5      	bne.n	8004d9a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d119      	bne.n	8004e12 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f023 0310 	bic.w	r3, r3, #16
 8004df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004dfe:	61fa      	str	r2, [r7, #28]
 8004e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	69b9      	ldr	r1, [r7, #24]
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e5      	bne.n	8004dde <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e14:	2200      	movs	r2, #0
 8004e16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d106      	bne.n	8004e2e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e24:	4619      	mov	r1, r3
 8004e26:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004e28:	f7ff ff66 	bl	8004cf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e2c:	e002      	b.n	8004e34 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004e2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004e30:	f7ff ff44 	bl	8004cbc <HAL_UART_RxCpltCallback>
}
 8004e34:	bf00      	nop
 8004e36:	3770      	adds	r7, #112	@ 0x70
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d108      	bne.n	8004e6a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4619      	mov	r1, r3
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff ff48 	bl	8004cf8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e68:	e002      	b.n	8004e70 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7ff ff30 	bl	8004cd0 <HAL_UART_RxHalfCpltCallback>
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e88:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e94:	2b80      	cmp	r3, #128	@ 0x80
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b21      	cmp	r3, #33	@ 0x21
 8004eaa:	d108      	bne.n	8004ebe <UART_DMAError+0x46>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004eb8:	68b8      	ldr	r0, [r7, #8]
 8004eba:	f000 f91b 	bl	80050f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b22      	cmp	r3, #34	@ 0x22
 8004ede:	d108      	bne.n	8004ef2 <UART_DMAError+0x7a>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004eec:	68b8      	ldr	r0, [r7, #8]
 8004eee:	f000 f929 	bl	8005144 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef6:	f043 0210 	orr.w	r2, r3, #16
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004efe:	68b8      	ldr	r0, [r7, #8]
 8004f00:	f7ff fef0 	bl	8004ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1c:	e03b      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d037      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f26:	f7fc fc1f 	bl	8001768 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	6a3a      	ldr	r2, [r7, #32]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e03a      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d023      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b80      	cmp	r3, #128	@ 0x80
 8004f52:	d020      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b40      	cmp	r3, #64	@ 0x40
 8004f58:	d01d      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d116      	bne.n	8004f96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f8e0 	bl	8005144 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2208      	movs	r2, #8
 8004f88:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e00f      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d0b4      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3718      	adds	r7, #24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b098      	sub	sp, #96	@ 0x60
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	88fa      	ldrh	r2, [r7, #6]
 8004fd8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2222      	movs	r2, #34	@ 0x22
 8004fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fec:	4a3e      	ldr	r2, [pc, #248]	@ (80050e8 <UART_Start_Receive_DMA+0x128>)
 8004fee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff4:	4a3d      	ldr	r2, [pc, #244]	@ (80050ec <UART_Start_Receive_DMA+0x12c>)
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80050f0 <UART_Start_Receive_DMA+0x130>)
 8004ffe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005004:	2200      	movs	r2, #0
 8005006:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005008:	f107 0308 	add.w	r3, r7, #8
 800500c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3304      	adds	r3, #4
 8005018:	4619      	mov	r1, r3
 800501a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	f7fc fd92 	bl	8001b48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d019      	beq.n	8005076 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005058:	65bb      	str	r3, [r7, #88]	@ 0x58
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005062:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005064:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e5      	bne.n	8005042 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	657b      	str	r3, [r7, #84]	@ 0x54
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3314      	adds	r3, #20
 8005094:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005096:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005098:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800509c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3314      	adds	r3, #20
 80050b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3314      	adds	r3, #20
 80050c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80050ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80050cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6a39      	ldr	r1, [r7, #32]
 80050d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e5      	bne.n	80050aa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3760      	adds	r7, #96	@ 0x60
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	08004d11 	.word	0x08004d11
 80050ec:	08004e3d 	.word	0x08004e3d
 80050f0:	08004e79 	.word	0x08004e79

080050f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b089      	sub	sp, #36	@ 0x24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60bb      	str	r3, [r7, #8]
   return(result);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	61ba      	str	r2, [r7, #24]
 800511e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6979      	ldr	r1, [r7, #20]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	613b      	str	r3, [r7, #16]
   return(result);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005138:	bf00      	nop
 800513a:	3724      	adds	r7, #36	@ 0x24
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005144:	b480      	push	{r7}
 8005146:	b095      	sub	sp, #84	@ 0x54
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800516c:	643a      	str	r2, [r7, #64]	@ 0x40
 800516e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005172:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800517a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e5      	bne.n	800514c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3314      	adds	r3, #20
 800519e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e5      	bne.n	8005180 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d119      	bne.n	80051f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 0310 	bic.w	r3, r3, #16
 80051d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051dc:	61ba      	str	r2, [r7, #24]
 80051de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6979      	ldr	r1, [r7, #20]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e5      	bne.n	80051bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051fe:	bf00      	nop
 8005200:	3754      	adds	r7, #84	@ 0x54
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005216:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff fd5d 	bl	8004ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b21      	cmp	r3, #33	@ 0x21
 8005244:	d13e      	bne.n	80052c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524e:	d114      	bne.n	800527a <UART_Transmit_IT+0x48>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d110      	bne.n	800527a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800526c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	1c9a      	adds	r2, r3, #2
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	621a      	str	r2, [r3, #32]
 8005278:	e008      	b.n	800528c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6211      	str	r1, [r2, #32]
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4619      	mov	r1, r3
 800529a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10f      	bne.n	80052c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff fcd8 	bl	8004ca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b08c      	sub	sp, #48	@ 0x30
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b22      	cmp	r3, #34	@ 0x22
 8005314:	f040 80ae 	bne.w	8005474 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005320:	d117      	bne.n	8005352 <UART_Receive_IT+0x50>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d113      	bne.n	8005352 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005340:	b29a      	uxth	r2, r3
 8005342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005344:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	1c9a      	adds	r2, r3, #2
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005350:	e026      	b.n	80053a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005356:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005364:	d007      	beq.n	8005376 <UART_Receive_IT+0x74>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <UART_Receive_IT+0x82>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e008      	b.n	8005396 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005390:	b2da      	uxtb	r2, r3
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	4619      	mov	r1, r3
 80053ae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d15d      	bne.n	8005470 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0220 	bic.w	r2, r2, #32
 80053c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d135      	bne.n	8005466 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	613b      	str	r3, [r7, #16]
   return(result);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005420:	623a      	str	r2, [r7, #32]
 8005422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	69f9      	ldr	r1, [r7, #28]
 8005426:	6a3a      	ldr	r2, [r7, #32]
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	61bb      	str	r3, [r7, #24]
   return(result);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e5      	bne.n	8005400 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0310 	and.w	r3, r3, #16
 800543e:	2b10      	cmp	r3, #16
 8005440:	d10a      	bne.n	8005458 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005442:	2300      	movs	r3, #0
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff fc4a 	bl	8004cf8 <HAL_UARTEx_RxEventCallback>
 8005464:	e002      	b.n	800546c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fc28 	bl	8004cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	e002      	b.n	8005476 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3730      	adds	r7, #48	@ 0x30
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005484:	b0c0      	sub	sp, #256	@ 0x100
 8005486:	af00      	add	r7, sp, #0
 8005488:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	68d9      	ldr	r1, [r3, #12]
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	ea40 0301 	orr.w	r3, r0, r1
 80054a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	431a      	orrs	r2, r3
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054d8:	f021 010c 	bic.w	r1, r1, #12
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054e6:	430b      	orrs	r3, r1
 80054e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fa:	6999      	ldr	r1, [r3, #24]
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	ea40 0301 	orr.w	r3, r0, r1
 8005506:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b8f      	ldr	r3, [pc, #572]	@ (800574c <UART_SetConfig+0x2cc>)
 8005510:	429a      	cmp	r2, r3
 8005512:	d005      	beq.n	8005520 <UART_SetConfig+0xa0>
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b8d      	ldr	r3, [pc, #564]	@ (8005750 <UART_SetConfig+0x2d0>)
 800551c:	429a      	cmp	r2, r3
 800551e:	d104      	bne.n	800552a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005520:	f7fd fc46 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 8005524:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005528:	e003      	b.n	8005532 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800552a:	f7fd fc2d 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 800552e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800553c:	f040 810c 	bne.w	8005758 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005544:	2200      	movs	r2, #0
 8005546:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800554a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800554e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005552:	4622      	mov	r2, r4
 8005554:	462b      	mov	r3, r5
 8005556:	1891      	adds	r1, r2, r2
 8005558:	65b9      	str	r1, [r7, #88]	@ 0x58
 800555a:	415b      	adcs	r3, r3
 800555c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800555e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005562:	4621      	mov	r1, r4
 8005564:	eb12 0801 	adds.w	r8, r2, r1
 8005568:	4629      	mov	r1, r5
 800556a:	eb43 0901 	adc.w	r9, r3, r1
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800557a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800557e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005582:	4690      	mov	r8, r2
 8005584:	4699      	mov	r9, r3
 8005586:	4623      	mov	r3, r4
 8005588:	eb18 0303 	adds.w	r3, r8, r3
 800558c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005590:	462b      	mov	r3, r5
 8005592:	eb49 0303 	adc.w	r3, r9, r3
 8005596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055ae:	460b      	mov	r3, r1
 80055b0:	18db      	adds	r3, r3, r3
 80055b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80055b4:	4613      	mov	r3, r2
 80055b6:	eb42 0303 	adc.w	r3, r2, r3
 80055ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80055bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055c4:	f7fa fe54 	bl	8000270 <__aeabi_uldivmod>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4b61      	ldr	r3, [pc, #388]	@ (8005754 <UART_SetConfig+0x2d4>)
 80055ce:	fba3 2302 	umull	r2, r3, r3, r2
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	011c      	lsls	r4, r3, #4
 80055d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055e8:	4642      	mov	r2, r8
 80055ea:	464b      	mov	r3, r9
 80055ec:	1891      	adds	r1, r2, r2
 80055ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055f0:	415b      	adcs	r3, r3
 80055f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055f8:	4641      	mov	r1, r8
 80055fa:	eb12 0a01 	adds.w	sl, r2, r1
 80055fe:	4649      	mov	r1, r9
 8005600:	eb43 0b01 	adc.w	fp, r3, r1
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005610:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005618:	4692      	mov	sl, r2
 800561a:	469b      	mov	fp, r3
 800561c:	4643      	mov	r3, r8
 800561e:	eb1a 0303 	adds.w	r3, sl, r3
 8005622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005626:	464b      	mov	r3, r9
 8005628:	eb4b 0303 	adc.w	r3, fp, r3
 800562c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800563c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005640:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005644:	460b      	mov	r3, r1
 8005646:	18db      	adds	r3, r3, r3
 8005648:	643b      	str	r3, [r7, #64]	@ 0x40
 800564a:	4613      	mov	r3, r2
 800564c:	eb42 0303 	adc.w	r3, r2, r3
 8005650:	647b      	str	r3, [r7, #68]	@ 0x44
 8005652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005656:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800565a:	f7fa fe09 	bl	8000270 <__aeabi_uldivmod>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4611      	mov	r1, r2
 8005664:	4b3b      	ldr	r3, [pc, #236]	@ (8005754 <UART_SetConfig+0x2d4>)
 8005666:	fba3 2301 	umull	r2, r3, r3, r1
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	2264      	movs	r2, #100	@ 0x64
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	1acb      	subs	r3, r1, r3
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800567a:	4b36      	ldr	r3, [pc, #216]	@ (8005754 <UART_SetConfig+0x2d4>)
 800567c:	fba3 2302 	umull	r2, r3, r3, r2
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005688:	441c      	add	r4, r3
 800568a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800568e:	2200      	movs	r2, #0
 8005690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005694:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005698:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800569c:	4642      	mov	r2, r8
 800569e:	464b      	mov	r3, r9
 80056a0:	1891      	adds	r1, r2, r2
 80056a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056a4:	415b      	adcs	r3, r3
 80056a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056ac:	4641      	mov	r1, r8
 80056ae:	1851      	adds	r1, r2, r1
 80056b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80056b2:	4649      	mov	r1, r9
 80056b4:	414b      	adcs	r3, r1
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056c4:	4659      	mov	r1, fp
 80056c6:	00cb      	lsls	r3, r1, #3
 80056c8:	4651      	mov	r1, sl
 80056ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ce:	4651      	mov	r1, sl
 80056d0:	00ca      	lsls	r2, r1, #3
 80056d2:	4610      	mov	r0, r2
 80056d4:	4619      	mov	r1, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	4642      	mov	r2, r8
 80056da:	189b      	adds	r3, r3, r2
 80056dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056e0:	464b      	mov	r3, r9
 80056e2:	460a      	mov	r2, r1
 80056e4:	eb42 0303 	adc.w	r3, r2, r3
 80056e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005700:	460b      	mov	r3, r1
 8005702:	18db      	adds	r3, r3, r3
 8005704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005706:	4613      	mov	r3, r2
 8005708:	eb42 0303 	adc.w	r3, r2, r3
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800570e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005712:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005716:	f7fa fdab 	bl	8000270 <__aeabi_uldivmod>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <UART_SetConfig+0x2d4>)
 8005720:	fba3 1302 	umull	r1, r3, r3, r2
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	2164      	movs	r1, #100	@ 0x64
 8005728:	fb01 f303 	mul.w	r3, r1, r3
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	3332      	adds	r3, #50	@ 0x32
 8005732:	4a08      	ldr	r2, [pc, #32]	@ (8005754 <UART_SetConfig+0x2d4>)
 8005734:	fba2 2303 	umull	r2, r3, r2, r3
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	f003 0207 	and.w	r2, r3, #7
 800573e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4422      	add	r2, r4
 8005746:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005748:	e106      	b.n	8005958 <UART_SetConfig+0x4d8>
 800574a:	bf00      	nop
 800574c:	40011000 	.word	0x40011000
 8005750:	40011400 	.word	0x40011400
 8005754:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575c:	2200      	movs	r2, #0
 800575e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005762:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005766:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800576a:	4642      	mov	r2, r8
 800576c:	464b      	mov	r3, r9
 800576e:	1891      	adds	r1, r2, r2
 8005770:	6239      	str	r1, [r7, #32]
 8005772:	415b      	adcs	r3, r3
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
 8005776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800577a:	4641      	mov	r1, r8
 800577c:	1854      	adds	r4, r2, r1
 800577e:	4649      	mov	r1, r9
 8005780:	eb43 0501 	adc.w	r5, r3, r1
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	00eb      	lsls	r3, r5, #3
 800578e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005792:	00e2      	lsls	r2, r4, #3
 8005794:	4614      	mov	r4, r2
 8005796:	461d      	mov	r5, r3
 8005798:	4643      	mov	r3, r8
 800579a:	18e3      	adds	r3, r4, r3
 800579c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057a0:	464b      	mov	r3, r9
 80057a2:	eb45 0303 	adc.w	r3, r5, r3
 80057a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057c6:	4629      	mov	r1, r5
 80057c8:	008b      	lsls	r3, r1, #2
 80057ca:	4621      	mov	r1, r4
 80057cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057d0:	4621      	mov	r1, r4
 80057d2:	008a      	lsls	r2, r1, #2
 80057d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057d8:	f7fa fd4a 	bl	8000270 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4b60      	ldr	r3, [pc, #384]	@ (8005964 <UART_SetConfig+0x4e4>)
 80057e2:	fba3 2302 	umull	r2, r3, r3, r2
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	011c      	lsls	r4, r3, #4
 80057ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057fc:	4642      	mov	r2, r8
 80057fe:	464b      	mov	r3, r9
 8005800:	1891      	adds	r1, r2, r2
 8005802:	61b9      	str	r1, [r7, #24]
 8005804:	415b      	adcs	r3, r3
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800580c:	4641      	mov	r1, r8
 800580e:	1851      	adds	r1, r2, r1
 8005810:	6139      	str	r1, [r7, #16]
 8005812:	4649      	mov	r1, r9
 8005814:	414b      	adcs	r3, r1
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005824:	4659      	mov	r1, fp
 8005826:	00cb      	lsls	r3, r1, #3
 8005828:	4651      	mov	r1, sl
 800582a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582e:	4651      	mov	r1, sl
 8005830:	00ca      	lsls	r2, r1, #3
 8005832:	4610      	mov	r0, r2
 8005834:	4619      	mov	r1, r3
 8005836:	4603      	mov	r3, r0
 8005838:	4642      	mov	r2, r8
 800583a:	189b      	adds	r3, r3, r2
 800583c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005840:	464b      	mov	r3, r9
 8005842:	460a      	mov	r2, r1
 8005844:	eb42 0303 	adc.w	r3, r2, r3
 8005848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005856:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005864:	4649      	mov	r1, r9
 8005866:	008b      	lsls	r3, r1, #2
 8005868:	4641      	mov	r1, r8
 800586a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800586e:	4641      	mov	r1, r8
 8005870:	008a      	lsls	r2, r1, #2
 8005872:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005876:	f7fa fcfb 	bl	8000270 <__aeabi_uldivmod>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4611      	mov	r1, r2
 8005880:	4b38      	ldr	r3, [pc, #224]	@ (8005964 <UART_SetConfig+0x4e4>)
 8005882:	fba3 2301 	umull	r2, r3, r3, r1
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	2264      	movs	r2, #100	@ 0x64
 800588a:	fb02 f303 	mul.w	r3, r2, r3
 800588e:	1acb      	subs	r3, r1, r3
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	3332      	adds	r3, #50	@ 0x32
 8005894:	4a33      	ldr	r2, [pc, #204]	@ (8005964 <UART_SetConfig+0x4e4>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058a0:	441c      	add	r4, r3
 80058a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a6:	2200      	movs	r2, #0
 80058a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80058aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80058ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058b0:	4642      	mov	r2, r8
 80058b2:	464b      	mov	r3, r9
 80058b4:	1891      	adds	r1, r2, r2
 80058b6:	60b9      	str	r1, [r7, #8]
 80058b8:	415b      	adcs	r3, r3
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058c0:	4641      	mov	r1, r8
 80058c2:	1851      	adds	r1, r2, r1
 80058c4:	6039      	str	r1, [r7, #0]
 80058c6:	4649      	mov	r1, r9
 80058c8:	414b      	adcs	r3, r1
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058d8:	4659      	mov	r1, fp
 80058da:	00cb      	lsls	r3, r1, #3
 80058dc:	4651      	mov	r1, sl
 80058de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058e2:	4651      	mov	r1, sl
 80058e4:	00ca      	lsls	r2, r1, #3
 80058e6:	4610      	mov	r0, r2
 80058e8:	4619      	mov	r1, r3
 80058ea:	4603      	mov	r3, r0
 80058ec:	4642      	mov	r2, r8
 80058ee:	189b      	adds	r3, r3, r2
 80058f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058f2:	464b      	mov	r3, r9
 80058f4:	460a      	mov	r2, r1
 80058f6:	eb42 0303 	adc.w	r3, r2, r3
 80058fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	663b      	str	r3, [r7, #96]	@ 0x60
 8005906:	667a      	str	r2, [r7, #100]	@ 0x64
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005914:	4649      	mov	r1, r9
 8005916:	008b      	lsls	r3, r1, #2
 8005918:	4641      	mov	r1, r8
 800591a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800591e:	4641      	mov	r1, r8
 8005920:	008a      	lsls	r2, r1, #2
 8005922:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005926:	f7fa fca3 	bl	8000270 <__aeabi_uldivmod>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <UART_SetConfig+0x4e4>)
 8005930:	fba3 1302 	umull	r1, r3, r3, r2
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	2164      	movs	r1, #100	@ 0x64
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	3332      	adds	r3, #50	@ 0x32
 8005942:	4a08      	ldr	r2, [pc, #32]	@ (8005964 <UART_SetConfig+0x4e4>)
 8005944:	fba2 2303 	umull	r2, r3, r2, r3
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	f003 020f 	and.w	r2, r3, #15
 800594e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4422      	add	r2, r4
 8005956:	609a      	str	r2, [r3, #8]
}
 8005958:	bf00      	nop
 800595a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800595e:	46bd      	mov	sp, r7
 8005960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005964:	51eb851f 	.word	0x51eb851f

08005968 <std>:
 8005968:	2300      	movs	r3, #0
 800596a:	b510      	push	{r4, lr}
 800596c:	4604      	mov	r4, r0
 800596e:	e9c0 3300 	strd	r3, r3, [r0]
 8005972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005976:	6083      	str	r3, [r0, #8]
 8005978:	8181      	strh	r1, [r0, #12]
 800597a:	6643      	str	r3, [r0, #100]	@ 0x64
 800597c:	81c2      	strh	r2, [r0, #14]
 800597e:	6183      	str	r3, [r0, #24]
 8005980:	4619      	mov	r1, r3
 8005982:	2208      	movs	r2, #8
 8005984:	305c      	adds	r0, #92	@ 0x5c
 8005986:	f000 f9f9 	bl	8005d7c <memset>
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <std+0x58>)
 800598c:	6263      	str	r3, [r4, #36]	@ 0x24
 800598e:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <std+0x5c>)
 8005990:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <std+0x60>)
 8005994:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005996:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <std+0x64>)
 8005998:	6323      	str	r3, [r4, #48]	@ 0x30
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x68>)
 800599c:	6224      	str	r4, [r4, #32]
 800599e:	429c      	cmp	r4, r3
 80059a0:	d006      	beq.n	80059b0 <std+0x48>
 80059a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059a6:	4294      	cmp	r4, r2
 80059a8:	d002      	beq.n	80059b0 <std+0x48>
 80059aa:	33d0      	adds	r3, #208	@ 0xd0
 80059ac:	429c      	cmp	r4, r3
 80059ae:	d105      	bne.n	80059bc <std+0x54>
 80059b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b8:	f000 ba58 	b.w	8005e6c <__retarget_lock_init_recursive>
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	08005bcd 	.word	0x08005bcd
 80059c4:	08005bef 	.word	0x08005bef
 80059c8:	08005c27 	.word	0x08005c27
 80059cc:	08005c4b 	.word	0x08005c4b
 80059d0:	200003c0 	.word	0x200003c0

080059d4 <stdio_exit_handler>:
 80059d4:	4a02      	ldr	r2, [pc, #8]	@ (80059e0 <stdio_exit_handler+0xc>)
 80059d6:	4903      	ldr	r1, [pc, #12]	@ (80059e4 <stdio_exit_handler+0x10>)
 80059d8:	4803      	ldr	r0, [pc, #12]	@ (80059e8 <stdio_exit_handler+0x14>)
 80059da:	f000 b869 	b.w	8005ab0 <_fwalk_sglue>
 80059de:	bf00      	nop
 80059e0:	2000000c 	.word	0x2000000c
 80059e4:	0800670d 	.word	0x0800670d
 80059e8:	2000001c 	.word	0x2000001c

080059ec <cleanup_stdio>:
 80059ec:	6841      	ldr	r1, [r0, #4]
 80059ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <cleanup_stdio+0x34>)
 80059f0:	4299      	cmp	r1, r3
 80059f2:	b510      	push	{r4, lr}
 80059f4:	4604      	mov	r4, r0
 80059f6:	d001      	beq.n	80059fc <cleanup_stdio+0x10>
 80059f8:	f000 fe88 	bl	800670c <_fflush_r>
 80059fc:	68a1      	ldr	r1, [r4, #8]
 80059fe:	4b09      	ldr	r3, [pc, #36]	@ (8005a24 <cleanup_stdio+0x38>)
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d002      	beq.n	8005a0a <cleanup_stdio+0x1e>
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fe81 	bl	800670c <_fflush_r>
 8005a0a:	68e1      	ldr	r1, [r4, #12]
 8005a0c:	4b06      	ldr	r3, [pc, #24]	@ (8005a28 <cleanup_stdio+0x3c>)
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	d004      	beq.n	8005a1c <cleanup_stdio+0x30>
 8005a12:	4620      	mov	r0, r4
 8005a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a18:	f000 be78 	b.w	800670c <_fflush_r>
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	bf00      	nop
 8005a20:	200003c0 	.word	0x200003c0
 8005a24:	20000428 	.word	0x20000428
 8005a28:	20000490 	.word	0x20000490

08005a2c <global_stdio_init.part.0>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <global_stdio_init.part.0+0x30>)
 8005a30:	4c0b      	ldr	r4, [pc, #44]	@ (8005a60 <global_stdio_init.part.0+0x34>)
 8005a32:	4a0c      	ldr	r2, [pc, #48]	@ (8005a64 <global_stdio_init.part.0+0x38>)
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	4620      	mov	r0, r4
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2104      	movs	r1, #4
 8005a3c:	f7ff ff94 	bl	8005968 <std>
 8005a40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a44:	2201      	movs	r2, #1
 8005a46:	2109      	movs	r1, #9
 8005a48:	f7ff ff8e 	bl	8005968 <std>
 8005a4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a50:	2202      	movs	r2, #2
 8005a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a56:	2112      	movs	r1, #18
 8005a58:	f7ff bf86 	b.w	8005968 <std>
 8005a5c:	200004f8 	.word	0x200004f8
 8005a60:	200003c0 	.word	0x200003c0
 8005a64:	080059d5 	.word	0x080059d5

08005a68 <__sfp_lock_acquire>:
 8005a68:	4801      	ldr	r0, [pc, #4]	@ (8005a70 <__sfp_lock_acquire+0x8>)
 8005a6a:	f000 ba00 	b.w	8005e6e <__retarget_lock_acquire_recursive>
 8005a6e:	bf00      	nop
 8005a70:	20000501 	.word	0x20000501

08005a74 <__sfp_lock_release>:
 8005a74:	4801      	ldr	r0, [pc, #4]	@ (8005a7c <__sfp_lock_release+0x8>)
 8005a76:	f000 b9fb 	b.w	8005e70 <__retarget_lock_release_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	20000501 	.word	0x20000501

08005a80 <__sinit>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	4604      	mov	r4, r0
 8005a84:	f7ff fff0 	bl	8005a68 <__sfp_lock_acquire>
 8005a88:	6a23      	ldr	r3, [r4, #32]
 8005a8a:	b11b      	cbz	r3, 8005a94 <__sinit+0x14>
 8005a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a90:	f7ff bff0 	b.w	8005a74 <__sfp_lock_release>
 8005a94:	4b04      	ldr	r3, [pc, #16]	@ (8005aa8 <__sinit+0x28>)
 8005a96:	6223      	str	r3, [r4, #32]
 8005a98:	4b04      	ldr	r3, [pc, #16]	@ (8005aac <__sinit+0x2c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f5      	bne.n	8005a8c <__sinit+0xc>
 8005aa0:	f7ff ffc4 	bl	8005a2c <global_stdio_init.part.0>
 8005aa4:	e7f2      	b.n	8005a8c <__sinit+0xc>
 8005aa6:	bf00      	nop
 8005aa8:	080059ed 	.word	0x080059ed
 8005aac:	200004f8 	.word	0x200004f8

08005ab0 <_fwalk_sglue>:
 8005ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	4688      	mov	r8, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	2600      	movs	r6, #0
 8005abc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ac0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ac4:	d505      	bpl.n	8005ad2 <_fwalk_sglue+0x22>
 8005ac6:	6824      	ldr	r4, [r4, #0]
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	d1f7      	bne.n	8005abc <_fwalk_sglue+0xc>
 8005acc:	4630      	mov	r0, r6
 8005ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d907      	bls.n	8005ae8 <_fwalk_sglue+0x38>
 8005ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005adc:	3301      	adds	r3, #1
 8005ade:	d003      	beq.n	8005ae8 <_fwalk_sglue+0x38>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c0      	blx	r8
 8005ae6:	4306      	orrs	r6, r0
 8005ae8:	3568      	adds	r5, #104	@ 0x68
 8005aea:	e7e9      	b.n	8005ac0 <_fwalk_sglue+0x10>

08005aec <iprintf>:
 8005aec:	b40f      	push	{r0, r1, r2, r3}
 8005aee:	b507      	push	{r0, r1, r2, lr}
 8005af0:	4906      	ldr	r1, [pc, #24]	@ (8005b0c <iprintf+0x20>)
 8005af2:	ab04      	add	r3, sp, #16
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005afa:	6881      	ldr	r1, [r0, #8]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	f000 fadb 	bl	80060b8 <_vfiprintf_r>
 8005b02:	b003      	add	sp, #12
 8005b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b08:	b004      	add	sp, #16
 8005b0a:	4770      	bx	lr
 8005b0c:	20000018 	.word	0x20000018

08005b10 <_puts_r>:
 8005b10:	6a03      	ldr	r3, [r0, #32]
 8005b12:	b570      	push	{r4, r5, r6, lr}
 8005b14:	6884      	ldr	r4, [r0, #8]
 8005b16:	4605      	mov	r5, r0
 8005b18:	460e      	mov	r6, r1
 8005b1a:	b90b      	cbnz	r3, 8005b20 <_puts_r+0x10>
 8005b1c:	f7ff ffb0 	bl	8005a80 <__sinit>
 8005b20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b22:	07db      	lsls	r3, r3, #31
 8005b24:	d405      	bmi.n	8005b32 <_puts_r+0x22>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	0598      	lsls	r0, r3, #22
 8005b2a:	d402      	bmi.n	8005b32 <_puts_r+0x22>
 8005b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b2e:	f000 f99e 	bl	8005e6e <__retarget_lock_acquire_recursive>
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	0719      	lsls	r1, r3, #28
 8005b36:	d502      	bpl.n	8005b3e <_puts_r+0x2e>
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d135      	bne.n	8005baa <_puts_r+0x9a>
 8005b3e:	4621      	mov	r1, r4
 8005b40:	4628      	mov	r0, r5
 8005b42:	f000 f8c5 	bl	8005cd0 <__swsetup_r>
 8005b46:	b380      	cbz	r0, 8005baa <_puts_r+0x9a>
 8005b48:	f04f 35ff 	mov.w	r5, #4294967295
 8005b4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b4e:	07da      	lsls	r2, r3, #31
 8005b50:	d405      	bmi.n	8005b5e <_puts_r+0x4e>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	059b      	lsls	r3, r3, #22
 8005b56:	d402      	bmi.n	8005b5e <_puts_r+0x4e>
 8005b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b5a:	f000 f989 	bl	8005e70 <__retarget_lock_release_recursive>
 8005b5e:	4628      	mov	r0, r5
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	da04      	bge.n	8005b70 <_puts_r+0x60>
 8005b66:	69a2      	ldr	r2, [r4, #24]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	dc17      	bgt.n	8005b9c <_puts_r+0x8c>
 8005b6c:	290a      	cmp	r1, #10
 8005b6e:	d015      	beq.n	8005b9c <_puts_r+0x8c>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	6022      	str	r2, [r4, #0]
 8005b76:	7019      	strb	r1, [r3, #0]
 8005b78:	68a3      	ldr	r3, [r4, #8]
 8005b7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	60a3      	str	r3, [r4, #8]
 8005b82:	2900      	cmp	r1, #0
 8005b84:	d1ed      	bne.n	8005b62 <_puts_r+0x52>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da11      	bge.n	8005bae <_puts_r+0x9e>
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	210a      	movs	r1, #10
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 f85f 	bl	8005c52 <__swbuf_r>
 8005b94:	3001      	adds	r0, #1
 8005b96:	d0d7      	beq.n	8005b48 <_puts_r+0x38>
 8005b98:	250a      	movs	r5, #10
 8005b9a:	e7d7      	b.n	8005b4c <_puts_r+0x3c>
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 f857 	bl	8005c52 <__swbuf_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d1e7      	bne.n	8005b78 <_puts_r+0x68>
 8005ba8:	e7ce      	b.n	8005b48 <_puts_r+0x38>
 8005baa:	3e01      	subs	r6, #1
 8005bac:	e7e4      	b.n	8005b78 <_puts_r+0x68>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	6022      	str	r2, [r4, #0]
 8005bb4:	220a      	movs	r2, #10
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	e7ee      	b.n	8005b98 <_puts_r+0x88>
	...

08005bbc <puts>:
 8005bbc:	4b02      	ldr	r3, [pc, #8]	@ (8005bc8 <puts+0xc>)
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	f7ff bfa5 	b.w	8005b10 <_puts_r>
 8005bc6:	bf00      	nop
 8005bc8:	20000018 	.word	0x20000018

08005bcc <__sread>:
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	460c      	mov	r4, r1
 8005bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd4:	f000 f8fc 	bl	8005dd0 <_read_r>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	bfab      	itete	ge
 8005bdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bde:	89a3      	ldrhlt	r3, [r4, #12]
 8005be0:	181b      	addge	r3, r3, r0
 8005be2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005be6:	bfac      	ite	ge
 8005be8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bea:	81a3      	strhlt	r3, [r4, #12]
 8005bec:	bd10      	pop	{r4, pc}

08005bee <__swrite>:
 8005bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf2:	461f      	mov	r7, r3
 8005bf4:	898b      	ldrh	r3, [r1, #12]
 8005bf6:	05db      	lsls	r3, r3, #23
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	d505      	bpl.n	8005c0c <__swrite+0x1e>
 8005c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c04:	2302      	movs	r3, #2
 8005c06:	2200      	movs	r2, #0
 8005c08:	f000 f8d0 	bl	8005dac <_lseek_r>
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	4632      	mov	r2, r6
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c22:	f000 b8e7 	b.w	8005df4 <_write_r>

08005c26 <__sseek>:
 8005c26:	b510      	push	{r4, lr}
 8005c28:	460c      	mov	r4, r1
 8005c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c2e:	f000 f8bd 	bl	8005dac <_lseek_r>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	bf15      	itete	ne
 8005c38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c42:	81a3      	strheq	r3, [r4, #12]
 8005c44:	bf18      	it	ne
 8005c46:	81a3      	strhne	r3, [r4, #12]
 8005c48:	bd10      	pop	{r4, pc}

08005c4a <__sclose>:
 8005c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4e:	f000 b89d 	b.w	8005d8c <_close_r>

08005c52 <__swbuf_r>:
 8005c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c54:	460e      	mov	r6, r1
 8005c56:	4614      	mov	r4, r2
 8005c58:	4605      	mov	r5, r0
 8005c5a:	b118      	cbz	r0, 8005c64 <__swbuf_r+0x12>
 8005c5c:	6a03      	ldr	r3, [r0, #32]
 8005c5e:	b90b      	cbnz	r3, 8005c64 <__swbuf_r+0x12>
 8005c60:	f7ff ff0e 	bl	8005a80 <__sinit>
 8005c64:	69a3      	ldr	r3, [r4, #24]
 8005c66:	60a3      	str	r3, [r4, #8]
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	071a      	lsls	r2, r3, #28
 8005c6c:	d501      	bpl.n	8005c72 <__swbuf_r+0x20>
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	b943      	cbnz	r3, 8005c84 <__swbuf_r+0x32>
 8005c72:	4621      	mov	r1, r4
 8005c74:	4628      	mov	r0, r5
 8005c76:	f000 f82b 	bl	8005cd0 <__swsetup_r>
 8005c7a:	b118      	cbz	r0, 8005c84 <__swbuf_r+0x32>
 8005c7c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c80:	4638      	mov	r0, r7
 8005c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	6922      	ldr	r2, [r4, #16]
 8005c88:	1a98      	subs	r0, r3, r2
 8005c8a:	6963      	ldr	r3, [r4, #20]
 8005c8c:	b2f6      	uxtb	r6, r6
 8005c8e:	4283      	cmp	r3, r0
 8005c90:	4637      	mov	r7, r6
 8005c92:	dc05      	bgt.n	8005ca0 <__swbuf_r+0x4e>
 8005c94:	4621      	mov	r1, r4
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 fd38 	bl	800670c <_fflush_r>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d1ed      	bne.n	8005c7c <__swbuf_r+0x2a>
 8005ca0:	68a3      	ldr	r3, [r4, #8]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	6022      	str	r2, [r4, #0]
 8005cac:	701e      	strb	r6, [r3, #0]
 8005cae:	6962      	ldr	r2, [r4, #20]
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d004      	beq.n	8005cc0 <__swbuf_r+0x6e>
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	07db      	lsls	r3, r3, #31
 8005cba:	d5e1      	bpl.n	8005c80 <__swbuf_r+0x2e>
 8005cbc:	2e0a      	cmp	r6, #10
 8005cbe:	d1df      	bne.n	8005c80 <__swbuf_r+0x2e>
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 fd22 	bl	800670c <_fflush_r>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d0d9      	beq.n	8005c80 <__swbuf_r+0x2e>
 8005ccc:	e7d6      	b.n	8005c7c <__swbuf_r+0x2a>
	...

08005cd0 <__swsetup_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4b29      	ldr	r3, [pc, #164]	@ (8005d78 <__swsetup_r+0xa8>)
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	460c      	mov	r4, r1
 8005cda:	b118      	cbz	r0, 8005ce4 <__swsetup_r+0x14>
 8005cdc:	6a03      	ldr	r3, [r0, #32]
 8005cde:	b90b      	cbnz	r3, 8005ce4 <__swsetup_r+0x14>
 8005ce0:	f7ff fece 	bl	8005a80 <__sinit>
 8005ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce8:	0719      	lsls	r1, r3, #28
 8005cea:	d422      	bmi.n	8005d32 <__swsetup_r+0x62>
 8005cec:	06da      	lsls	r2, r3, #27
 8005cee:	d407      	bmi.n	8005d00 <__swsetup_r+0x30>
 8005cf0:	2209      	movs	r2, #9
 8005cf2:	602a      	str	r2, [r5, #0]
 8005cf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfe:	e033      	b.n	8005d68 <__swsetup_r+0x98>
 8005d00:	0758      	lsls	r0, r3, #29
 8005d02:	d512      	bpl.n	8005d2a <__swsetup_r+0x5a>
 8005d04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d06:	b141      	cbz	r1, 8005d1a <__swsetup_r+0x4a>
 8005d08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d0c:	4299      	cmp	r1, r3
 8005d0e:	d002      	beq.n	8005d16 <__swsetup_r+0x46>
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 f8af 	bl	8005e74 <_free_r>
 8005d16:	2300      	movs	r3, #0
 8005d18:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	2300      	movs	r3, #0
 8005d24:	6063      	str	r3, [r4, #4]
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	f043 0308 	orr.w	r3, r3, #8
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	b94b      	cbnz	r3, 8005d4a <__swsetup_r+0x7a>
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d40:	d003      	beq.n	8005d4a <__swsetup_r+0x7a>
 8005d42:	4621      	mov	r1, r4
 8005d44:	4628      	mov	r0, r5
 8005d46:	f000 fd2f 	bl	80067a8 <__smakebuf_r>
 8005d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4e:	f013 0201 	ands.w	r2, r3, #1
 8005d52:	d00a      	beq.n	8005d6a <__swsetup_r+0x9a>
 8005d54:	2200      	movs	r2, #0
 8005d56:	60a2      	str	r2, [r4, #8]
 8005d58:	6962      	ldr	r2, [r4, #20]
 8005d5a:	4252      	negs	r2, r2
 8005d5c:	61a2      	str	r2, [r4, #24]
 8005d5e:	6922      	ldr	r2, [r4, #16]
 8005d60:	b942      	cbnz	r2, 8005d74 <__swsetup_r+0xa4>
 8005d62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d66:	d1c5      	bne.n	8005cf4 <__swsetup_r+0x24>
 8005d68:	bd38      	pop	{r3, r4, r5, pc}
 8005d6a:	0799      	lsls	r1, r3, #30
 8005d6c:	bf58      	it	pl
 8005d6e:	6962      	ldrpl	r2, [r4, #20]
 8005d70:	60a2      	str	r2, [r4, #8]
 8005d72:	e7f4      	b.n	8005d5e <__swsetup_r+0x8e>
 8005d74:	2000      	movs	r0, #0
 8005d76:	e7f7      	b.n	8005d68 <__swsetup_r+0x98>
 8005d78:	20000018 	.word	0x20000018

08005d7c <memset>:
 8005d7c:	4402      	add	r2, r0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d100      	bne.n	8005d86 <memset+0xa>
 8005d84:	4770      	bx	lr
 8005d86:	f803 1b01 	strb.w	r1, [r3], #1
 8005d8a:	e7f9      	b.n	8005d80 <memset+0x4>

08005d8c <_close_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4d06      	ldr	r5, [pc, #24]	@ (8005da8 <_close_r+0x1c>)
 8005d90:	2300      	movs	r3, #0
 8005d92:	4604      	mov	r4, r0
 8005d94:	4608      	mov	r0, r1
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	f7fb fbd9 	bl	800154e <_close>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_close_r+0x1a>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_close_r+0x1a>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	200004fc 	.word	0x200004fc

08005dac <_lseek_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d07      	ldr	r5, [pc, #28]	@ (8005dcc <_lseek_r+0x20>)
 8005db0:	4604      	mov	r4, r0
 8005db2:	4608      	mov	r0, r1
 8005db4:	4611      	mov	r1, r2
 8005db6:	2200      	movs	r2, #0
 8005db8:	602a      	str	r2, [r5, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f7fb fbee 	bl	800159c <_lseek>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_lseek_r+0x1e>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_lseek_r+0x1e>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	200004fc 	.word	0x200004fc

08005dd0 <_read_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4d07      	ldr	r5, [pc, #28]	@ (8005df0 <_read_r+0x20>)
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	4608      	mov	r0, r1
 8005dd8:	4611      	mov	r1, r2
 8005dda:	2200      	movs	r2, #0
 8005ddc:	602a      	str	r2, [r5, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	f7fb fb7c 	bl	80014dc <_read>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_read_r+0x1e>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_read_r+0x1e>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	200004fc 	.word	0x200004fc

08005df4 <_write_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4d07      	ldr	r5, [pc, #28]	@ (8005e14 <_write_r+0x20>)
 8005df8:	4604      	mov	r4, r0
 8005dfa:	4608      	mov	r0, r1
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	602a      	str	r2, [r5, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f7fb fb87 	bl	8001516 <_write>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_write_r+0x1e>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_write_r+0x1e>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	200004fc 	.word	0x200004fc

08005e18 <__errno>:
 8005e18:	4b01      	ldr	r3, [pc, #4]	@ (8005e20 <__errno+0x8>)
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000018 	.word	0x20000018

08005e24 <__libc_init_array>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	4d0d      	ldr	r5, [pc, #52]	@ (8005e5c <__libc_init_array+0x38>)
 8005e28:	4c0d      	ldr	r4, [pc, #52]	@ (8005e60 <__libc_init_array+0x3c>)
 8005e2a:	1b64      	subs	r4, r4, r5
 8005e2c:	10a4      	asrs	r4, r4, #2
 8005e2e:	2600      	movs	r6, #0
 8005e30:	42a6      	cmp	r6, r4
 8005e32:	d109      	bne.n	8005e48 <__libc_init_array+0x24>
 8005e34:	4d0b      	ldr	r5, [pc, #44]	@ (8005e64 <__libc_init_array+0x40>)
 8005e36:	4c0c      	ldr	r4, [pc, #48]	@ (8005e68 <__libc_init_array+0x44>)
 8005e38:	f000 fd24 	bl	8006884 <_init>
 8005e3c:	1b64      	subs	r4, r4, r5
 8005e3e:	10a4      	asrs	r4, r4, #2
 8005e40:	2600      	movs	r6, #0
 8005e42:	42a6      	cmp	r6, r4
 8005e44:	d105      	bne.n	8005e52 <__libc_init_array+0x2e>
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
 8005e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4c:	4798      	blx	r3
 8005e4e:	3601      	adds	r6, #1
 8005e50:	e7ee      	b.n	8005e30 <__libc_init_array+0xc>
 8005e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e56:	4798      	blx	r3
 8005e58:	3601      	adds	r6, #1
 8005e5a:	e7f2      	b.n	8005e42 <__libc_init_array+0x1e>
 8005e5c:	080069a4 	.word	0x080069a4
 8005e60:	080069a4 	.word	0x080069a4
 8005e64:	080069a4 	.word	0x080069a4
 8005e68:	080069a8 	.word	0x080069a8

08005e6c <__retarget_lock_init_recursive>:
 8005e6c:	4770      	bx	lr

08005e6e <__retarget_lock_acquire_recursive>:
 8005e6e:	4770      	bx	lr

08005e70 <__retarget_lock_release_recursive>:
 8005e70:	4770      	bx	lr
	...

08005e74 <_free_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4605      	mov	r5, r0
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d041      	beq.n	8005f00 <_free_r+0x8c>
 8005e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e80:	1f0c      	subs	r4, r1, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfb8      	it	lt
 8005e86:	18e4      	addlt	r4, r4, r3
 8005e88:	f000 f8e0 	bl	800604c <__malloc_lock>
 8005e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f04 <_free_r+0x90>)
 8005e8e:	6813      	ldr	r3, [r2, #0]
 8005e90:	b933      	cbnz	r3, 8005ea0 <_free_r+0x2c>
 8005e92:	6063      	str	r3, [r4, #4]
 8005e94:	6014      	str	r4, [r2, #0]
 8005e96:	4628      	mov	r0, r5
 8005e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e9c:	f000 b8dc 	b.w	8006058 <__malloc_unlock>
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d908      	bls.n	8005eb6 <_free_r+0x42>
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	1821      	adds	r1, r4, r0
 8005ea8:	428b      	cmp	r3, r1
 8005eaa:	bf01      	itttt	eq
 8005eac:	6819      	ldreq	r1, [r3, #0]
 8005eae:	685b      	ldreq	r3, [r3, #4]
 8005eb0:	1809      	addeq	r1, r1, r0
 8005eb2:	6021      	streq	r1, [r4, #0]
 8005eb4:	e7ed      	b.n	8005e92 <_free_r+0x1e>
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	b10b      	cbz	r3, 8005ec0 <_free_r+0x4c>
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	d9fa      	bls.n	8005eb6 <_free_r+0x42>
 8005ec0:	6811      	ldr	r1, [r2, #0]
 8005ec2:	1850      	adds	r0, r2, r1
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d10b      	bne.n	8005ee0 <_free_r+0x6c>
 8005ec8:	6820      	ldr	r0, [r4, #0]
 8005eca:	4401      	add	r1, r0
 8005ecc:	1850      	adds	r0, r2, r1
 8005ece:	4283      	cmp	r3, r0
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	d1e0      	bne.n	8005e96 <_free_r+0x22>
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	6053      	str	r3, [r2, #4]
 8005eda:	4408      	add	r0, r1
 8005edc:	6010      	str	r0, [r2, #0]
 8005ede:	e7da      	b.n	8005e96 <_free_r+0x22>
 8005ee0:	d902      	bls.n	8005ee8 <_free_r+0x74>
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	e7d6      	b.n	8005e96 <_free_r+0x22>
 8005ee8:	6820      	ldr	r0, [r4, #0]
 8005eea:	1821      	adds	r1, r4, r0
 8005eec:	428b      	cmp	r3, r1
 8005eee:	bf04      	itt	eq
 8005ef0:	6819      	ldreq	r1, [r3, #0]
 8005ef2:	685b      	ldreq	r3, [r3, #4]
 8005ef4:	6063      	str	r3, [r4, #4]
 8005ef6:	bf04      	itt	eq
 8005ef8:	1809      	addeq	r1, r1, r0
 8005efa:	6021      	streq	r1, [r4, #0]
 8005efc:	6054      	str	r4, [r2, #4]
 8005efe:	e7ca      	b.n	8005e96 <_free_r+0x22>
 8005f00:	bd38      	pop	{r3, r4, r5, pc}
 8005f02:	bf00      	nop
 8005f04:	20000508 	.word	0x20000508

08005f08 <sbrk_aligned>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8005f48 <sbrk_aligned+0x40>)
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	6831      	ldr	r1, [r6, #0]
 8005f10:	4605      	mov	r5, r0
 8005f12:	b911      	cbnz	r1, 8005f1a <sbrk_aligned+0x12>
 8005f14:	f000 fca6 	bl	8006864 <_sbrk_r>
 8005f18:	6030      	str	r0, [r6, #0]
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 fca1 	bl	8006864 <_sbrk_r>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	d103      	bne.n	8005f2e <sbrk_aligned+0x26>
 8005f26:	f04f 34ff 	mov.w	r4, #4294967295
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	bd70      	pop	{r4, r5, r6, pc}
 8005f2e:	1cc4      	adds	r4, r0, #3
 8005f30:	f024 0403 	bic.w	r4, r4, #3
 8005f34:	42a0      	cmp	r0, r4
 8005f36:	d0f8      	beq.n	8005f2a <sbrk_aligned+0x22>
 8005f38:	1a21      	subs	r1, r4, r0
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 fc92 	bl	8006864 <_sbrk_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d1f2      	bne.n	8005f2a <sbrk_aligned+0x22>
 8005f44:	e7ef      	b.n	8005f26 <sbrk_aligned+0x1e>
 8005f46:	bf00      	nop
 8005f48:	20000504 	.word	0x20000504

08005f4c <_malloc_r>:
 8005f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f50:	1ccd      	adds	r5, r1, #3
 8005f52:	f025 0503 	bic.w	r5, r5, #3
 8005f56:	3508      	adds	r5, #8
 8005f58:	2d0c      	cmp	r5, #12
 8005f5a:	bf38      	it	cc
 8005f5c:	250c      	movcc	r5, #12
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	4606      	mov	r6, r0
 8005f62:	db01      	blt.n	8005f68 <_malloc_r+0x1c>
 8005f64:	42a9      	cmp	r1, r5
 8005f66:	d904      	bls.n	8005f72 <_malloc_r+0x26>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	6033      	str	r3, [r6, #0]
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006048 <_malloc_r+0xfc>
 8005f76:	f000 f869 	bl	800604c <__malloc_lock>
 8005f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f7e:	461c      	mov	r4, r3
 8005f80:	bb44      	cbnz	r4, 8005fd4 <_malloc_r+0x88>
 8005f82:	4629      	mov	r1, r5
 8005f84:	4630      	mov	r0, r6
 8005f86:	f7ff ffbf 	bl	8005f08 <sbrk_aligned>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	d158      	bne.n	8006042 <_malloc_r+0xf6>
 8005f90:	f8d8 4000 	ldr.w	r4, [r8]
 8005f94:	4627      	mov	r7, r4
 8005f96:	2f00      	cmp	r7, #0
 8005f98:	d143      	bne.n	8006022 <_malloc_r+0xd6>
 8005f9a:	2c00      	cmp	r4, #0
 8005f9c:	d04b      	beq.n	8006036 <_malloc_r+0xea>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	eb04 0903 	add.w	r9, r4, r3
 8005fa8:	f000 fc5c 	bl	8006864 <_sbrk_r>
 8005fac:	4581      	cmp	r9, r0
 8005fae:	d142      	bne.n	8006036 <_malloc_r+0xea>
 8005fb0:	6821      	ldr	r1, [r4, #0]
 8005fb2:	1a6d      	subs	r5, r5, r1
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff ffa6 	bl	8005f08 <sbrk_aligned>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d03a      	beq.n	8006036 <_malloc_r+0xea>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	442b      	add	r3, r5
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	bb62      	cbnz	r2, 8006028 <_malloc_r+0xdc>
 8005fce:	f8c8 7000 	str.w	r7, [r8]
 8005fd2:	e00f      	b.n	8005ff4 <_malloc_r+0xa8>
 8005fd4:	6822      	ldr	r2, [r4, #0]
 8005fd6:	1b52      	subs	r2, r2, r5
 8005fd8:	d420      	bmi.n	800601c <_malloc_r+0xd0>
 8005fda:	2a0b      	cmp	r2, #11
 8005fdc:	d917      	bls.n	800600e <_malloc_r+0xc2>
 8005fde:	1961      	adds	r1, r4, r5
 8005fe0:	42a3      	cmp	r3, r4
 8005fe2:	6025      	str	r5, [r4, #0]
 8005fe4:	bf18      	it	ne
 8005fe6:	6059      	strne	r1, [r3, #4]
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	bf08      	it	eq
 8005fec:	f8c8 1000 	streq.w	r1, [r8]
 8005ff0:	5162      	str	r2, [r4, r5]
 8005ff2:	604b      	str	r3, [r1, #4]
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f000 f82f 	bl	8006058 <__malloc_unlock>
 8005ffa:	f104 000b 	add.w	r0, r4, #11
 8005ffe:	1d23      	adds	r3, r4, #4
 8006000:	f020 0007 	bic.w	r0, r0, #7
 8006004:	1ac2      	subs	r2, r0, r3
 8006006:	bf1c      	itt	ne
 8006008:	1a1b      	subne	r3, r3, r0
 800600a:	50a3      	strne	r3, [r4, r2]
 800600c:	e7af      	b.n	8005f6e <_malloc_r+0x22>
 800600e:	6862      	ldr	r2, [r4, #4]
 8006010:	42a3      	cmp	r3, r4
 8006012:	bf0c      	ite	eq
 8006014:	f8c8 2000 	streq.w	r2, [r8]
 8006018:	605a      	strne	r2, [r3, #4]
 800601a:	e7eb      	b.n	8005ff4 <_malloc_r+0xa8>
 800601c:	4623      	mov	r3, r4
 800601e:	6864      	ldr	r4, [r4, #4]
 8006020:	e7ae      	b.n	8005f80 <_malloc_r+0x34>
 8006022:	463c      	mov	r4, r7
 8006024:	687f      	ldr	r7, [r7, #4]
 8006026:	e7b6      	b.n	8005f96 <_malloc_r+0x4a>
 8006028:	461a      	mov	r2, r3
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	42a3      	cmp	r3, r4
 800602e:	d1fb      	bne.n	8006028 <_malloc_r+0xdc>
 8006030:	2300      	movs	r3, #0
 8006032:	6053      	str	r3, [r2, #4]
 8006034:	e7de      	b.n	8005ff4 <_malloc_r+0xa8>
 8006036:	230c      	movs	r3, #12
 8006038:	6033      	str	r3, [r6, #0]
 800603a:	4630      	mov	r0, r6
 800603c:	f000 f80c 	bl	8006058 <__malloc_unlock>
 8006040:	e794      	b.n	8005f6c <_malloc_r+0x20>
 8006042:	6005      	str	r5, [r0, #0]
 8006044:	e7d6      	b.n	8005ff4 <_malloc_r+0xa8>
 8006046:	bf00      	nop
 8006048:	20000508 	.word	0x20000508

0800604c <__malloc_lock>:
 800604c:	4801      	ldr	r0, [pc, #4]	@ (8006054 <__malloc_lock+0x8>)
 800604e:	f7ff bf0e 	b.w	8005e6e <__retarget_lock_acquire_recursive>
 8006052:	bf00      	nop
 8006054:	20000500 	.word	0x20000500

08006058 <__malloc_unlock>:
 8006058:	4801      	ldr	r0, [pc, #4]	@ (8006060 <__malloc_unlock+0x8>)
 800605a:	f7ff bf09 	b.w	8005e70 <__retarget_lock_release_recursive>
 800605e:	bf00      	nop
 8006060:	20000500 	.word	0x20000500

08006064 <__sfputc_r>:
 8006064:	6893      	ldr	r3, [r2, #8]
 8006066:	3b01      	subs	r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	b410      	push	{r4}
 800606c:	6093      	str	r3, [r2, #8]
 800606e:	da08      	bge.n	8006082 <__sfputc_r+0x1e>
 8006070:	6994      	ldr	r4, [r2, #24]
 8006072:	42a3      	cmp	r3, r4
 8006074:	db01      	blt.n	800607a <__sfputc_r+0x16>
 8006076:	290a      	cmp	r1, #10
 8006078:	d103      	bne.n	8006082 <__sfputc_r+0x1e>
 800607a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800607e:	f7ff bde8 	b.w	8005c52 <__swbuf_r>
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	1c58      	adds	r0, r3, #1
 8006086:	6010      	str	r0, [r2, #0]
 8006088:	7019      	strb	r1, [r3, #0]
 800608a:	4608      	mov	r0, r1
 800608c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006090:	4770      	bx	lr

08006092 <__sfputs_r>:
 8006092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006094:	4606      	mov	r6, r0
 8006096:	460f      	mov	r7, r1
 8006098:	4614      	mov	r4, r2
 800609a:	18d5      	adds	r5, r2, r3
 800609c:	42ac      	cmp	r4, r5
 800609e:	d101      	bne.n	80060a4 <__sfputs_r+0x12>
 80060a0:	2000      	movs	r0, #0
 80060a2:	e007      	b.n	80060b4 <__sfputs_r+0x22>
 80060a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a8:	463a      	mov	r2, r7
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff ffda 	bl	8006064 <__sfputc_r>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d1f3      	bne.n	800609c <__sfputs_r+0xa>
 80060b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060b8 <_vfiprintf_r>:
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060bc:	460d      	mov	r5, r1
 80060be:	b09d      	sub	sp, #116	@ 0x74
 80060c0:	4614      	mov	r4, r2
 80060c2:	4698      	mov	r8, r3
 80060c4:	4606      	mov	r6, r0
 80060c6:	b118      	cbz	r0, 80060d0 <_vfiprintf_r+0x18>
 80060c8:	6a03      	ldr	r3, [r0, #32]
 80060ca:	b90b      	cbnz	r3, 80060d0 <_vfiprintf_r+0x18>
 80060cc:	f7ff fcd8 	bl	8005a80 <__sinit>
 80060d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060d2:	07d9      	lsls	r1, r3, #31
 80060d4:	d405      	bmi.n	80060e2 <_vfiprintf_r+0x2a>
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	059a      	lsls	r2, r3, #22
 80060da:	d402      	bmi.n	80060e2 <_vfiprintf_r+0x2a>
 80060dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060de:	f7ff fec6 	bl	8005e6e <__retarget_lock_acquire_recursive>
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	071b      	lsls	r3, r3, #28
 80060e6:	d501      	bpl.n	80060ec <_vfiprintf_r+0x34>
 80060e8:	692b      	ldr	r3, [r5, #16]
 80060ea:	b99b      	cbnz	r3, 8006114 <_vfiprintf_r+0x5c>
 80060ec:	4629      	mov	r1, r5
 80060ee:	4630      	mov	r0, r6
 80060f0:	f7ff fdee 	bl	8005cd0 <__swsetup_r>
 80060f4:	b170      	cbz	r0, 8006114 <_vfiprintf_r+0x5c>
 80060f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060f8:	07dc      	lsls	r4, r3, #31
 80060fa:	d504      	bpl.n	8006106 <_vfiprintf_r+0x4e>
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	b01d      	add	sp, #116	@ 0x74
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	0598      	lsls	r0, r3, #22
 800610a:	d4f7      	bmi.n	80060fc <_vfiprintf_r+0x44>
 800610c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800610e:	f7ff feaf 	bl	8005e70 <__retarget_lock_release_recursive>
 8006112:	e7f3      	b.n	80060fc <_vfiprintf_r+0x44>
 8006114:	2300      	movs	r3, #0
 8006116:	9309      	str	r3, [sp, #36]	@ 0x24
 8006118:	2320      	movs	r3, #32
 800611a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800611e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006122:	2330      	movs	r3, #48	@ 0x30
 8006124:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062d4 <_vfiprintf_r+0x21c>
 8006128:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800612c:	f04f 0901 	mov.w	r9, #1
 8006130:	4623      	mov	r3, r4
 8006132:	469a      	mov	sl, r3
 8006134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006138:	b10a      	cbz	r2, 800613e <_vfiprintf_r+0x86>
 800613a:	2a25      	cmp	r2, #37	@ 0x25
 800613c:	d1f9      	bne.n	8006132 <_vfiprintf_r+0x7a>
 800613e:	ebba 0b04 	subs.w	fp, sl, r4
 8006142:	d00b      	beq.n	800615c <_vfiprintf_r+0xa4>
 8006144:	465b      	mov	r3, fp
 8006146:	4622      	mov	r2, r4
 8006148:	4629      	mov	r1, r5
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ffa1 	bl	8006092 <__sfputs_r>
 8006150:	3001      	adds	r0, #1
 8006152:	f000 80a7 	beq.w	80062a4 <_vfiprintf_r+0x1ec>
 8006156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006158:	445a      	add	r2, fp
 800615a:	9209      	str	r2, [sp, #36]	@ 0x24
 800615c:	f89a 3000 	ldrb.w	r3, [sl]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 809f 	beq.w	80062a4 <_vfiprintf_r+0x1ec>
 8006166:	2300      	movs	r3, #0
 8006168:	f04f 32ff 	mov.w	r2, #4294967295
 800616c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006170:	f10a 0a01 	add.w	sl, sl, #1
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	9307      	str	r3, [sp, #28]
 8006178:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800617c:	931a      	str	r3, [sp, #104]	@ 0x68
 800617e:	4654      	mov	r4, sl
 8006180:	2205      	movs	r2, #5
 8006182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006186:	4853      	ldr	r0, [pc, #332]	@ (80062d4 <_vfiprintf_r+0x21c>)
 8006188:	f7fa f822 	bl	80001d0 <memchr>
 800618c:	9a04      	ldr	r2, [sp, #16]
 800618e:	b9d8      	cbnz	r0, 80061c8 <_vfiprintf_r+0x110>
 8006190:	06d1      	lsls	r1, r2, #27
 8006192:	bf44      	itt	mi
 8006194:	2320      	movmi	r3, #32
 8006196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800619a:	0713      	lsls	r3, r2, #28
 800619c:	bf44      	itt	mi
 800619e:	232b      	movmi	r3, #43	@ 0x2b
 80061a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061a4:	f89a 3000 	ldrb.w	r3, [sl]
 80061a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80061aa:	d015      	beq.n	80061d8 <_vfiprintf_r+0x120>
 80061ac:	9a07      	ldr	r2, [sp, #28]
 80061ae:	4654      	mov	r4, sl
 80061b0:	2000      	movs	r0, #0
 80061b2:	f04f 0c0a 	mov.w	ip, #10
 80061b6:	4621      	mov	r1, r4
 80061b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061bc:	3b30      	subs	r3, #48	@ 0x30
 80061be:	2b09      	cmp	r3, #9
 80061c0:	d94b      	bls.n	800625a <_vfiprintf_r+0x1a2>
 80061c2:	b1b0      	cbz	r0, 80061f2 <_vfiprintf_r+0x13a>
 80061c4:	9207      	str	r2, [sp, #28]
 80061c6:	e014      	b.n	80061f2 <_vfiprintf_r+0x13a>
 80061c8:	eba0 0308 	sub.w	r3, r0, r8
 80061cc:	fa09 f303 	lsl.w	r3, r9, r3
 80061d0:	4313      	orrs	r3, r2
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	46a2      	mov	sl, r4
 80061d6:	e7d2      	b.n	800617e <_vfiprintf_r+0xc6>
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	1d19      	adds	r1, r3, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	9103      	str	r1, [sp, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	bfbb      	ittet	lt
 80061e4:	425b      	neglt	r3, r3
 80061e6:	f042 0202 	orrlt.w	r2, r2, #2
 80061ea:	9307      	strge	r3, [sp, #28]
 80061ec:	9307      	strlt	r3, [sp, #28]
 80061ee:	bfb8      	it	lt
 80061f0:	9204      	strlt	r2, [sp, #16]
 80061f2:	7823      	ldrb	r3, [r4, #0]
 80061f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80061f6:	d10a      	bne.n	800620e <_vfiprintf_r+0x156>
 80061f8:	7863      	ldrb	r3, [r4, #1]
 80061fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80061fc:	d132      	bne.n	8006264 <_vfiprintf_r+0x1ac>
 80061fe:	9b03      	ldr	r3, [sp, #12]
 8006200:	1d1a      	adds	r2, r3, #4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	9203      	str	r2, [sp, #12]
 8006206:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800620a:	3402      	adds	r4, #2
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062e4 <_vfiprintf_r+0x22c>
 8006212:	7821      	ldrb	r1, [r4, #0]
 8006214:	2203      	movs	r2, #3
 8006216:	4650      	mov	r0, sl
 8006218:	f7f9 ffda 	bl	80001d0 <memchr>
 800621c:	b138      	cbz	r0, 800622e <_vfiprintf_r+0x176>
 800621e:	9b04      	ldr	r3, [sp, #16]
 8006220:	eba0 000a 	sub.w	r0, r0, sl
 8006224:	2240      	movs	r2, #64	@ 0x40
 8006226:	4082      	lsls	r2, r0
 8006228:	4313      	orrs	r3, r2
 800622a:	3401      	adds	r4, #1
 800622c:	9304      	str	r3, [sp, #16]
 800622e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006232:	4829      	ldr	r0, [pc, #164]	@ (80062d8 <_vfiprintf_r+0x220>)
 8006234:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006238:	2206      	movs	r2, #6
 800623a:	f7f9 ffc9 	bl	80001d0 <memchr>
 800623e:	2800      	cmp	r0, #0
 8006240:	d03f      	beq.n	80062c2 <_vfiprintf_r+0x20a>
 8006242:	4b26      	ldr	r3, [pc, #152]	@ (80062dc <_vfiprintf_r+0x224>)
 8006244:	bb1b      	cbnz	r3, 800628e <_vfiprintf_r+0x1d6>
 8006246:	9b03      	ldr	r3, [sp, #12]
 8006248:	3307      	adds	r3, #7
 800624a:	f023 0307 	bic.w	r3, r3, #7
 800624e:	3308      	adds	r3, #8
 8006250:	9303      	str	r3, [sp, #12]
 8006252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006254:	443b      	add	r3, r7
 8006256:	9309      	str	r3, [sp, #36]	@ 0x24
 8006258:	e76a      	b.n	8006130 <_vfiprintf_r+0x78>
 800625a:	fb0c 3202 	mla	r2, ip, r2, r3
 800625e:	460c      	mov	r4, r1
 8006260:	2001      	movs	r0, #1
 8006262:	e7a8      	b.n	80061b6 <_vfiprintf_r+0xfe>
 8006264:	2300      	movs	r3, #0
 8006266:	3401      	adds	r4, #1
 8006268:	9305      	str	r3, [sp, #20]
 800626a:	4619      	mov	r1, r3
 800626c:	f04f 0c0a 	mov.w	ip, #10
 8006270:	4620      	mov	r0, r4
 8006272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006276:	3a30      	subs	r2, #48	@ 0x30
 8006278:	2a09      	cmp	r2, #9
 800627a:	d903      	bls.n	8006284 <_vfiprintf_r+0x1cc>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0c6      	beq.n	800620e <_vfiprintf_r+0x156>
 8006280:	9105      	str	r1, [sp, #20]
 8006282:	e7c4      	b.n	800620e <_vfiprintf_r+0x156>
 8006284:	fb0c 2101 	mla	r1, ip, r1, r2
 8006288:	4604      	mov	r4, r0
 800628a:	2301      	movs	r3, #1
 800628c:	e7f0      	b.n	8006270 <_vfiprintf_r+0x1b8>
 800628e:	ab03      	add	r3, sp, #12
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	462a      	mov	r2, r5
 8006294:	4b12      	ldr	r3, [pc, #72]	@ (80062e0 <_vfiprintf_r+0x228>)
 8006296:	a904      	add	r1, sp, #16
 8006298:	4630      	mov	r0, r6
 800629a:	f3af 8000 	nop.w
 800629e:	4607      	mov	r7, r0
 80062a0:	1c78      	adds	r0, r7, #1
 80062a2:	d1d6      	bne.n	8006252 <_vfiprintf_r+0x19a>
 80062a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062a6:	07d9      	lsls	r1, r3, #31
 80062a8:	d405      	bmi.n	80062b6 <_vfiprintf_r+0x1fe>
 80062aa:	89ab      	ldrh	r3, [r5, #12]
 80062ac:	059a      	lsls	r2, r3, #22
 80062ae:	d402      	bmi.n	80062b6 <_vfiprintf_r+0x1fe>
 80062b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062b2:	f7ff fddd 	bl	8005e70 <__retarget_lock_release_recursive>
 80062b6:	89ab      	ldrh	r3, [r5, #12]
 80062b8:	065b      	lsls	r3, r3, #25
 80062ba:	f53f af1f 	bmi.w	80060fc <_vfiprintf_r+0x44>
 80062be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062c0:	e71e      	b.n	8006100 <_vfiprintf_r+0x48>
 80062c2:	ab03      	add	r3, sp, #12
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	462a      	mov	r2, r5
 80062c8:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <_vfiprintf_r+0x228>)
 80062ca:	a904      	add	r1, sp, #16
 80062cc:	4630      	mov	r0, r6
 80062ce:	f000 f879 	bl	80063c4 <_printf_i>
 80062d2:	e7e4      	b.n	800629e <_vfiprintf_r+0x1e6>
 80062d4:	08006968 	.word	0x08006968
 80062d8:	08006972 	.word	0x08006972
 80062dc:	00000000 	.word	0x00000000
 80062e0:	08006093 	.word	0x08006093
 80062e4:	0800696e 	.word	0x0800696e

080062e8 <_printf_common>:
 80062e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ec:	4616      	mov	r6, r2
 80062ee:	4698      	mov	r8, r3
 80062f0:	688a      	ldr	r2, [r1, #8]
 80062f2:	690b      	ldr	r3, [r1, #16]
 80062f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062f8:	4293      	cmp	r3, r2
 80062fa:	bfb8      	it	lt
 80062fc:	4613      	movlt	r3, r2
 80062fe:	6033      	str	r3, [r6, #0]
 8006300:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006304:	4607      	mov	r7, r0
 8006306:	460c      	mov	r4, r1
 8006308:	b10a      	cbz	r2, 800630e <_printf_common+0x26>
 800630a:	3301      	adds	r3, #1
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	0699      	lsls	r1, r3, #26
 8006312:	bf42      	ittt	mi
 8006314:	6833      	ldrmi	r3, [r6, #0]
 8006316:	3302      	addmi	r3, #2
 8006318:	6033      	strmi	r3, [r6, #0]
 800631a:	6825      	ldr	r5, [r4, #0]
 800631c:	f015 0506 	ands.w	r5, r5, #6
 8006320:	d106      	bne.n	8006330 <_printf_common+0x48>
 8006322:	f104 0a19 	add.w	sl, r4, #25
 8006326:	68e3      	ldr	r3, [r4, #12]
 8006328:	6832      	ldr	r2, [r6, #0]
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	42ab      	cmp	r3, r5
 800632e:	dc26      	bgt.n	800637e <_printf_common+0x96>
 8006330:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	3b00      	subs	r3, #0
 8006338:	bf18      	it	ne
 800633a:	2301      	movne	r3, #1
 800633c:	0692      	lsls	r2, r2, #26
 800633e:	d42b      	bmi.n	8006398 <_printf_common+0xb0>
 8006340:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006344:	4641      	mov	r1, r8
 8006346:	4638      	mov	r0, r7
 8006348:	47c8      	blx	r9
 800634a:	3001      	adds	r0, #1
 800634c:	d01e      	beq.n	800638c <_printf_common+0xa4>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	f003 0306 	and.w	r3, r3, #6
 8006356:	2b04      	cmp	r3, #4
 8006358:	bf02      	ittt	eq
 800635a:	68e5      	ldreq	r5, [r4, #12]
 800635c:	6833      	ldreq	r3, [r6, #0]
 800635e:	1aed      	subeq	r5, r5, r3
 8006360:	68a3      	ldr	r3, [r4, #8]
 8006362:	bf0c      	ite	eq
 8006364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006368:	2500      	movne	r5, #0
 800636a:	4293      	cmp	r3, r2
 800636c:	bfc4      	itt	gt
 800636e:	1a9b      	subgt	r3, r3, r2
 8006370:	18ed      	addgt	r5, r5, r3
 8006372:	2600      	movs	r6, #0
 8006374:	341a      	adds	r4, #26
 8006376:	42b5      	cmp	r5, r6
 8006378:	d11a      	bne.n	80063b0 <_printf_common+0xc8>
 800637a:	2000      	movs	r0, #0
 800637c:	e008      	b.n	8006390 <_printf_common+0xa8>
 800637e:	2301      	movs	r3, #1
 8006380:	4652      	mov	r2, sl
 8006382:	4641      	mov	r1, r8
 8006384:	4638      	mov	r0, r7
 8006386:	47c8      	blx	r9
 8006388:	3001      	adds	r0, #1
 800638a:	d103      	bne.n	8006394 <_printf_common+0xac>
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006394:	3501      	adds	r5, #1
 8006396:	e7c6      	b.n	8006326 <_printf_common+0x3e>
 8006398:	18e1      	adds	r1, r4, r3
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	2030      	movs	r0, #48	@ 0x30
 800639e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063a2:	4422      	add	r2, r4
 80063a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063ac:	3302      	adds	r3, #2
 80063ae:	e7c7      	b.n	8006340 <_printf_common+0x58>
 80063b0:	2301      	movs	r3, #1
 80063b2:	4622      	mov	r2, r4
 80063b4:	4641      	mov	r1, r8
 80063b6:	4638      	mov	r0, r7
 80063b8:	47c8      	blx	r9
 80063ba:	3001      	adds	r0, #1
 80063bc:	d0e6      	beq.n	800638c <_printf_common+0xa4>
 80063be:	3601      	adds	r6, #1
 80063c0:	e7d9      	b.n	8006376 <_printf_common+0x8e>
	...

080063c4 <_printf_i>:
 80063c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c8:	7e0f      	ldrb	r7, [r1, #24]
 80063ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063cc:	2f78      	cmp	r7, #120	@ 0x78
 80063ce:	4691      	mov	r9, r2
 80063d0:	4680      	mov	r8, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	469a      	mov	sl, r3
 80063d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063da:	d807      	bhi.n	80063ec <_printf_i+0x28>
 80063dc:	2f62      	cmp	r7, #98	@ 0x62
 80063de:	d80a      	bhi.n	80063f6 <_printf_i+0x32>
 80063e0:	2f00      	cmp	r7, #0
 80063e2:	f000 80d2 	beq.w	800658a <_printf_i+0x1c6>
 80063e6:	2f58      	cmp	r7, #88	@ 0x58
 80063e8:	f000 80b9 	beq.w	800655e <_printf_i+0x19a>
 80063ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063f4:	e03a      	b.n	800646c <_printf_i+0xa8>
 80063f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063fa:	2b15      	cmp	r3, #21
 80063fc:	d8f6      	bhi.n	80063ec <_printf_i+0x28>
 80063fe:	a101      	add	r1, pc, #4	@ (adr r1, 8006404 <_printf_i+0x40>)
 8006400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006404:	0800645d 	.word	0x0800645d
 8006408:	08006471 	.word	0x08006471
 800640c:	080063ed 	.word	0x080063ed
 8006410:	080063ed 	.word	0x080063ed
 8006414:	080063ed 	.word	0x080063ed
 8006418:	080063ed 	.word	0x080063ed
 800641c:	08006471 	.word	0x08006471
 8006420:	080063ed 	.word	0x080063ed
 8006424:	080063ed 	.word	0x080063ed
 8006428:	080063ed 	.word	0x080063ed
 800642c:	080063ed 	.word	0x080063ed
 8006430:	08006571 	.word	0x08006571
 8006434:	0800649b 	.word	0x0800649b
 8006438:	0800652b 	.word	0x0800652b
 800643c:	080063ed 	.word	0x080063ed
 8006440:	080063ed 	.word	0x080063ed
 8006444:	08006593 	.word	0x08006593
 8006448:	080063ed 	.word	0x080063ed
 800644c:	0800649b 	.word	0x0800649b
 8006450:	080063ed 	.word	0x080063ed
 8006454:	080063ed 	.word	0x080063ed
 8006458:	08006533 	.word	0x08006533
 800645c:	6833      	ldr	r3, [r6, #0]
 800645e:	1d1a      	adds	r2, r3, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6032      	str	r2, [r6, #0]
 8006464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006468:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800646c:	2301      	movs	r3, #1
 800646e:	e09d      	b.n	80065ac <_printf_i+0x1e8>
 8006470:	6833      	ldr	r3, [r6, #0]
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	1d19      	adds	r1, r3, #4
 8006476:	6031      	str	r1, [r6, #0]
 8006478:	0606      	lsls	r6, r0, #24
 800647a:	d501      	bpl.n	8006480 <_printf_i+0xbc>
 800647c:	681d      	ldr	r5, [r3, #0]
 800647e:	e003      	b.n	8006488 <_printf_i+0xc4>
 8006480:	0645      	lsls	r5, r0, #25
 8006482:	d5fb      	bpl.n	800647c <_printf_i+0xb8>
 8006484:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006488:	2d00      	cmp	r5, #0
 800648a:	da03      	bge.n	8006494 <_printf_i+0xd0>
 800648c:	232d      	movs	r3, #45	@ 0x2d
 800648e:	426d      	negs	r5, r5
 8006490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006494:	4859      	ldr	r0, [pc, #356]	@ (80065fc <_printf_i+0x238>)
 8006496:	230a      	movs	r3, #10
 8006498:	e011      	b.n	80064be <_printf_i+0xfa>
 800649a:	6821      	ldr	r1, [r4, #0]
 800649c:	6833      	ldr	r3, [r6, #0]
 800649e:	0608      	lsls	r0, r1, #24
 80064a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80064a4:	d402      	bmi.n	80064ac <_printf_i+0xe8>
 80064a6:	0649      	lsls	r1, r1, #25
 80064a8:	bf48      	it	mi
 80064aa:	b2ad      	uxthmi	r5, r5
 80064ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80064ae:	4853      	ldr	r0, [pc, #332]	@ (80065fc <_printf_i+0x238>)
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	bf14      	ite	ne
 80064b4:	230a      	movne	r3, #10
 80064b6:	2308      	moveq	r3, #8
 80064b8:	2100      	movs	r1, #0
 80064ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064be:	6866      	ldr	r6, [r4, #4]
 80064c0:	60a6      	str	r6, [r4, #8]
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	bfa2      	ittt	ge
 80064c6:	6821      	ldrge	r1, [r4, #0]
 80064c8:	f021 0104 	bicge.w	r1, r1, #4
 80064cc:	6021      	strge	r1, [r4, #0]
 80064ce:	b90d      	cbnz	r5, 80064d4 <_printf_i+0x110>
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	d04b      	beq.n	800656c <_printf_i+0x1a8>
 80064d4:	4616      	mov	r6, r2
 80064d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80064da:	fb03 5711 	mls	r7, r3, r1, r5
 80064de:	5dc7      	ldrb	r7, [r0, r7]
 80064e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064e4:	462f      	mov	r7, r5
 80064e6:	42bb      	cmp	r3, r7
 80064e8:	460d      	mov	r5, r1
 80064ea:	d9f4      	bls.n	80064d6 <_printf_i+0x112>
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d10b      	bne.n	8006508 <_printf_i+0x144>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	07df      	lsls	r7, r3, #31
 80064f4:	d508      	bpl.n	8006508 <_printf_i+0x144>
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	6861      	ldr	r1, [r4, #4]
 80064fa:	4299      	cmp	r1, r3
 80064fc:	bfde      	ittt	le
 80064fe:	2330      	movle	r3, #48	@ 0x30
 8006500:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006504:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006508:	1b92      	subs	r2, r2, r6
 800650a:	6122      	str	r2, [r4, #16]
 800650c:	f8cd a000 	str.w	sl, [sp]
 8006510:	464b      	mov	r3, r9
 8006512:	aa03      	add	r2, sp, #12
 8006514:	4621      	mov	r1, r4
 8006516:	4640      	mov	r0, r8
 8006518:	f7ff fee6 	bl	80062e8 <_printf_common>
 800651c:	3001      	adds	r0, #1
 800651e:	d14a      	bne.n	80065b6 <_printf_i+0x1f2>
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	b004      	add	sp, #16
 8006526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	f043 0320 	orr.w	r3, r3, #32
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	4833      	ldr	r0, [pc, #204]	@ (8006600 <_printf_i+0x23c>)
 8006534:	2778      	movs	r7, #120	@ 0x78
 8006536:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	6831      	ldr	r1, [r6, #0]
 800653e:	061f      	lsls	r7, r3, #24
 8006540:	f851 5b04 	ldr.w	r5, [r1], #4
 8006544:	d402      	bmi.n	800654c <_printf_i+0x188>
 8006546:	065f      	lsls	r7, r3, #25
 8006548:	bf48      	it	mi
 800654a:	b2ad      	uxthmi	r5, r5
 800654c:	6031      	str	r1, [r6, #0]
 800654e:	07d9      	lsls	r1, r3, #31
 8006550:	bf44      	itt	mi
 8006552:	f043 0320 	orrmi.w	r3, r3, #32
 8006556:	6023      	strmi	r3, [r4, #0]
 8006558:	b11d      	cbz	r5, 8006562 <_printf_i+0x19e>
 800655a:	2310      	movs	r3, #16
 800655c:	e7ac      	b.n	80064b8 <_printf_i+0xf4>
 800655e:	4827      	ldr	r0, [pc, #156]	@ (80065fc <_printf_i+0x238>)
 8006560:	e7e9      	b.n	8006536 <_printf_i+0x172>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	f023 0320 	bic.w	r3, r3, #32
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	e7f6      	b.n	800655a <_printf_i+0x196>
 800656c:	4616      	mov	r6, r2
 800656e:	e7bd      	b.n	80064ec <_printf_i+0x128>
 8006570:	6833      	ldr	r3, [r6, #0]
 8006572:	6825      	ldr	r5, [r4, #0]
 8006574:	6961      	ldr	r1, [r4, #20]
 8006576:	1d18      	adds	r0, r3, #4
 8006578:	6030      	str	r0, [r6, #0]
 800657a:	062e      	lsls	r6, r5, #24
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	d501      	bpl.n	8006584 <_printf_i+0x1c0>
 8006580:	6019      	str	r1, [r3, #0]
 8006582:	e002      	b.n	800658a <_printf_i+0x1c6>
 8006584:	0668      	lsls	r0, r5, #25
 8006586:	d5fb      	bpl.n	8006580 <_printf_i+0x1bc>
 8006588:	8019      	strh	r1, [r3, #0]
 800658a:	2300      	movs	r3, #0
 800658c:	6123      	str	r3, [r4, #16]
 800658e:	4616      	mov	r6, r2
 8006590:	e7bc      	b.n	800650c <_printf_i+0x148>
 8006592:	6833      	ldr	r3, [r6, #0]
 8006594:	1d1a      	adds	r2, r3, #4
 8006596:	6032      	str	r2, [r6, #0]
 8006598:	681e      	ldr	r6, [r3, #0]
 800659a:	6862      	ldr	r2, [r4, #4]
 800659c:	2100      	movs	r1, #0
 800659e:	4630      	mov	r0, r6
 80065a0:	f7f9 fe16 	bl	80001d0 <memchr>
 80065a4:	b108      	cbz	r0, 80065aa <_printf_i+0x1e6>
 80065a6:	1b80      	subs	r0, r0, r6
 80065a8:	6060      	str	r0, [r4, #4]
 80065aa:	6863      	ldr	r3, [r4, #4]
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	2300      	movs	r3, #0
 80065b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065b4:	e7aa      	b.n	800650c <_printf_i+0x148>
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	4632      	mov	r2, r6
 80065ba:	4649      	mov	r1, r9
 80065bc:	4640      	mov	r0, r8
 80065be:	47d0      	blx	sl
 80065c0:	3001      	adds	r0, #1
 80065c2:	d0ad      	beq.n	8006520 <_printf_i+0x15c>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	079b      	lsls	r3, r3, #30
 80065c8:	d413      	bmi.n	80065f2 <_printf_i+0x22e>
 80065ca:	68e0      	ldr	r0, [r4, #12]
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	4298      	cmp	r0, r3
 80065d0:	bfb8      	it	lt
 80065d2:	4618      	movlt	r0, r3
 80065d4:	e7a6      	b.n	8006524 <_printf_i+0x160>
 80065d6:	2301      	movs	r3, #1
 80065d8:	4632      	mov	r2, r6
 80065da:	4649      	mov	r1, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	47d0      	blx	sl
 80065e0:	3001      	adds	r0, #1
 80065e2:	d09d      	beq.n	8006520 <_printf_i+0x15c>
 80065e4:	3501      	adds	r5, #1
 80065e6:	68e3      	ldr	r3, [r4, #12]
 80065e8:	9903      	ldr	r1, [sp, #12]
 80065ea:	1a5b      	subs	r3, r3, r1
 80065ec:	42ab      	cmp	r3, r5
 80065ee:	dcf2      	bgt.n	80065d6 <_printf_i+0x212>
 80065f0:	e7eb      	b.n	80065ca <_printf_i+0x206>
 80065f2:	2500      	movs	r5, #0
 80065f4:	f104 0619 	add.w	r6, r4, #25
 80065f8:	e7f5      	b.n	80065e6 <_printf_i+0x222>
 80065fa:	bf00      	nop
 80065fc:	08006979 	.word	0x08006979
 8006600:	0800698a 	.word	0x0800698a

08006604 <__sflush_r>:
 8006604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660c:	0716      	lsls	r6, r2, #28
 800660e:	4605      	mov	r5, r0
 8006610:	460c      	mov	r4, r1
 8006612:	d454      	bmi.n	80066be <__sflush_r+0xba>
 8006614:	684b      	ldr	r3, [r1, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	dc02      	bgt.n	8006620 <__sflush_r+0x1c>
 800661a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	dd48      	ble.n	80066b2 <__sflush_r+0xae>
 8006620:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006622:	2e00      	cmp	r6, #0
 8006624:	d045      	beq.n	80066b2 <__sflush_r+0xae>
 8006626:	2300      	movs	r3, #0
 8006628:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800662c:	682f      	ldr	r7, [r5, #0]
 800662e:	6a21      	ldr	r1, [r4, #32]
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	d030      	beq.n	8006696 <__sflush_r+0x92>
 8006634:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	0759      	lsls	r1, r3, #29
 800663a:	d505      	bpl.n	8006648 <__sflush_r+0x44>
 800663c:	6863      	ldr	r3, [r4, #4]
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006642:	b10b      	cbz	r3, 8006648 <__sflush_r+0x44>
 8006644:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006646:	1ad2      	subs	r2, r2, r3
 8006648:	2300      	movs	r3, #0
 800664a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800664c:	6a21      	ldr	r1, [r4, #32]
 800664e:	4628      	mov	r0, r5
 8006650:	47b0      	blx	r6
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	d106      	bne.n	8006666 <__sflush_r+0x62>
 8006658:	6829      	ldr	r1, [r5, #0]
 800665a:	291d      	cmp	r1, #29
 800665c:	d82b      	bhi.n	80066b6 <__sflush_r+0xb2>
 800665e:	4a2a      	ldr	r2, [pc, #168]	@ (8006708 <__sflush_r+0x104>)
 8006660:	410a      	asrs	r2, r1
 8006662:	07d6      	lsls	r6, r2, #31
 8006664:	d427      	bmi.n	80066b6 <__sflush_r+0xb2>
 8006666:	2200      	movs	r2, #0
 8006668:	6062      	str	r2, [r4, #4]
 800666a:	04d9      	lsls	r1, r3, #19
 800666c:	6922      	ldr	r2, [r4, #16]
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	d504      	bpl.n	800667c <__sflush_r+0x78>
 8006672:	1c42      	adds	r2, r0, #1
 8006674:	d101      	bne.n	800667a <__sflush_r+0x76>
 8006676:	682b      	ldr	r3, [r5, #0]
 8006678:	b903      	cbnz	r3, 800667c <__sflush_r+0x78>
 800667a:	6560      	str	r0, [r4, #84]	@ 0x54
 800667c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800667e:	602f      	str	r7, [r5, #0]
 8006680:	b1b9      	cbz	r1, 80066b2 <__sflush_r+0xae>
 8006682:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006686:	4299      	cmp	r1, r3
 8006688:	d002      	beq.n	8006690 <__sflush_r+0x8c>
 800668a:	4628      	mov	r0, r5
 800668c:	f7ff fbf2 	bl	8005e74 <_free_r>
 8006690:	2300      	movs	r3, #0
 8006692:	6363      	str	r3, [r4, #52]	@ 0x34
 8006694:	e00d      	b.n	80066b2 <__sflush_r+0xae>
 8006696:	2301      	movs	r3, #1
 8006698:	4628      	mov	r0, r5
 800669a:	47b0      	blx	r6
 800669c:	4602      	mov	r2, r0
 800669e:	1c50      	adds	r0, r2, #1
 80066a0:	d1c9      	bne.n	8006636 <__sflush_r+0x32>
 80066a2:	682b      	ldr	r3, [r5, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0c6      	beq.n	8006636 <__sflush_r+0x32>
 80066a8:	2b1d      	cmp	r3, #29
 80066aa:	d001      	beq.n	80066b0 <__sflush_r+0xac>
 80066ac:	2b16      	cmp	r3, #22
 80066ae:	d11e      	bne.n	80066ee <__sflush_r+0xea>
 80066b0:	602f      	str	r7, [r5, #0]
 80066b2:	2000      	movs	r0, #0
 80066b4:	e022      	b.n	80066fc <__sflush_r+0xf8>
 80066b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ba:	b21b      	sxth	r3, r3
 80066bc:	e01b      	b.n	80066f6 <__sflush_r+0xf2>
 80066be:	690f      	ldr	r7, [r1, #16]
 80066c0:	2f00      	cmp	r7, #0
 80066c2:	d0f6      	beq.n	80066b2 <__sflush_r+0xae>
 80066c4:	0793      	lsls	r3, r2, #30
 80066c6:	680e      	ldr	r6, [r1, #0]
 80066c8:	bf08      	it	eq
 80066ca:	694b      	ldreq	r3, [r1, #20]
 80066cc:	600f      	str	r7, [r1, #0]
 80066ce:	bf18      	it	ne
 80066d0:	2300      	movne	r3, #0
 80066d2:	eba6 0807 	sub.w	r8, r6, r7
 80066d6:	608b      	str	r3, [r1, #8]
 80066d8:	f1b8 0f00 	cmp.w	r8, #0
 80066dc:	dde9      	ble.n	80066b2 <__sflush_r+0xae>
 80066de:	6a21      	ldr	r1, [r4, #32]
 80066e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066e2:	4643      	mov	r3, r8
 80066e4:	463a      	mov	r2, r7
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b0      	blx	r6
 80066ea:	2800      	cmp	r0, #0
 80066ec:	dc08      	bgt.n	8006700 <__sflush_r+0xfc>
 80066ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066f6:	81a3      	strh	r3, [r4, #12]
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006700:	4407      	add	r7, r0
 8006702:	eba8 0800 	sub.w	r8, r8, r0
 8006706:	e7e7      	b.n	80066d8 <__sflush_r+0xd4>
 8006708:	dfbffffe 	.word	0xdfbffffe

0800670c <_fflush_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	690b      	ldr	r3, [r1, #16]
 8006710:	4605      	mov	r5, r0
 8006712:	460c      	mov	r4, r1
 8006714:	b913      	cbnz	r3, 800671c <_fflush_r+0x10>
 8006716:	2500      	movs	r5, #0
 8006718:	4628      	mov	r0, r5
 800671a:	bd38      	pop	{r3, r4, r5, pc}
 800671c:	b118      	cbz	r0, 8006726 <_fflush_r+0x1a>
 800671e:	6a03      	ldr	r3, [r0, #32]
 8006720:	b90b      	cbnz	r3, 8006726 <_fflush_r+0x1a>
 8006722:	f7ff f9ad 	bl	8005a80 <__sinit>
 8006726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f3      	beq.n	8006716 <_fflush_r+0xa>
 800672e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006730:	07d0      	lsls	r0, r2, #31
 8006732:	d404      	bmi.n	800673e <_fflush_r+0x32>
 8006734:	0599      	lsls	r1, r3, #22
 8006736:	d402      	bmi.n	800673e <_fflush_r+0x32>
 8006738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800673a:	f7ff fb98 	bl	8005e6e <__retarget_lock_acquire_recursive>
 800673e:	4628      	mov	r0, r5
 8006740:	4621      	mov	r1, r4
 8006742:	f7ff ff5f 	bl	8006604 <__sflush_r>
 8006746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006748:	07da      	lsls	r2, r3, #31
 800674a:	4605      	mov	r5, r0
 800674c:	d4e4      	bmi.n	8006718 <_fflush_r+0xc>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	059b      	lsls	r3, r3, #22
 8006752:	d4e1      	bmi.n	8006718 <_fflush_r+0xc>
 8006754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006756:	f7ff fb8b 	bl	8005e70 <__retarget_lock_release_recursive>
 800675a:	e7dd      	b.n	8006718 <_fflush_r+0xc>

0800675c <__swhatbuf_r>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	460c      	mov	r4, r1
 8006760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006764:	2900      	cmp	r1, #0
 8006766:	b096      	sub	sp, #88	@ 0x58
 8006768:	4615      	mov	r5, r2
 800676a:	461e      	mov	r6, r3
 800676c:	da0d      	bge.n	800678a <__swhatbuf_r+0x2e>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006774:	f04f 0100 	mov.w	r1, #0
 8006778:	bf14      	ite	ne
 800677a:	2340      	movne	r3, #64	@ 0x40
 800677c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006780:	2000      	movs	r0, #0
 8006782:	6031      	str	r1, [r6, #0]
 8006784:	602b      	str	r3, [r5, #0]
 8006786:	b016      	add	sp, #88	@ 0x58
 8006788:	bd70      	pop	{r4, r5, r6, pc}
 800678a:	466a      	mov	r2, sp
 800678c:	f000 f848 	bl	8006820 <_fstat_r>
 8006790:	2800      	cmp	r0, #0
 8006792:	dbec      	blt.n	800676e <__swhatbuf_r+0x12>
 8006794:	9901      	ldr	r1, [sp, #4]
 8006796:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800679a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800679e:	4259      	negs	r1, r3
 80067a0:	4159      	adcs	r1, r3
 80067a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067a6:	e7eb      	b.n	8006780 <__swhatbuf_r+0x24>

080067a8 <__smakebuf_r>:
 80067a8:	898b      	ldrh	r3, [r1, #12]
 80067aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ac:	079d      	lsls	r5, r3, #30
 80067ae:	4606      	mov	r6, r0
 80067b0:	460c      	mov	r4, r1
 80067b2:	d507      	bpl.n	80067c4 <__smakebuf_r+0x1c>
 80067b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	2301      	movs	r3, #1
 80067be:	6163      	str	r3, [r4, #20]
 80067c0:	b003      	add	sp, #12
 80067c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c4:	ab01      	add	r3, sp, #4
 80067c6:	466a      	mov	r2, sp
 80067c8:	f7ff ffc8 	bl	800675c <__swhatbuf_r>
 80067cc:	9f00      	ldr	r7, [sp, #0]
 80067ce:	4605      	mov	r5, r0
 80067d0:	4639      	mov	r1, r7
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7ff fbba 	bl	8005f4c <_malloc_r>
 80067d8:	b948      	cbnz	r0, 80067ee <__smakebuf_r+0x46>
 80067da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067de:	059a      	lsls	r2, r3, #22
 80067e0:	d4ee      	bmi.n	80067c0 <__smakebuf_r+0x18>
 80067e2:	f023 0303 	bic.w	r3, r3, #3
 80067e6:	f043 0302 	orr.w	r3, r3, #2
 80067ea:	81a3      	strh	r3, [r4, #12]
 80067ec:	e7e2      	b.n	80067b4 <__smakebuf_r+0xc>
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	6020      	str	r0, [r4, #0]
 80067f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	9b01      	ldr	r3, [sp, #4]
 80067fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067fe:	b15b      	cbz	r3, 8006818 <__smakebuf_r+0x70>
 8006800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006804:	4630      	mov	r0, r6
 8006806:	f000 f81d 	bl	8006844 <_isatty_r>
 800680a:	b128      	cbz	r0, 8006818 <__smakebuf_r+0x70>
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	431d      	orrs	r5, r3
 800681c:	81a5      	strh	r5, [r4, #12]
 800681e:	e7cf      	b.n	80067c0 <__smakebuf_r+0x18>

08006820 <_fstat_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d07      	ldr	r5, [pc, #28]	@ (8006840 <_fstat_r+0x20>)
 8006824:	2300      	movs	r3, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	f7fa fe9a 	bl	8001566 <_fstat>
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	d102      	bne.n	800683c <_fstat_r+0x1c>
 8006836:	682b      	ldr	r3, [r5, #0]
 8006838:	b103      	cbz	r3, 800683c <_fstat_r+0x1c>
 800683a:	6023      	str	r3, [r4, #0]
 800683c:	bd38      	pop	{r3, r4, r5, pc}
 800683e:	bf00      	nop
 8006840:	200004fc 	.word	0x200004fc

08006844 <_isatty_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d06      	ldr	r5, [pc, #24]	@ (8006860 <_isatty_r+0x1c>)
 8006848:	2300      	movs	r3, #0
 800684a:	4604      	mov	r4, r0
 800684c:	4608      	mov	r0, r1
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	f7fa fe99 	bl	8001586 <_isatty>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_isatty_r+0x1a>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_isatty_r+0x1a>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	200004fc 	.word	0x200004fc

08006864 <_sbrk_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d06      	ldr	r5, [pc, #24]	@ (8006880 <_sbrk_r+0x1c>)
 8006868:	2300      	movs	r3, #0
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	f7fa fea2 	bl	80015b8 <_sbrk>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_sbrk_r+0x1a>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_sbrk_r+0x1a>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	200004fc 	.word	0x200004fc

08006884 <_init>:
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006886:	bf00      	nop
 8006888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688a:	bc08      	pop	{r3}
 800688c:	469e      	mov	lr, r3
 800688e:	4770      	bx	lr

08006890 <_fini>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr
